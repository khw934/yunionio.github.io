[
{
	"uri": "/howto/image/upload/",
	"title": "上传镜像",
	"tags": [],
	"description": "",
	"content": " 获取镜像 上传镜像之前需要先获取镜像，途径有多种，比如从发行版官网下载用于云平台的镜像，或者自己制作。\n发行版镜像 根据自己对发行版的需要下载发行版镜像，常用的 Linux 发行版会提供云平台虚拟机使用的镜像，地址如下:\n centos: http://cloud.centos.org/centos/7/images/ ubuntu: https://cloud-images.ubuntu.com/  制作镜像 参考: 制作镜像\n上传 下载或者制作完镜像后，使用 climc image-upload 上传到云平台的 glance 服务，下面以下载 ubuntu 提供的 xenial-server-cloudimg 举例:\n# 下载 ubuntu xenial-server-cloudimg-amd64-disk1.img $ wget https://cloud-images.ubuntu.com/xenial/20190716/xenial-server-cloudimg-amd64-disk1.img # 上传镜像到云平台并名为 ubuntu-xenial-server.qcow2 $ climc image-upload --format qcow2 --os-type Linux --os-arch x86_64 --public ubuntu-xenial-server.qcow2 ./xenial-server-cloudimg-amd64-disk1.img 上传时间长短取决于网络环境和镜像大小，上传完成后需要查询镜像的状态，当状态变为 \u0026lsquo;active\u0026rsquo; 时，就可以拿来使用了。( 更多的关于镜像的查询参考: 镜像查询 )\n$ climc image-show ubuntu-xenial-server.qcow2 | grep status | status | active | 上传参数 使用 climc help image-upload 获取各个参数解释。\n"
},
{
	"uri": "/howto/climc/",
	"title": "命令行工具",
	"tags": [],
	"description": "",
	"content": " 云平台的命令行管理工具叫 climc, 可以通过该工具向后端各个服务发送请求, 操作各种资源。\n安装 可以通过 yum 或者源码编译的方式安装。\nRPM 安装 添加 yunion 的 yum 源，如果已经添加可以忽略这一步。\n$ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/yum.repos.d/yunion.repo [yunion] name=Packages for Yunion Multi-Cloud Platform baseurl=https://iso.yunion.cn/yumrepo-2.10 sslverify=0 failovermethod=priority enabled=1 gpgcheck=0 EOF 安装 climc\n$ sudo yum install -y yunion-climc $ ls -alh /opt/yunion/bin/climc -rwxr-xr-x 1 root root 24M Jul 18 19:04 /opt/yunion/bin/climc 源码编译安装 首先需要搭建 go 的开发环境，然后 clone 代码，参考: 开发贡献\n# 编译 climc $ cd $GOPATH/src/yunion.io/x/onecloud $ make cmd/climc # 等待编译完成后，climc 在 _output/bin 目录下 $ ls -alh _output/bin/climc -rwxr-xr-x 1 lzx lzx 25M Jul 15 17:10 _output/bin/climc 可以根据自己的需要，将编译好的 climc 放到对应的目录，或者直接写 alias 对应到 $GOPATH/src/yunion.io/x/onecloud/_output/bin/climc 。\n使用 安装好 climc 后，可以将对应的可执行目录加入到 PATH 环境变量，下面假设 climc 所在的目录是 /opt/yunion/bin 。\n# 根据自己的需要加到 bash 或者 zsh 配置文件里面 $ echo \u0026#39;export PATH=$PATH:/opt/yunion/bin\u0026#39; \u0026gt;\u0026gt; ~/.bashrc \u0026amp;\u0026amp; source ~/.bashrc $ climc --help 认证配置 climc 请求云平台后端服务的流程如下:\n 通过配置信息，使用用户名密码从 keystone 获取 token token 中包含了后端服务的 endpoint 地址 climc 将对应资源的 CURD 请求发往所属的后端服务  所以在操作资源前，我们需要通过环境变量告诉 climc 想要操作的云平台。\n# 将认证信息保存到文件中，方便 source 使用 $ cat \u0026lt;\u0026lt;EOF \u0026gt; ~/test_rc_admin # 用户名 export OS_USERNAME=sysadmin # 用户密码 export OS_PASSWORD=*** # 用户所属项目 export OS_PROJECT_NAME=system # keystone 认证地址 export OS_AUTH_URL=https://192.168.0.246:5000/v3 # 对应的 region export OS_REGION_NAME=Beijing EOF # source 认证环境变量 $ source ~/test_rc_admin # 查看虚拟机列表 $ climc server-list 注意: 如果执行 climc 时出现 Error: Missing OS_AUTH_URL 的错误提示时，请 source 或设置认证云平台的环境变量。\n可以通过查看 climc 的版本号来获取构建的信息。\n$ climc --version Yunion API client version: { \u0026#34;major\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;minor\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;gitVersion\u0026#34;: \u0026#34;v2.10.20190527.0-652-g80287c2e365949\u0026#34;, \u0026#34;gitBranch\u0026#34;: \u0026#34;feature/service-pprof\u0026#34;, \u0026#34;gitCommit\u0026#34;: \u0026#34;80287c2e3\u0026#34;, \u0026#34;gitTreeState\u0026#34;: \u0026#34;clean\u0026#34;, \u0026#34;buildDate\u0026#34;: \u0026#34;2019-07-15T09:10:07Z\u0026#34;, \u0026#34;goVersion\u0026#34;: \u0026#34;go1.12.7\u0026#34;, \u0026#34;compiler\u0026#34;: \u0026#34;gc\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;linux/amd64\u0026#34; } 运行模式 climc 有命令行运行和交互两种运行模式。\n 命令行运行: 执行完对应的资源操作命令就退出，这种模式你知道自己在做什么，并且可以作为 bash function/script 的一部分。  # 删除 server1, server2, server3 for id in server1 server2 server3; do climc server-update --delete enable $id climc server-delete $id done  交互模式: 在 shell 输入 climc，就会进入交互模式，这种模式下有自动补全和参数提示。   子命令语法 云平台有很多资源，对应 climc 的子命令, 比如 climc server-list 中的 server-list 就是子命令，可以查询虚拟机的列表。通用格式如下:\n\u0026lt;Resource\u0026gt;-\u0026lt;Action\u0026gt;: Resource 表示资源, Action 表示行为 语法举例:\n server-delete: 删除虚拟机  server 是资源, delete 是行为  host-list: 查询宿主机列表  host 是资源, list 是行为   CRUD 举例:\n C: server-create, disk-create 创建资源 R: server-show, disk-list 查询资源 U: server-update, host-update 更新资源 D: server-delete, image-delete 删除资源  行为举例:\n- 中的 Action 会对应资源的操作，不同的资源会根据可进行的操作进行命名。\n server-migrate: migrate 表示迁移虚拟机 server-change-config: change-config 表示调整虚拟机配置 host-ipmi: ipmi 表示查询宿主机的 IPMI 信息  想要知道资源有哪些操作，可以进入交互模式补全查询。\n使用帮助 help climc 的子命令有很多参数，参数分为必填参数和可选参数，使用 climc help \u0026lt;subcommand\u0026gt; 这种格式，help 子命令会获取  提供的参数和各个参数的解释。\n比如我要查看 image-upload 命令的参数和解释:\n$ climc help image-upload ... Upload a local image Positional arguments: \u0026lt;NAME\u0026gt; Image Name \u0026lt;FILE\u0026gt; The local image filename to Upload Optional arguments: [--private] Make image private [--format {raw,qcow2,iso,vmdk,docker,vhd}] Image format [--protected] ... 高级过滤 filter TODO\nDebug 模式 如果想要知道 climc 操作资源时究竟和服务端发生了哪些请求，可以在子命令前面使用 \u0026ndash;debug 参数，使用方式如下:\nclimc --debug \u0026lt;Resource\u0026gt;-\u0026lt;Action\u0026gt; 加上 \u0026ndash;debug 参数后，终端会有彩色的输出提示，比如 climc --debug server-list 输出如下:\n其中 CURL 部分是可以直接粘贴出来在命令行执行的。\n颜色约定  Request 使用黄色 CURL 使用蓝绿色 根据状态码显示不同颜色，可参考代码: https://github.com/yunionio/onecloud/blob/master/pkg/util/httputils/httputils.go#L234  "
},
{
	"uri": "/overview/",
	"title": "OneCloud 简介",
	"tags": [],
	"description": "",
	"content": "OneCloud具备以下特性：\n 统一全面\n 物理机/虚拟机/容器全面纳管 统一API／模板／控制台/监控  可扩展性架构\n 基于Region和Zone的分层架构，能够在区域、可用区、集群等层次平行扩容 控制节点各功能组件分离，易于部署 平台支持KVM、VMware、OpenStack、Kubernetes、各种公有云等不同的资源类型统一管理   "
},
{
	"uri": "/setup/",
	"title": "安装部署",
	"tags": [],
	"description": "",
	"content": " 安装部署 介绍如何部署 onecloud 后端服务组件\n"
},
{
	"uri": "/setup/intro/",
	"title": "组件概览",
	"tags": [],
	"description": "",
	"content": "OneCloud 目前仅支持在 Centos 7 上运行，待部署组件/服务如下:\n   服务组件 用途 安装方式 运行方式     mariadb 关系型数据库 rpm systemd   docker 容器运行时 rpm systemd   kubelet 管理 kubernetes pod rpm systemd   keystone 认证服务 kubernetes pod container   region api 控制器 kubernetes pod container   scheduler 调度服务 kubernetes pod container   glance 镜像存储 kubernetes pod container   host 管理虚拟机 rpm systemd   sdnagent 管理虚拟机网络 rpm systemd   baremetal 管理物理机 kubernetes pod container   climc 命令行工具 rpm shell   ocadm 部署服务管理工具 rpm shell    其中 host 和 baremetal-agent 可以根据需求选择性部署:\n 管理 kvm 虚拟机: 部署 host 和 sdnagent 服务 管理物理机: 部署 baremetal-agent 服务  "
},
{
	"uri": "/howto/image/",
	"title": "镜像",
	"tags": [],
	"description": "",
	"content": " 镜像(image): 是用于新建云服务器(虚拟机)、裸金属(物理机)使用的模板文件，常用类型为 qcow2, vmdk, raw, vhd, iso。\n 镜像服务(glance): 云平台的镜像服务叫做 glance，用于存储转换用户上传或外部导入的镜像，提供下载功能。\n 公有云镜像(cachedimage): 创建公有云虚拟机时，可以直接使用各个云平台已有的镜像，这些镜像不会存储在 glance，云平台只是保存元信息，创建机器时会直接使用。\n  "
},
{
	"uri": "/contribute/",
	"title": "开发贡献",
	"tags": [],
	"description": "",
	"content": " 安装 Go Golang 版本要求 1.12 以上\n安装go环境参考: Install doc\n编译 onecloud 组件 Fork 仓库 访问 https://github.com/yunionio/onecloud ，将仓库 fork 到自己的 github 用户下。\nClone 源码 git clone 前确保 GOPATH 等环境变量已经设置好，clone 你自己 fork 的仓库\n$ git clone https://github.com/\u0026lt;your_name\u0026gt;/onecloud $GOPATH/src/yunion.io/x/onecloud $ cd $GOPATH/src/yunion.io/x/onecloud $ git remote add upstream https://github.com/yunionio/onecloud 编译 # 编译所有组件 $ make # cmd 目录下面存放着所有的组件: $ ls cmd ... ansibleserver climc glance keystone qcloudcli ucloudcli awscli cloudir host lbagent region webconsole # 可以编译cmd下制定的组件，比如：编译 region 和 host 组件 $ make cmd/region cmd/host # 查看编译好的二进制文件 $ ls _output/bin region host 开发流程  从 master checkout 出 feature 或者 bugfix 分支  # checkout 新分支 $ git fetch upstream --tags $ git checkout -b feature/implement-x upstream/master  在新的分支上进行开发 开发完成后，进行提交PR前的准备操作  $ git fetch upstream # 同步远程 upstream master 代码 $ git rebase upstream/master # 有冲突则解决冲突 $ git push origin feature/implement-x # push 分支到自己的 repo  在GitHub的Web界面完成提交PR的流程   提完 PR 后请求相关开发人员 review，并设置Labels来表明提交的代码属于哪一个模块或者哪几个模块   或者通过添加评论的方式来完成上一步；评论 \u0026ldquo;/cc\u0026rdquo; 并 @ 相关人员完成设置reviewer，评论/area 并填写label完成设置Labels  ​ 所有Label都可以在issues——Labels下查询到，带area/前缀的Label均可以使用评论\u0026rdquo;/area\u0026rdquo;的形式添加\n 如果是 bugfix 或者需要合并到之前 release 分支的 feature PR，需要额外使用脚本将此PR cherry-pick 到对应的 release 分支  # 自行下载安装 github 的 cli 工具：https://github.com/github/hub # OSX 使用: brew install hub # Debian: sudo apt install hub # 二进制安装: https://github.com/github/hub/releases # 设置github的用户名 $ export GITHUB_USER=\u0026lt;your_username\u0026gt; # 使用脚本自动 cherry-pick PR 到 release 分支 # 比如现在有一个提交的PR的编号为8，要把它合并到 release/2.8.0 $ ./scripts/cherry_pick_pull.sh upstream/release/2.8.0 8 # cherry pick 可能会出现冲突，冲突时开另外一个 terminal，解决好冲突，再输入 \u0026#39;y\u0026#39; 进行提交 $ git add xxx # 解决完冲突后 $ git am --continue # 回到执行 cherry-pick 脚本的 terminal 输入 \u0026#39;y\u0026#39; 即可 去 upstream 的 PR 页面, 就能看到自动生成的 cherry-pick PR，上面操作的PR的标题前缀就应该为：Automated cherry pick of #8，然后重复 PR review 流程合并到 release\n部署 TODO\n"
},
{
	"uri": "/setup/controlplane/",
	"title": "控制节点",
	"tags": [],
	"description": "Showcase: Lessons learned from taking letsencrypt.org to Hugo.",
	"content": " 环境准备 OneCloud 相关的组件运行在 kubernetes 之上，环境以及相关的软件依赖如下:\n 操作系统: Centos 7.x 数据库: mariadb docker: ce-18.09.1 kubernetes: v1.14.3  安装配置 mariadb mariadb 作为服务数据持久化的数据库，可以部署在其它节点或者使用单独维护的。下面假设还没有部署 mariadb，在控制节点上安装设置 mariadb.\n$ MYSQL_PASSWD=\u0026#39;your-sql-passwd\u0026#39; # 安装 mariadb $ yum install -y epel-release mariadb-server $ systemctl enable --now mariadb $ mysqladmin -u root password \u0026#34;$MYSQL_PASSWD\u0026#34; $ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # Settings user and group are ignored when systemd is used. # If you need to run mysqld under a different user or group, # customize your systemd unit file for mariadb according to the # instructions in http://fedoraproject.org/wiki/Systemd skip_name_resolve [mysqld_safe] log-error=/var/log/mariadb/mariadb.log pid-file=/var/run/mariadb/mariadb.pid # # include all files from the config directory # !includedir /etc/my.cnf.d EOF $ mysql -uroot -p$MYSQL_PASSWD \\  -e \u0026#34;GRANT ALL ON *.* to \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;$MYSQL_PASSWD\u0026#39; with grant option; FLUSH PRIVILEGES;\u0026#34; 安装配置 docker $ yum install -y yum-utils $ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo $ yum install -y docker-ce-18.09.1 docker-ce-cli-18.09.1 containerd.io $ mkdir /etc/docker $ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/docker/daemon.json { \u0026#34;bridge\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;iptables\u0026#34;: false, \u0026#34;exec-opts\u0026#34;: [ \u0026#34;native.cgroupdriver=cgroupfs\u0026#34; ], \u0026#34;data-root\u0026#34;: \u0026#34;/opt/docker\u0026#34;, \u0026#34;live-restore\u0026#34;: true, \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;100m\u0026#34; }, \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://lje6zxpk.mirror.aliyuncs.com\u0026#34;, \u0026#34;https://lms7sxqp.mirror.aliyuncs.com\u0026#34;, \u0026#34;https://registry.docker-cn.com\u0026#34; ], \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34; } EOF $ systemctl enable --now docker 安装配置 kubelet $ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF $ yum install --assumeyes bridge-utils conntrack-tools jq kubelet-1.14.3-0 kubectl-1.14.3-0 kubeadm-1.14.3-0 $ systemctl enable kubelet # 做一些 sysctl 的配置, kubernetes 要求 $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/bridge.conf net.bridge.bridge-nf-call-iptables=1 net.bridge.bridge-nf-call-ip6tables=1 EOF $ sudo modprobe br_netfilter $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/ip_forward.conf net.ipv4.ip_forward=1 EOF $ sysctl -p 部署控制节点 先安装部署工具 ocadm 和云平台的命令行工具 climc:\n# 安装 climc 云平台命令行工具 $ yum-config-manager --add-repo https://iso.yunion.cn/yumrepo-2.10/yunion.repo $ yum install -y yunion-climc # climc 在 /opt/yunion/bin 目录下，根据自己的需要加到 bash 或者 zsh 配置文件里面 $ echo \u0026#39;export PATH=$PATH:/opt/yunion/bin\u0026#39; \u0026gt;\u0026gt; ~/.bashrc \u0026amp;\u0026amp; source ~/.bashrc # 安装 ocadm $ wget https://github.com/Zexi/ocadm/releases/download/v0.1.0/ocadm -P /opt/yunion/bin $ chmod a+x /opt/yunion/bin/ocadm 接下来会现在当前节点启动 v1.14.3 的 kubernetes 服务，然后将 keystone, region, scheduler 作为控制节点必须的服务启动起来。\n# 假设 mariadb 部署在本地，如果是使用已有的数据库，请改变对应的 ip $ MYSQL_HOST=$(ip route get 1 | awk \u0026#39;{print $NF;exit}\u0026#39;) # 拉取必要的 docker 镜像 $ ocadm config images pull # 开始部署 kubernetes 以及 onecloud 必要的控制服务，稍等 3 分钟左右，kubernetes 和 onecloud 控制服务都会运行起来 $ ocadm init --mysql-host $MYSQL_HOST --mysql-user root --mysql-password $MYSQL_PASSWD ... Your Kubernetes and Onecloud control-plane has initialized successfully! ... 环境检查 当控制节点部署完成后，云平台的管理员认证信息会保存在 /etc/yunion/rc_admin , 这些认证信息在使用 climc 控制云平台资源时会用到。\n$ source /etc/yunion/rc_admin 用 climc 命令行工具查看添加到云平台的网络，这里会创建一个默认 adm0 的网络，start_ip 和 end_ip 都为当前控制节点的默认ip。\n$ climc network-list +--------------------------------------+------+----------------+----------------+---------------+--------------------------------------+-----------+--------------+---------------+-------------+-----------+ | ID | Name | Guest_ip_start | Guest_ip_end | Guest_ip_mask | wire_id | is_public | public_scope | guest_gateway | server_type | Status | +--------------------------------------+------+----------------+----------------+---------------+--------------------------------------+-----------+--------------+---------------+-------------+-----------+ | 375d75ed-2d96-44e9-85c9-854025ebfcf3 | adm0 | 10.168.222.216 | 10.168.222.216 | 24 | a18aa192-1199-4744-8777-300ded3397e7 | false | none | 10.168.222.1 | baremetal | available | +--------------------------------------+------+----------------+----------------+---------------+--------------------------------------+-----------+--------------+---------------+-------------+-----------+ 删除环境 如果安装过程中失败，或者想清理环境，可执行以下命令删除 kubernetes 集群和 onecloud 数据库\n$ ocadm reset -f"
},
{
	"uri": "/setup/components/",
	"title": "其它组件",
	"tags": [],
	"description": "",
	"content": " 当控制节点部署完成后，还有其它容器化的组件可以部署，比如 glance, baremetal 和 webconsole 等，可以根据需要部署到其它节点，或者为了方便把这些组件都部署在控制节点。\n组件部署在控制节点 可以把所有组件都部署在已有的控制节点，命令如下:\n$ ocadm component install all 组件部署到其它节点 如果需要把组件部署到其它节点，需要先在待部署的节点启动 kubelet，把改节点加入到已有的 kubernetes 集群，然后启动对应的容器化组件。\n环境准备 参考\u0026rdquo;部署控制节点\u0026rdquo;的流程，部署好 docker 和 kubelet，然后在控制节点使用 ocadm 拿到加入集群的 token，在待部署节点使用 ocadm 加入集群，操作如下:\n 在控制节点获取加入节点的 token  $ ocadm token list | grep bootstrap 4s4meb.xvgk2bwpmbospn3s 23h 2019-07-10T15:41:10+08:00 authentication,signing The default bootstrap token generated by \u0026#39;ocadm init\u0026#39;. system:bootstrappers:kubeadm:default-node-token  在待部署节点使用 token 加入 kubernetes 集群  # 这里的 10.168.222.216 是控制节点的 ip，请根据你的环境修改 $ ocadm join 10.168.222.216:6443 --token 4s4meb.xvgk2bwpmbospn3s --discovery-token-unsafe-skip-ca-verification ... This node has joined the cluster: * Certificate signing request was sent to apiserver and a response was received. * The Kubelet was informed of the new secure connection details. Run \u0026#39;kubectl get nodes\u0026#39; on the control-plane to see this node join the cluster.  部署对应的组件  # 安装 glance $ ocadm component install glance # 安装 baremetal $ ocadm component install baremetal # 或者全部安装 $ ocadm component install all"
},
{
	"uri": "/howto/image/query/",
	"title": "查询镜像",
	"tags": [],
	"description": "",
	"content": " 列表 # 查询所有镜像列表 $ climc image-list # 查询包含 ubuntu 关键字的镜像 $ climc image-list --search ubuntu # image-list 支持的查询条件 $ climc help image-list 详情 根据 image-list 可以获取镜像的列表，第1、2列包含镜像的 id 和 name，通过 id 或 name 可以获取镜像的详情。\n# 查询名称包含 ubuntu 的镜像 $ climc image-list --search ubuntu +--------------------------------------+--------------------------------------+-------------+------------+-----------+----------+---------+--------+----------------------------------+ | ID | Name | Disk_format | Size | Is_public | Min_disk | Min_ram | Status | Checksum | +--------------------------------------+--------------------------------------+-------------+------------+-----------+----------+---------+--------+----------------------------------+ | bd0a4029-7646-4d21-89b7-856d90334cc7 | ubuntu-xenial-server.qcow2 | qcow2 | 297009152 | true | 2252 | 0 | active | 3ab09243ba73ae87fb48c08ddb42ef42 | | b3440f33-23ca-4d56-85ee-dc2b368b6337 | ubuntu-18.04.2-server-20190430.qcow2 | qcow2 | 1003356160 | true | 30720 | 0 | active | 9c414111827a07a446e25811a3674a43 | | a0ef7a1e-eb92-406f-8042-b7018a410b2c | ubuntu-16.04.5-server-20181117.qcow2 | qcow2 | 792002560 | true | 30720 | 0 | active | a69f06c9063089368fdc729149fc545e | +--------------------------------------+--------------------------------------+-------------+------------+-----------+----------+---------+--------+----------------------------------+ *** Total: 3 Pages: 1 Limit: 20 Offset: 0 Page: 1 *** # 查看 ubuntu-xenial-server.qcow2 的详情 $ climc image-show ubuntu-xenial-server.qcow2 +-----------------+------------------------------------------------------------------------------------------------------------------+ | Field | Value | +-----------------+------------------------------------------------------------------------------------------------------------------+ | can_delete | false | | can_update | true | | checksum | 3ab09243ba73ae87fb48c08ddb42ef42 | | created_at | 2019-07-19T03:33:11.000000Z | | disk_format | qcow2 | | domain_id | default | | fast_hash | bdcce6185fcefcd0e009499226f0bee9 | | id | bd0a4029-7646-4d21-89b7-856d90334cc7 | | is_emulated | false | | is_public | true | | is_system | false | | min_disk | 2252 | | min_ram | 0 | | name | ubuntu-xenial-server.qcow2 | | oss_checksum | 3ab09243ba73ae87fb48c08ddb42ef42 | | owner | a7f2e2a81a1e4850a41eae5f140ceb14 | | pending_deleted | false | | project_src | local | | properties | {\u0026#34;installed_cloud_init\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;os_arch\u0026#34;:\u0026#34;x86\u0026#34;,\u0026#34;os_distribution\u0026#34;:\u0026#34;Ubuntu\u0026#34;,\u0026#34;os_type\u0026#34;:\u0026#34;Linux\u0026#34;,\u0026#34;os_version\u0026#34;:\u0026#34;16.0\u0026#34;} | | protected | false | | public_scope | system | | size | 297009152 | | status | active | | tenant_id | a7f2e2a81a1e4850a41eae5f140ceb14 | | update_version | 6 | | updated_at | 2019-07-19T03:34:47.000000Z | +-----------------+-------------------------------------------------------------------------------------------------"
},
{
	"uri": "/howto/image/create/",
	"title": "制作镜像",
	"tags": [],
	"description": "",
	"content": "你可能需要自己定制发行版的镜像，用于给不同的业务使用。本文介绍如何制作镜像。\n"
},
{
	"uri": "/howto/server/",
	"title": "主机",
	"tags": [],
	"description": "",
	"content": "主机(server)指云平台管理的虚拟机和裸金属服务器.\n 虚拟机: 又叫做云服务器，包括我们提供的 kvm 虚拟机、vmware、openstack 和各个公有云的虚拟机。\n 裸金属: 云平台提供物理机(baremetal)装机功能，安装完操作系统并被云平台管理的服务器称为裸金属服务器。\n  "
},
{
	"uri": "/howto/",
	"title": "操作管理",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/setup/host/",
	"title": "计算节点",
	"tags": [],
	"description": "",
	"content": " 如果需要构建内部私有云，就需要部署计算节点(宿主机)。计算节点主要负责虚拟机、网络和存储的管理，需要安装的组件如下:\n   组件 用途 安装方式 运行方式     host 管理 kvm 虚拟机和存储 rpm systemd   sdnagent 管理虚拟机网络和安全组 rpm systemd   openvswitch 虚拟机网络端口和流表配置 rpm systemd   qemu 运行虚拟机 rpm process   kernel onecloud 提供的内核 rpm -    环境  操作系统: Centos 7.x 硬件要求:  Virtualization: CPU 要支持虚拟化，用于虚拟机 KVM 加速 打开 iommu，VT-d: 用于 GPU 透传  网络:\n 当前可用的网段: 虚拟机可以直接使用和计算节点所在的扁平网段，需要预先划分保留对应端给云平台虚拟机使用，防止被其它设备占用，最后 IP 冲突  备注:\n 如果是以测试为目的，可以拿一台虚拟机部署计算节点的服务，但可能无法使用 KVM 加速和 GPU 透传   安装依赖 计算节点所有的服务都以 rpm 的方式安装，因为虚拟机会用到内核 vfio 和 nbd 等特性，所以没有容器化部署。\n# 添加 yum 源 $ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/yum.repos.d/yunion.repo [yunion] name=Packages for Yunion Multi-Cloud Platform baseurl=https://iso.yunion.cn/yumrepo-2.10 sslverify=0 failovermethod=priority enabled=1 gpgcheck=0 EOF # 禁用防火墙和selinux $ systemctl disable firewalld $ sed -i \u0026#39;s/SELINUX=enforcing/SELINUX=disabled/g\u0026#39; /etc/selinux/config 安装 rpm 包\n$ yum install -y \\  epel-release chntpw dosfstools ethtool fetchclient fuse fuse-devel fuse-libs gdisk \\  libaio jq libusb lvm2 lxcfs lz4 nc ntfs-3g_ntfsprogs zerofree \\  oniguruma parted pciutils spice spice-protocol sshpass sysstat \\  tcpdump telegraf usbredir vmware-vddk xfsprogs \\  yunion-qemu-2.12.1 yunion-host yunion-host-image yunion-sdnagent \\  kernel-3.10.0-862.14.4.el7.yn20190116 \\  kernel-devel-3.10.0-862.14.4.el7.yn20190116 \\  kernel-headers-3.10.0-862.14.4.el7.yn20190116 \\  kmod-openvswitch-2.9.3-1.el7 \\  openvswitch-2.9.3-1 # 安装完成后需要重启进入我们的内核 $ reboot # 重启完成后，查看当前节点内核信息，确保为 yn 内核 $ uname -r 3.10.0-862.14.4.el7.yn20190116.x86_64 控制节点操作 创建 host 服务的认证用户 $ source /etc/yunion/rc_admin $ cat /etc/yunion/rc_admin # 这个是云平台 keystone 的认证地址，后面配置会用到 export OS_AUTH_URL=https://10.168.222.216:5000/v3 ... # 这个 region0 也会在配置中用到 export OS_REGION_NAME=region0 # 这里记住自己的用户密码，后面配置会用到 $ climc user-create --enabled --password hostadminpasswd hostadmin $ climc project-add-user system hostadmin admin 创建计算节点所在的网段 我的环境控制节点的 ip 为 10.168.222.218，就创建一个对应的 host 网段。需要根据自己的环境创建对应的网段。\n# 查看当前环境的 zone $ climc zone-list +--------------------------------------+-------+--------+----------------+ | ID | Name | Status | Cloudregion_ID | +--------------------------------------+-------+--------+----------------+ | f73a2120-1206-45fa-8d43-de374ab0f494 | zone0 | enable | default | +--------------------------------------+-------+--------+----------------+ # 在 zone0 里面创建一个 wire bcast0，该资源抽象计算节点所在的二层广播域信息 $ climc wire-create zone0 bcast0 1000 # 在 wire bcast0 之上创建一个计算节点的网络，计算节点的 host 服务注册会用到，如果 host 注册时没有在云平台找到对应的网络，将会注册失败 $ climc network-create --gateway 10.168.222.1 --server-type baremetal bcast0 inf0 10.168.222.218 10.168.222.218 24 配置 host 服务 $ mkdir -p /etc/yunion $ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/yunion/host.conf region = \u0026#39;region0\u0026#39; # 记得把这些认证信息参考控制节点的 rc_amdin 配置对应过来 address = \u0026#39;10.168.222.218\u0026#39; port = 8885 auth_uri = \u0026#39;https://10.168.222.216:5000/v3\u0026#39; admin_user = \u0026#39;hostadmin\u0026#39; admin_password = \u0026#39;hostadminpasswd\u0026#39; admin_tenant_name = \u0026#39;system\u0026#39; networks = [\u0026#39;eth0/br0/10.168.222.218\u0026#39;] hostname = \u0026#39;$(hostname -s)\u0026#39; bridge_driver = \u0026#39;openvswitch\u0026#39; servers_path = \u0026#39;/opt/cloud/workspace/servers\u0026#39; snapshot_path = \u0026#39;/opt/cloud/workspace/disks/snapshots\u0026#39; local_image_path = [\u0026#39;/opt/cloud/workspace/disks\u0026#39;] image_cache_path = \u0026#39;/opt/cloud/workspace/disks/image_cache\u0026#39; agent_temp_path = \u0026#39;/opt/cloud/workspace/disks/agent_tmp\u0026#39; rack = \u0026#39;rack0\u0026#39; slots = \u0026#39;slot0\u0026#39; linux_default_root_user = True allow_inter_tenant_broadcast = True allow_inter_tenant_multicast = True allow_inter_tenant_unicast = True block_io_scheduler = \u0026#39;cfq\u0026#39; enable_template_backing = True default_qemu_version = \u0026#39;2.12.1\u0026#39; EOF 启动 host 配置完成后就可以使用 systemctl 启动 host 服务了，命令如下:\n# 启动 $ systemctl enable yunion-host --now # 观察启动日志 $ journalctl -u yunion-host -f ... Jul 09 18:23:34 lzx-ocadm-test2 host[4216]: [I 190709 18:23:34 metadata.StartService(metadatahandler.go:268)] Host Metadata Start listen on http://10.168.222.218:9885 # 出现上述信息表示 host 已经成功注册到了控制节点 控制节点启动 host 回到控制节点，启用刚才上报的计算节点\n# 使用 climc 查看注册的 host 列表 $ climc host-list +--------------------------------------+-----------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-----------------+--------------+ | ID | Name | Access_mac | Access_ip | Manager_URI | Status | enabled | host_status | mem_size | cpu_count | node_count | sn | storage_type | host_type | version | storage_size | +--------------------------------------+-----------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-----------------+--------------+ | cc053d7c-1456-4c72-8198-adc1f487df9d | lzx-ocadm-test2 | 00:22:1b:c4:a4:81 | 10.168.222.218 | http://10.168.222.218:8885 | running | false | online | 4096 | 4 | 4 | Not Specified | rotate | hypervisor | HEAD(5c8f4b19a) | 29982 | +--------------------------------------+-----------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-----------------+--------------+ *** Total: 1 Pages: 1 Limit: 20 Offset: 0 Page: 1 *** # 启动 host $ climc host-enable lzx-ocadm-test2 创建虚拟机测试 上传 cirrors 测试镜像 # 下载 cirros 测试镜像 $ wget https://iso.yunion.cn/yumrepo-2.10/images/cirros-0.4.0-x86_64-disk.qcow2 # 将镜像上传到 glance $ climc image-upload --format qcow2 --os-type Linux --min-disk 10240 cirros-0.4.0-x86_64-disk.qcow2 ./cirros-0.4.0-x86_64-disk.qcow2 # 查看上传的镜像 $ climc image-list +--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+ | ID | Name | Disk_format | Size | Is_public | Min_disk | Min_ram | Status | Checksum | +--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+ | 63f6f2af-4db2-4e30-85f5-0ad3baa27bd9 | cirros-0.4.0-x86_64-disk.qcow2 | qcow2 | 22806528 | false | 30720 | 0 | active | 76dc07d1a730a92d0db7fb2d3c305ecd | +--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+ # 如果使用虚拟机作为计算节点，存储可能不大，可以把镜像的默认大小30g调整到10g $ climc image-update --min-disk 10240 cirros-0.4.0-x86_64-disk.qcow2 创建测试网络 下面是随机创建了一个主机间不可达的网络用于测试，如果有划分好的扁平二层可用网络，可以直接拿来给虚拟机使用。\n$ climc network-create --gateway 10.20.30.1 --server-type guest bcast0 vnet0 10.20.30.2 10.20.30.254 24 $ climc network-public vnet0 创建虚拟机 # 创建虚拟机 testvm01，512M内存, 1个CPU, 系统盘 10g, 第二块磁盘 5g 格式化为 ext4 并挂载到 /opt 的虚拟机 $ climc server-create --disk cirros-0.4.0-x86_64-disk.qcow2:10g --disk 5g:ext4:/opt --net vnet0 --auto-start --allow-delete --ncpu 1 testvm01 512M # 查看创建的虚拟机，1分钟后应该会变为 running 状态 $ climc server-list --details +--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-----------------+--------+-----------+ | ID | Name | Billing_type | IPs | Disk | Status | vcpu_count | vmem_size | Secgroup | Created_at | Hypervisor | os_type | Host | Tenant | is_system | +--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-----------------+--------+-----------+ | f10c0083-9ee8-4353-86e2-67b9ac16f732 | testvm01 | postpaid | 10.20.30.253 | 30720 | running | 1 | 512 | Default | 2019-07-09T13:12:16.000000Z | kvm | Linux | lzx-ocadm-test2 | system | false | +--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-----------------+--------+-----------+ # 获取虚拟机登录信息 $ climc server-logininfo testvm01 +----------+-----------------------------+ | Field | Value | +----------+-----------------------------+ | password | Bs5Zn6%Ry?9h | | updated | 2019-07-09T13:12:22.785767Z | | username | root | +----------+-----------------------------+ # 在计算节点联通测试网络(如果你是直接用的二层网络，应该能直接 ping 通虚拟机的 ip 了，不需要做这一步) $ ip address add 10.20.30.1/24 dev br0 $ ping 10.20.30.253 PING 10.20.30.253 (10.20.30.253) 56(84) bytes of data. 64 bytes from 10.20.30.253: icmp_seq=1 ttl=64 time=0.984 ms # 用之前 server-logininfo 命令获取的用户名密码，直接登录到虚拟机里面 $ ssh root@10.20.30.253 # 如果网络不通，也可以通过 vnc 的方式打开虚拟机的 tty 登录界面，操作如下 # 打开 vnc 链接，用浏览器打开下面的链接 # 打开 vnc 链接时会出现不安全认证，导致 websocket 无法握手，需要在浏览器信任 webconsole server 对应的 endpoint $ climc endpoint-list --details | grep webconsole | 67dcd7e163524526867d2a67c2162389 | region0 | 0c79be9a91f840c38d02930e9aa24dce | webconsole | webconsole | https://10.168.222.216:8899 | internal | true | # 然后用浏览器访问下 https://10.168.222.216:8899 , 信任该链接即可 # 在通过 webconsole-server 命令获取 vnc web 界面的链接地址 $ climc webconsole-server testvm01 https://console.yunion.cn/web-console?access_token=FI-VXQSAonhzfSnxVTKCCbwHinp7swlRkmi-4p6s-4OfZpg6TG9YhWuwbHEUA1D7XoKu_w%3D%3D\u0026amp;api_server=https%3A%2F%2F10.168.222.216%3A8899\u0026amp;password=65xB2kaE\u0026amp;protocol=vnc"
},
{
	"uri": "/howto/image/import/",
	"title": "导入镜像",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/howto/image/download/",
	"title": "下载镜像",
	"tags": [],
	"description": "",
	"content": "如果需要将云平台的镜像导出到本地，就需要用 climc image-download 把 glance 存的镜像下载下来。\n"
},
{
	"uri": "/howto/host/",
	"title": "宿主机",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "OneCloud 文档",
	"tags": [],
	"description": "",
	"content": " OneCloud 文档 文档分为以下部分：\n OneCloud 简介: 简单介绍 onecloud 产品特性和功能\n 安装部署: 安装和部署 onecloud 各个服务与组件\n 开发贡献: 搭建开发环境，提交 PR\n 操作管理: 介绍如何操作云平台资源和管理服务\n  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]