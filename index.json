[
{
	"uri": "/howto/baremetal/intro/",
	"title": "介绍",
	"tags": [],
	"description": "",
	"content": " 功能介绍 云平台支持 Baremetal(物理机) 管理，提供的功能如下:\n 自动化上架: 物理机上架加电启动后，自动注册到云管平台，自动分配BMC IP地址，初始化IPMI账号密码，自动上报物理机硬件配置（CPU、内存、序列号、网卡、磁盘等）\n 自动化装机: 根据配置要求自动配置 RAID，自动分区格式化磁盘，自动部署操作系统镜像，自动初始化操作系统账号密码，自动分配IP地址，可以植入配置文件\n 生命周期管理: 支持物理机自动化开机，关机，重装系统，远程带外管理，卸载操作系统等操作\n 与虚拟机共享镜像: 使用虚拟机镜像部署物理机，便于虚拟机和物理机统一操作系统运行环境\n API 支持: 以上操作均支持API操作，便于与其他系统的自动化流程集成\n 服务器型号支持: 支持Dell、HP、华为、浪潮、联想、超微等主流x86服务器厂商和机型\n RAID 控制器支持: LSI MegaRaid, HP Smart Array, LSI MPT2SAS, LSI MPT3SAS, Mrarvell RAID等\n 转换为宿主机: 直接将物理机转换为运行虚拟机的宿主机\n 托管已有服务器： 托管已有并装好系统的物理机\n  服务架构 物理机管理服务架构如下:\n Baremetal \u0026lt;-\u0026gt; DHCP Relay： 处理 PXE 网络启动 DHCP Relay \u0026lt;-\u0026gt; Baremetal Agent:  转发 PXE Boot 请求，获取网络启动相关的信息 通过 DHCP 和 TFTP 服务下发 PXE 配置  云平台定制的网络启动小系统(yunionos) kernel 和 initramfs: 运行 SSH 服务，制作 RAID，收集硬件信息等   Baremetal Agent \u0026lt;-\u0026gt; Region Server:  通过 Region Server 注册物理机记录 获取网络 IP 地址  Baremetal Agent \u0026lt;-\u0026gt; Baremetal:  Baremetal 通知 Agent SSH 相关的登录信息 Agent 通过 SSH 配置 Baremetal 的 IPMI Agent 通过 IPMI 控制 Baremetal 开关机等操作 Agent 通过 SSH 执行做 RAID，装机，销毁等操作  Glance Server -\u0026gt; Baremetal: Baremetal 从 Glance server 下载装机镜像\n 在交换机上开启 DHCP Relay 功能(或者使用 DHCP Relay软件)，relay 指向 Baremetal Agent\n 物理机上架通电后，设置 PXE 网络启动，DHCP Relay 会将 PXE Boot 请求转发到 Baremetal Agent，Baremetal Agent 收到 PXE Boot 请求，向 Region Server 注册物理机记录   技术细节 注册物理机 注册物理机有自动注册和手动注册两种方式，如果 Baremetal Agent 开启了自动注册功能，就会自动在云平台创建 baremetal 记录；如果为手动注册方式，就需要先调用物理机创建接口把对应的 PXE 网卡对应的 MAC 地址注册到平台。\n注册的流程如下:\n 物理机 PXE 启动时会发送 DHCP PXE boot 的请求，通过 DHCP Relay 请求会到 Baremetal Agent; Baremetal Agent 从 DHCP 请求中取出网卡 MAC 地址，拿 MAC 地址向 Region Server 过滤物理机记录; Region Server 告诉 Baremetal Agent 改 MAC 地址没有物理机，Baremetal Agent 就会新建记录，并从 Region Server 获取分配对应网段的 IP 地址, 通过内置 DHCP 服务回包给物理机; 物理机 PXE DHCP 请求获得分配的 IP 地址后，会通过 TFTP 从 Baremetal Agent 下载启动引导文件(kernel 和 initramfs)，然后使用 ramdisk 机制进入我们定制的 initramfs 小系统; initramfs 小系统启动后，会启动 sshd 服务，然后修改 root 用户密码，将这些登录信息通知回 Baremetal Agent; Baremetal Agent 收到通知后，记录 ssh 登录的信息，开始进行准备工作; 准备工作包括配置 IPMI，收集硬件信息等，当这些操作完成后，将所有信息上报给 Region Server 完成注册  yunionos 网络启动小系统 yunionos(https://github.com/yunionio/yunionos) 是我们使用 Buildroot 工具定制的用于 PXE 启动和管理物理机的小型 Linux 系统，作用如下:\n 运行 sshd 服务，提供 Baremetal Agent 远程执行命令 包含 LSI MegaRaid, HP Smart Array, LSI MPT2SAS, LSI MPT3SAS, Mrarvell RAID等驱动和工具，用于制作 RAID 包含 ipmitool 和相关 driver，用于配置和调用 IPMI BMC 管理物理机 包含 qemu-img, sgdisk, parted 等磁盘分区工具，用于创建操作系统  SSH 管理 当物理机通过 PXE 进入 yunionos 小系统后会启动 sshd 服务，并将 ssh login 信息通知给 Baremetal Agent，Baremetal Agent 会更新 ssh 相关的登录信息\nRAID 配置 RAID 配置由 Baremetal Agent 根据用户的配置，生成 raid 配置命令，通过 ssh 远程控制 yunionos 在物理机上制作 RAID\n安装操作系统 RAID 做完后，Baremetal Agent 会通过 ssh 远程控制 yunionos 安装操作系统和分区，流程如下:\n 调用 /lib/mos/rootcreate.sh 将系统创建到磁盘:\n 通过 wget 从 Glance Server 下载用户指定的 image 镜像 通过 qemu-img convert 命名将 image 写入到磁盘  创建好系统后，会根据用户的配置将系统盘 resize 分区\n 创建其它分区并格式化\n Baremetal Agent 进行一些网络，磁盘配置的设置：比如 bonding，ip 设置, /etc/fstab, 改变 hostname 等\n  开关机 注册好的的物理机会配置好 IPMI, IPMI 相关的信息会记录在数据库，Baremetal Agent 通过 ipmitool 控制开关机\n重装操作系统 类似于安装操作系统，流程上会让安装了操作系统的物理机重新进入 yunionos 小系统，然后重新安装操作系统\n远程访问 Baremetal Agent 通过 ipmitool sol 接口提供串口控制界面\n删除操作系统 对正在运行操作系统的物理机重启进入 PXE 网络启动，进入 yunionos 小系统，调用 /lib/mos/partdestory.sh 销毁磁盘分区和相应的 raid 命令销毁 raid 配置\n"
},
{
	"uri": "/howto/host/kvm/",
	"title": "KVM 宿主机",
	"tags": [],
	"description": "",
	"content": " OneCloud 原生提供基于 kvm 的私有云虚拟机管理功能，运行 kvm 虚拟机的机器叫做宿主机，这种宿主机也叫作 \u0026ldquo;计算节点\u0026rdquo;，上面会运行管理虚拟机、网络和存储的一系列服务，如何部署并上线宿主机请参考: 安装部署/计算节点。\n宿主机操作 查询 通过 host-list 查询宿主机列表，host-show 查询宿主机详情。\n# 查询 kvm 这种类型的宿主机 $ climc host-list --hypervisor kvm # 查询被禁用的 kvm 宿主机 $ climc host-list --hypervisor kvm --disabled # 查询启用的 kvm 宿主机 $ climc host-list --hypervisor kvm --enabled 启用 kvm 宿主机上线后，默认是禁用的状态，需要启用才能创建虚拟机。\n# 找到禁用的宿主机 $ climc host-list --disabled # 启用 $ climc host-enable \u0026lt;host_id\u0026gt; 禁用 如果完全不想让宿主机创建虚拟机，可以禁用它。\n$ climc host-disable \u0026lt;host_id\u0026gt;"
},
{
	"uri": "/howto/image/upload/",
	"title": "上传镜像",
	"tags": [],
	"description": "",
	"content": " 获取镜像 上传镜像之前需要先获取镜像，途径有多种，比如从发行版官网下载用于云平台的镜像，或者自己制作。\n发行版镜像 根据自己对发行版的需要下载发行版镜像，常用的 Linux 发行版会提供云平台虚拟机使用的镜像，地址如下:\n centos: http://cloud.centos.org/centos/7/images/ ubuntu: https://cloud-images.ubuntu.com/  制作镜像 参考: 制作镜像\n上传 下载或者制作完镜像后，使用 climc image-upload 上传到云平台的 glance 服务，下面以下载 ubuntu 提供的 xenial-server-cloudimg 举例:\n# 下载 ubuntu xenial-server-cloudimg-amd64-disk1.img $ wget https://cloud-images.ubuntu.com/xenial/20190716/xenial-server-cloudimg-amd64-disk1.img # 上传镜像到云平台并名为 ubuntu-xenial-server.qcow2 $ climc image-upload --format qcow2 --os-type Linux --os-arch x86_64 --public ubuntu-xenial-server.qcow2 ./xenial-server-cloudimg-amd64-disk1.img 上传时间长短取决于网络环境和镜像大小，上传完成后需要查询镜像的状态，当状态变为 \u0026lsquo;active\u0026rsquo; 时，就可以拿来使用了。( 更多的关于镜像的查询参考: 镜像查询 )\n$ climc image-show ubuntu-xenial-server.qcow2 | grep status | status | active | 上传参数 使用 climc help image-upload 获取各个参数解释。\n"
},
{
	"uri": "/howto/climc/",
	"title": "命令行工具",
	"tags": [],
	"description": "",
	"content": " 云平台的命令行管理工具叫 climc, 可以通过该工具向后端各个服务发送请求, 操作各种资源。\n安装 可以通过 yum 或者源码编译的方式安装。\nRPM 安装 添加 yunion 的 yum 源，如果已经添加可以忽略这一步。\n$ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/yum.repos.d/yunion.repo [yunion] name=Packages for Yunion Multi-Cloud Platform baseurl=https://iso.yunion.cn/yumrepo-2.10 sslverify=0 failovermethod=priority enabled=1 gpgcheck=0 EOF 安装 climc\n$ sudo yum install -y yunion-climc $ ls -alh /opt/yunion/bin/climc -rwxr-xr-x 1 root root 24M Jul 18 19:04 /opt/yunion/bin/climc 源码编译安装 首先需要搭建 go 的开发环境，然后 clone 代码，参考: 开发贡献\n# 编译 climc $ cd $GOPATH/src/yunion.io/x/onecloud $ make cmd/climc # 等待编译完成后，climc 在 _output/bin 目录下 $ ls -alh _output/bin/climc -rwxr-xr-x 1 lzx lzx 25M Jul 15 17:10 _output/bin/climc 可以根据自己的需要，将编译好的 climc 放到对应的目录，或者直接写 alias 对应到 $GOPATH/src/yunion.io/x/onecloud/_output/bin/climc 。\n使用 安装好 climc 后，可以将对应的可执行目录加入到 PATH 环境变量，下面假设 climc 所在的目录是 /opt/yunion/bin 。\n# 根据自己的需要加到 bash 或者 zsh 配置文件里面 $ echo \u0026#39;export PATH=$PATH:/opt/yunion/bin\u0026#39; \u0026gt;\u0026gt; ~/.bashrc \u0026amp;\u0026amp; source ~/.bashrc $ climc --help 认证配置 climc 请求云平台后端服务的流程如下:\n 通过配置信息，使用用户名密码从 keystone 获取 token token 中包含了后端服务的 endpoint 地址 climc 将对应资源的 CURD 请求发往所属的后端服务  所以在操作资源前，我们需要通过环境变量告诉 climc 想要操作的云平台。\n# 将认证信息保存到文件中，方便 source 使用 $ cat \u0026lt;\u0026lt;EOF \u0026gt; ~/test_rc_admin # 用户名 export OS_USERNAME=sysadmin # 用户密码 export OS_PASSWORD=*** # 用户所属项目 export OS_PROJECT_NAME=system # keystone 认证地址 export OS_AUTH_URL=https://192.168.0.246:5000/v3 # 对应的 region export OS_REGION_NAME=Beijing EOF # source 认证环境变量 $ source ~/test_rc_admin # 查看虚拟机列表 $ climc server-list 注意: 如果执行 climc 时出现 Error: Missing OS_AUTH_URL 的错误提示时，请 source 或设置认证云平台的环境变量。\n可以通过查看 climc 的版本号来获取构建的信息。\n$ climc --version Yunion API client version: { \u0026#34;major\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;minor\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;gitVersion\u0026#34;: \u0026#34;v2.10.20190527.0-652-g80287c2e365949\u0026#34;, \u0026#34;gitBranch\u0026#34;: \u0026#34;feature/service-pprof\u0026#34;, \u0026#34;gitCommit\u0026#34;: \u0026#34;80287c2e3\u0026#34;, \u0026#34;gitTreeState\u0026#34;: \u0026#34;clean\u0026#34;, \u0026#34;buildDate\u0026#34;: \u0026#34;2019-07-15T09:10:07Z\u0026#34;, \u0026#34;goVersion\u0026#34;: \u0026#34;go1.12.7\u0026#34;, \u0026#34;compiler\u0026#34;: \u0026#34;gc\u0026#34;, \u0026#34;platform\u0026#34;: \u0026#34;linux/amd64\u0026#34; } 运行模式 climc 有命令行运行和交互两种运行模式。\n 命令行运行: 执行完对应的资源操作命令就退出，这种模式你知道自己在做什么，并且可以作为 bash function/script 的一部分。  # 删除 server1, server2, server3 for id in server1 server2 server3; do climc server-update --delete enable $id climc server-delete $id done  交互模式: 在 shell 输入 climc，就会进入交互模式，这种模式下有自动补全和参数提示。   子命令语法 云平台有很多资源，对应 climc 的子命令, 比如 climc server-list 中的 server-list 就是子命令，可以查询虚拟机的列表。通用格式如下:\n\u0026lt;Resource\u0026gt;-\u0026lt;Action\u0026gt;: Resource 表示资源, Action 表示行为 语法举例:\n server-delete: 删除虚拟机  server 是资源, delete 是行为  host-list: 查询宿主机列表  host 是资源, list 是行为   CRUD 举例:\n C: server-create, disk-create 创建资源 R: server-show, disk-list 查询资源 U: server-update, host-update 更新资源 D: server-delete, image-delete 删除资源  行为举例:\n- 中的 Action 会对应资源的操作，不同的资源会根据可进行的操作进行命名。\n server-migrate: migrate 表示迁移虚拟机 server-change-config: change-config 表示调整虚拟机配置 host-ipmi: ipmi 表示查询宿主机的 IPMI 信息  想要知道资源有哪些操作，可以进入交互模式补全查询。\n使用帮助 help climc 的子命令有很多参数，参数分为必填参数和可选参数，使用 climc help \u0026lt;subcommand\u0026gt; 这种格式，help 子命令会获取  提供的参数和各个参数的解释。\n比如我要查看 image-upload 命令的参数和解释:\n$ climc help image-upload ... Upload a local image Positional arguments: \u0026lt;NAME\u0026gt; Image Name \u0026lt;FILE\u0026gt; The local image filename to Upload Optional arguments: [--private] Make image private [--format {raw,qcow2,iso,vmdk,docker,vhd}] Image format [--protected] ... 高级过滤 filter TODO\nDebug 模式 如果想要知道 climc 操作资源时究竟和服务端发生了哪些请求，可以在子命令前面使用 \u0026ndash;debug 参数，使用方式如下:\nclimc --debug \u0026lt;Resource\u0026gt;-\u0026lt;Action\u0026gt; 加上 \u0026ndash;debug 参数后，终端会有彩色的输出提示，比如 climc --debug server-list 输出如下:\n其中 CURL 部分是可以直接粘贴出来在命令行执行的。\n颜色约定  Request 使用黄色 CURL 使用蓝绿色 根据状态码显示不同颜色，可参考代码: https://github.com/yunionio/onecloud/blob/master/pkg/util/httputils/httputils.go#L234  "
},
{
	"uri": "/overview/",
	"title": "OneCloud 简介",
	"tags": [],
	"description": "",
	"content": "OneCloud具备以下特性：\n 统一全面\n 物理机/虚拟机/容器全面纳管 统一API／模板／控制台/监控  可扩展性架构\n 基于Region和Zone的分层架构，能够在区域、可用区、集群等层次平行扩容 控制节点各功能组件分离，易于部署 平台支持KVM、VMware、OpenStack、Kubernetes、各种公有云等不同的资源类型统一管理   "
},
{
	"uri": "/setup/",
	"title": "安装部署",
	"tags": [],
	"description": "",
	"content": " 安装部署 介绍如何部署 onecloud 后端服务组件\n"
},
{
	"uri": "/setup/intro/",
	"title": "组件概览",
	"tags": [],
	"description": "",
	"content": "OneCloud 目前仅支持在 Centos 7 上运行，待部署组件/服务如下:\n   服务组件 用途 安装方式 运行方式     mariadb 关系型数据库 rpm systemd   docker 容器运行时 rpm systemd   kubelet 管理 kubernetes pod rpm systemd   keystone 认证服务 kubernetes pod container   region api 控制器 kubernetes pod container   scheduler 调度服务 kubernetes pod container   glance 镜像存储 kubernetes pod container   host 管理虚拟机 rpm systemd   sdnagent 管理虚拟机网络 rpm systemd   baremetal 管理物理机 kubernetes pod container   climc 命令行工具 rpm shell   ocadm 部署服务管理工具 rpm shell    其中 host 和 baremetal-agent 可以根据需求选择性部署:\n 管理 kvm 虚拟机: 部署 host 和 sdnagent 服务 管理物理机: 部署 baremetal-agent 服务  "
},
{
	"uri": "/howto/image/",
	"title": "镜像",
	"tags": [],
	"description": "",
	"content": " 镜像(image): 是用于新建云服务器(虚拟机)、裸金属(物理机)使用的模板文件，常用类型为 qcow2, vmdk, raw, vhd, iso。\n 镜像服务(glance): 云平台的镜像服务叫做 glance，用于存储转换用户上传或外部导入的镜像，提供下载功能。\n 缓存镜像(cached-image): 创建公/私有云虚拟机时，可以直接使用各个云平台已有的镜像，这些镜像不会存储在 glance，云平台只是保存元信息，创建机器时会直接使用。\n  image 和 cached-image 两种资源的区别如下：\n image: glance 管理的镜像，由用户上传或者外部导入; cached-image:  包括公有云和其他私有云的镜像，不由 glance 管理，一般在创建 OneCloud 之外的公/私有云主机的时候用到; 不提供创建接口，只能查询，刷新和删除;   "
},
{
	"uri": "/contribute/",
	"title": "开发贡献",
	"tags": [],
	"description": "",
	"content": " 安装 Go Golang 版本要求 1.12 以上\n安装go环境参考: Install doc\n编译 onecloud 组件 Fork 仓库 访问 https://github.com/yunionio/onecloud ，将仓库 fork 到自己的 github 用户下。\nClone 源码 git clone 前确保 GOPATH 等环境变量已经设置好，clone 你自己 fork 的仓库\n$ git clone https://github.com/\u0026lt;your_name\u0026gt;/onecloud $GOPATH/src/yunion.io/x/onecloud $ cd $GOPATH/src/yunion.io/x/onecloud $ git remote add upstream https://github.com/yunionio/onecloud 编译 # 编译所有组件 $ make # cmd 目录下面存放着所有的组件: $ ls cmd ... ansibleserver climc glance keystone qcloudcli ucloudcli awscli cloudir host lbagent region webconsole # 可以编译cmd下制定的组件，比如：编译 region 和 host 组件 $ make cmd/region cmd/host # 查看编译好的二进制文件 $ ls _output/bin region host 开发流程  从 master checkout 出 feature 或者 bugfix 分支  # checkout 新分支 $ git fetch upstream --tags $ git checkout -b feature/implement-x upstream/master  在新的分支上进行开发 开发完成后，进行提交PR前的准备操作  $ git fetch upstream # 同步远程 upstream master 代码 $ git rebase upstream/master # 有冲突则解决冲突 $ git push origin feature/implement-x # push 分支到自己的 repo  在GitHub的Web界面完成提交PR的流程   提完 PR 后请求相关开发人员 review，并设置Labels来表明提交的代码属于哪一个模块或者哪几个模块   或者通过添加评论的方式来完成上一步；评论 \u0026ldquo;/cc\u0026rdquo; 并 @ 相关人员完成设置reviewer，评论/area 并填写label完成设置Labels  ​ 所有Label都可以在issues——Labels下查询到，带area/前缀的Label均可以使用评论\u0026rdquo;/area\u0026rdquo;的形式添加\n 如果是 bugfix 或者需要合并到之前 release 分支的 feature PR，需要额外使用脚本将此PR cherry-pick 到对应的 release 分支  # 自行下载安装 github 的 cli 工具：https://github.com/github/hub # OSX 使用: brew install hub # Debian: sudo apt install hub # 二进制安装: https://github.com/github/hub/releases # 设置github的用户名 $ export GITHUB_USER=\u0026lt;your_username\u0026gt; # 使用脚本自动 cherry-pick PR 到 release 分支 # 比如现在有一个提交的PR的编号为8，要把它合并到 release/2.8.0 $ ./scripts/cherry_pick_pull.sh upstream/release/2.8.0 8 # cherry pick 可能会出现冲突，冲突时开另外一个 terminal，解决好冲突，再输入 \u0026#39;y\u0026#39; 进行提交 $ git add xxx # 解决完冲突后 $ git am --continue # 回到执行 cherry-pick 脚本的 terminal 输入 \u0026#39;y\u0026#39; 即可 去 upstream 的 PR 页面, 就能看到自动生成的 cherry-pick PR，上面操作的PR的标题前缀就应该为：Automated cherry pick of #8，然后重复 PR review 流程合并到 release\n"
},
{
	"uri": "/setup/controlplane/",
	"title": "控制节点",
	"tags": [],
	"description": "Showcase: Lessons learned from taking letsencrypt.org to Hugo.",
	"content": " 环境准备 OneCloud 相关的组件运行在 kubernetes 之上，环境以及相关的软件依赖如下:\n 操作系统: Centos 7.x 数据库: mariadb docker: ce-18.09.1 kubernetes: v1.14.3  安装配置 mariadb mariadb 作为服务数据持久化的数据库，可以部署在其它节点或者使用单独维护的。下面假设还没有部署 mariadb，在控制节点上安装设置 mariadb.\n$ MYSQL_PASSWD=\u0026#39;your-sql-passwd\u0026#39; # 安装 mariadb $ yum install -y epel-release mariadb-server $ systemctl enable --now mariadb $ mysqladmin -u root password \u0026#34;$MYSQL_PASSWD\u0026#34; $ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/my.cnf [mysqld] datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 # Settings user and group are ignored when systemd is used. # If you need to run mysqld under a different user or group, # customize your systemd unit file for mariadb according to the # instructions in http://fedoraproject.org/wiki/Systemd skip_name_resolve [mysqld_safe] log-error=/var/log/mariadb/mariadb.log pid-file=/var/run/mariadb/mariadb.pid # # include all files from the config directory # !includedir /etc/my.cnf.d EOF $ mysql -uroot -p$MYSQL_PASSWD \\  -e \u0026#34;GRANT ALL ON *.* to \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;$MYSQL_PASSWD\u0026#39; with grant option; FLUSH PRIVILEGES;\u0026#34; 安装配置 docker $ yum install -y yum-utils $ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo $ yum install -y docker-ce-18.09.1 docker-ce-cli-18.09.1 containerd.io $ mkdir /etc/docker $ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/docker/daemon.json { \u0026#34;bridge\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;iptables\u0026#34;: false, \u0026#34;exec-opts\u0026#34;: [ \u0026#34;native.cgroupdriver=cgroupfs\u0026#34; ], \u0026#34;data-root\u0026#34;: \u0026#34;/opt/docker\u0026#34;, \u0026#34;live-restore\u0026#34;: true, \u0026#34;log-driver\u0026#34;: \u0026#34;json-file\u0026#34;, \u0026#34;log-opts\u0026#34;: { \u0026#34;max-size\u0026#34;: \u0026#34;100m\u0026#34; }, \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://lje6zxpk.mirror.aliyuncs.com\u0026#34;, \u0026#34;https://lms7sxqp.mirror.aliyuncs.com\u0026#34;, \u0026#34;https://registry.docker-cn.com\u0026#34; ], \u0026#34;storage-driver\u0026#34;: \u0026#34;overlay2\u0026#34; } EOF $ systemctl enable --now docker 安装配置 kubelet $ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF $ yum install --assumeyes bridge-utils conntrack-tools jq kubelet-1.14.3-0 kubectl-1.14.3-0 kubeadm-1.14.3-0 $ systemctl enable kubelet # 做一些 sysctl 的配置, kubernetes 要求 $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/bridge.conf net.bridge.bridge-nf-call-iptables=1 net.bridge.bridge-nf-call-ip6tables=1 EOF $ sudo modprobe br_netfilter $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/ip_forward.conf net.ipv4.ip_forward=1 EOF $ sysctl -p 部署控制节点 先安装部署工具 ocadm 和云平台的命令行工具 climc:\n# 安装 climc 云平台命令行工具 $ yum-config-manager --add-repo https://iso.yunion.cn/yumrepo-2.10/yunion.repo $ yum install -y yunion-climc # climc 在 /opt/yunion/bin 目录下，根据自己的需要加到 bash 或者 zsh 配置文件里面 $ echo \u0026#39;export PATH=$PATH:/opt/yunion/bin\u0026#39; \u0026gt;\u0026gt; ~/.bashrc \u0026amp;\u0026amp; source ~/.bashrc # 安装 ocadm $ wget https://github.com/Zexi/ocadm/releases/download/v0.1.0/ocadm -P /opt/yunion/bin $ chmod a+x /opt/yunion/bin/ocadm 接下来会现在当前节点启动 v1.14.3 的 kubernetes 服务，然后将 keystone, region, scheduler 作为控制节点必须的服务启动起来。\n# 假设 mariadb 部署在本地，如果是使用已有的数据库，请改变对应的 ip $ MYSQL_HOST=$(ip route get 1 | awk \u0026#39;{print $NF;exit}\u0026#39;) # 拉取必要的 docker 镜像 $ ocadm config images pull # 开始部署 kubernetes 以及 onecloud 必要的控制服务，稍等 3 分钟左右，kubernetes 和 onecloud 控制服务都会运行起来 $ ocadm init --mysql-host $MYSQL_HOST --mysql-user root --mysql-password $MYSQL_PASSWD ... Your Kubernetes and Onecloud control-plane has initialized successfully! ... 环境检查 当控制节点部署完成后，云平台的管理员认证信息会保存在 /etc/yunion/rc_admin , 这些认证信息在使用 climc 控制云平台资源时会用到。\n$ source /etc/yunion/rc_admin 用 climc 命令行工具查看添加到云平台的网络，这里会创建一个默认 adm0 的网络，start_ip 和 end_ip 都为当前控制节点的默认ip。\n$ climc network-list +--------------------------------------+------+----------------+----------------+---------------+--------------------------------------+-----------+--------------+---------------+-------------+-----------+ | ID | Name | Guest_ip_start | Guest_ip_end | Guest_ip_mask | wire_id | is_public | public_scope | guest_gateway | server_type | Status | +--------------------------------------+------+----------------+----------------+---------------+--------------------------------------+-----------+--------------+---------------+-------------+-----------+ | 375d75ed-2d96-44e9-85c9-854025ebfcf3 | adm0 | 10.168.222.216 | 10.168.222.216 | 24 | a18aa192-1199-4744-8777-300ded3397e7 | false | none | 10.168.222.1 | baremetal | available | +--------------------------------------+------+----------------+----------------+---------------+--------------------------------------+-----------+--------------+---------------+-------------+-----------+ 删除环境 如果安装过程中失败，或者想清理环境，可执行以下命令删除 kubernetes 集群和 onecloud 数据库\n$ ocadm reset -f"
},
{
	"uri": "/setup/components/",
	"title": "其它组件",
	"tags": [],
	"description": "",
	"content": " 当控制节点部署完成后，还有其它容器化的组件可以部署，比如 glance, baremetal 和 webconsole 等，可以根据需要部署到其它节点，或者为了方便把这些组件都部署在控制节点。\n组件部署在控制节点 可以把所有组件都部署在已有的控制节点，参考: 组件安装\n组件部署到其它节点 如果需要把组件部署到其它节点，需要先在待部署的节点启动 kubelet，把改节点加入到已有的 kubernetes 集群，然后启动对应的容器化组件。\n环境准备 参考\u0026rdquo;部署控制节点\u0026rdquo;的流程，部署好 docker 和 kubelet，然后在控制节点使用 ocadm 拿到加入集群的 token，在待部署节点使用 ocadm 加入集群，操作如下:\n 在控制节点获取加入节点的 token  $ ocadm token list | grep bootstrap 4s4meb.xvgk2bwpmbospn3s 23h 2019-07-10T15:41:10+08:00 authentication,signing The default bootstrap token generated by \u0026#39;ocadm init\u0026#39;. system:bootstrappers:kubeadm:default-node-token  在待部署节点使用 token 加入 kubernetes 集群  # 这里的 10.168.222.216 是控制节点的 ip，请根据你的环境修改 $ ocadm join 10.168.222.216:6443 --token 4s4meb.xvgk2bwpmbospn3s --discovery-token-unsafe-skip-ca-verification ... This node has joined the cluster: * Certificate signing request was sent to apiserver and a response was received. * The Kubelet was informed of the new secure connection details. Run \u0026#39;kubectl get nodes\u0026#39; on the control-plane to see this node join the cluster. 组件安装 ocadm component install 可以安装全部的组件，或者根据选择将不同的组件安装到不同的节点。\n全部安装之前需要安装各个组件的依赖，目前只有 baremetal 依赖 baremetal-pxerom，这个包里面有物理机 pxe 启动时需要的引导文件、kernel 和 initramfs。\n# 安装依赖 $ yum install -y https://iso.yunion.cn/yumrepo-2.10/baremetal/baremetal-pxerom-1.1.0-19061318.x86_64.rpm # 全部安装 $ ocadm component install all # 安装 glance $ ocadm component install glance # 安装 baremetal，如果没有安装 baremetal-pxerom 需要通过 yum 安装 $ ocadm component install baremetal"
},
{
	"uri": "/howto/baremetal/operator/",
	"title": "操作相关",
	"tags": [],
	"description": "",
	"content": " 查询物理机 # list baremetal 记录 climc host-list --baremetal true # list 已经安装系统的物理机 climc host-list --baremetal true --occupied # list 未安装系统的物理机 climc host-list --baremetal true --empty # 查询物理机详情，包括硬件信息，机房信息 climc host-show \u0026lt;host_id\u0026gt; 注册物理机 climc host-create \u0026lt;host_id\u0026gt; 重新准备物理机 climc host-prepare \u0026lt;host_id\u0026gt; 获取物理机登录信息 climc host-logininfo \u0026lt;host_id\u0026gt; 获取串口登录控制台 climc webconsole-baremetal \u0026lt;host_id\u0026gt; 开/关机 climc host-start/host-stop \u0026lt;host_id\u0026gt; 进入/退出维护模式 climc host-maintenance/host-unmaintenance \u0026lt;host_id\u0026gt; 删除物理机 climc host-delete \u0026lt;host_id\u0026gt; 转换/回收宿主机 climc host-convert-hypervisor climc host-undo-convert \u0026lt;host_id\u0026gt; 裸金属服务器相关 安装操作系统 climc server-create \\  --hypervisor baremetal \\ # 指定 server 的类型为 baremetal --ncpu 24 \\ # 创建到 24 核 cpu 的物理机 --raid-config \u0026#39;raid1:2:MegaRaid\u0026#39; \\ # 第1块盘，使用 MegaRaid 控制器上的(0-1)号两块物理盘做 raid1 --raid-config \u0026#39;none:1\u0026#39; \\ # 第2块盘，使用 MegaRaid 控制器上的(2)号物理盘，不做 raid --raid-config \u0026#39;raid10:4:MegaRaid\u0026#39; \\ # 第3快盘, 使用 MegaRaid 控制器上的(3-6)号四块物理盘做raid10 --disk CentOS-7.5.qcow2:100g \\ # 系统盘使用 CentOS-7.5.qcow2 镜像作为操作系统，大小为 100g，使用第1块 raid1 的盘 --disk \u0026#39;autoextend:ext4:/opt\u0026#39; \\ # 分区挂载到 /opt, 使用第1块 raid1 的盘，文件系统为 ext4, 大小为(第一块盘总大小 - 该盘其他分区的大小(100g)) --disk \u0026#39;autoextend:xfs:/data-nonraid\u0026#39; \\ # 分区挂载到 /data-nonraid, 使用第2块没做 raid 的盘, 文件系统为 xfs，使用所有空间 --disk \u0026#39;autoextend:ext4:/data-raid10\u0026#39; \\ # 分区挂载到 /data-raid10, 使用第3块 raid10 的盘，文件系统为 ext4, 使用所有空间 \u0026lt;server_name\u0026gt; \\ # 裸金属服务器名称 64g # 创建到 64g 内存大小的物理机 raid 配置和分区 调用 server-create 接口时通过 \u0026lsquo;\u0026ndash;raid-config\u0026rsquo; 传递参数来配置 raid，每个 raid-config 对应到操作系统可见的磁盘设备(/dev/sdx)。\n\u0026rsquo;\u0026ndash;disk\u0026rsquo; 参数对应不同磁盘上的分区，分区对应到磁盘的逻辑为: 分区按照顺序创建到第1块磁盘上，当 disk 设置 autoextend 参数后，表示接下来的 disk 分区会创建到下一个磁盘，以此类推。\n raid 配置 API 参数:     Key Type value 解释     type(磁盘类型) string rotate(机械盘), ssd(固态盘), hybrid(未知) -   conf (raid) string none, raid0, raid1, raid5, raid10 做raid几或者不做   count (磁盘数量) int e.g. 0, 2, 4 小于等于物理机实际的盘数   range (磁盘范围) []int e.g. [0,1,2,3], [4,7], [5,6] 物理磁盘在控制器上的索引号   splits (切割物理盘) string (30%,20%,), (300g,100g,) 做好 raid 的物理盘再切割为多块物理盘   adapter (控制器号) int 0, 1 对应driver的 Adapter 控制器   driver (控制器名称) string MegaRaid,HPSARaid,Mpt2SAS,MarvelRaid,Linux,PCIE 1台物理机上有多个控制器时用于选择盘   strip (设置raid strip 大小) *int e.g. 64*1024 设置strip size, 可选   ra *bool  设置读模式   wt   设置写模式   cachedbadbbu *bool     direct *bool       命令行格式:\n\u0026rsquo;(none,raid0,raid1,raid5,raid10):%d:(MegaRaid|HPSARaid|Mpt2SAS|MarvelRaid|Linux|PCIE):(rotate|ssd|hybrid):[0-n]:strip%dk:adapter%d:ra:nora:wt:wb:direct:cachedbadbbu:nocachedbadbbu\u0026rsquo;\n  查询裸金属服务器 climc server-list --hypervisor baremetal climc server-show \u0026lt;server_id\u0026gt; 重装操作系统 climc server-rebuild --image \u0026lt;image_id\u0026gt; \u0026lt;server_id\u0026gt; 开/关机 climc server-start \u0026lt;server_id\u0026gt; climc server-stop \u0026lt;server_id\u0026gt; 删除裸金属服务器 删除 server 裸金属服务器会销毁物理机上的操作系统和 raid 配置，对应的 baremetal 重新进入未分配状态\nclimc server-delete \u0026lt;server_id\u0026gt;"
},
{
	"uri": "/howto/server/create/",
	"title": "创建云主机",
	"tags": [],
	"description": "",
	"content": " climc server-create 命令提供创建云主机的操作。 OneCloud 可以同时管理多个私有云和公有云，不同供应商有各自的认证方式，在创建云主机之前需要做一些不同的准备工作。\n环境准备 OneCloud 虚拟机 OneCloud 提供自研的 kvm 虚拟机私有云管理平台，创建 kvm 虚拟机时需要有相应的宿主机，如果还没有添加 kvm 宿主机，请参考 安装部署/计算节点 注册对应的宿主机到云平台。\nVMware ESXI 虚拟机 TODO\n私有云 私有云和公有云都有自己的认证体系，为了让 OneCloud 能够管理各个云平台，需要把他们的认证信息导入到 OneCloud 平台。\n   平台 准备工作     openstack TODO   zstack TODO    公有云    平台 准备工作     阿里云 TODO   腾讯云 TODO   华为云 TODO   AWS TODO   Azure TODO   UCloud TODO    创建机器 创建机器命令为 server-create，可以使用 climc help server-create 查看创建 server 的所有参数，常用的参数如下：\n   参数名称 类型 作用     \u0026ndash;ncpu int 虚拟机 cpu 个数   \u0026ndash;disk []string 指定创建的系统盘镜像，指定多次表示虚拟机创建多块磁盘   \u0026ndash;net []string 指定虚拟机使用的网络，指定多次将在虚拟机里面添加多个网卡   \u0026ndash;allow-delete bool 允许删除虚拟机   \u0026ndash;auto-start bool 创建完自动启动   \u0026ndash;password string 设置虚拟机密码   \u0026ndash;tenant string 创建到指定的项目   \u0026ndash;prefer-region string 创建到指定的 region   \u0026ndash;prefer-zone string 创建到指定的 zone   \u0026ndash;prefer-host string 创建到指定的 host    注意以下几点:\n 名称、内存或者套餐类型在创建主机时必须使用; 系统盘的镜像通过 image-list 或者 cached-image-list，公有云的镜像列表通过 cached-image-list 接口查询，参考: 查询镜像;  下面以举例的方式创建机器：\n私有云主机 待创建规格:\n   名称 平台 套餐 内存 cpu 系统盘 网络 其他     vm1 kvm - 4g 4 centos7.qcow2 60g net1 2块数据盘， 一块100g ext4 挂载到 /opt，另外一块 50g xfs 挂载到 /data; 自动启动   vm2 esxi - 2g 2 ubuntu18.04.qcow2 100g net2 允许删除   vm3 opnstack t2.nano - - centos6.qcow2 net3 -    # 创建 kvm vm1 $ climc server-create --hypervisor kvm --disk centos7.qcow2:60g --disk 100g:ext4:/opt --disk 50g:xfs:/data --ncpu 4 --net net1 --auto-start vm1 4g # 创建 esxi vm2 $ climc server-create --hypervisor esxi --disk ubuntu18.04.qcow2:100g --net net2 --ncpu 2 --allow-delete vm2 2g # 创建 openstack vm3 $ climc server-create --hypervisor openstack --disk centos6.qcow2 --net net3 vm3 t2.nano 公有云主机 创建共有云主机和虚拟机的参数一致，但通常情况下需要通过 cloud-region-list 、zone-list 和 vpc-list 子命令挑选出各个公有云可用的 region, zone 和 network。\n然后 server-create 的时候通过 --prefer-region 或 --prefer-zone 创建到指定的区域，--net 创建到指定的 vpc 子网。\n# 查询 aliyun 的可用的 vpc $ climc vpc-list --provider Aliyun --details +--------------------------------------+-------------------------------------------+---------+-----------+--------------------------------------+------------+----------------+------------------------+ | ID | Name | Enabled | Status | Cloudregion_Id | Is_default | Cidr_Block | Region | +--------------------------------------+-------------------------------------------+---------+-----------+--------------------------------------+------------+----------------+------------------------+ | 6aabd4c5-8a6a-4ffb-83cd-39f924f773b7 | test12 | false | available | 9b0fdc39-701b-44fc-8842-664fe89359f1 | false | 192.168.0.0/16 | 阿里云 华北2（北京） | | 8f4d444f-cce4-4797-8441-e1b58c72ed26 | ali-yunion-bj | false | available | 9b0fdc39-701b-44fc-8842-664fe89359f1 | true | 172.17.0.0/16 | 阿里云 华北2（北京） | | bb8c1ec5-4577-4f84-8117-efab6586b799 | ali-transit-bj | false | available | 9b0fdc39-701b-44fc-8842-664fe89359f1 | false | 10.0.0.0/8 | 阿里云 华北2（北京） | | c4e1a012-5f2a-48fc-80ef-4ac0371006eb | hello | false | available | dbbfea2f-8bf4-4676-8036-4ad6f6e6b1ea | false | 10.0.0.0/8 | 阿里云 阿联酋（迪拜） | ... # 查询 vpc 6aabd4c5-8a6a-4ffb-83cd-39f924f773b7 下可用的 network $ climc network-list --vpc 6aabd4c5-8a6a-4ffb-83cd-39f924f773b7 +--------------------------------------+------------+----------------+-----------------+---------------+--------------------------------------+-----------+--------------+-----------------+-------------+-----------+ | ID | Name | Guest_ip_start | Guest_ip_end | Guest_ip_mask | wire_id | is_public | public_scope | guest_gateway | server_type | Status | +--------------------------------------+------------+----------------+-----------------+---------------+--------------------------------------+-----------+--------------+-----------------+-------------+-----------+ | b3dee5e6-0dce-403c-80b2-ad62880b662f | esrdfsfsd | 192.168.0.1 | 192.168.127.252 | 17 | a421934d-9cb4-4163-85b9-ad0038e9cb89 | true | system | 192.168.127.254 | guest | available | | d131de82-1be5-4f70-8b22-2303f4f409bb | sdfsdfdsff | 192.168.128.1 | 192.168.255.252 | 17 | 8ccdbe42-0c62-456f-842d-bc279a5c2786 | true | system | 192.168.255.254 | guest | available | +--------------------------------------+------------+----------------+-----------------+---------------+--------------------------------------+-----------+--------------+-----------------+-------------+-----------+ # 查询 region 9b0fdc39-701b-44fc-8842-664fe89359f1 下可用的 sku $ climc server-sku-list --region 9b0fdc39-701b-44fc-8842-664fe89359f1 --provider Aliyun # 创建 ecs.t5-lc2m1.nano aliyun vm4 虚拟机到 region 9b0fdc39-701b-44fc-8842-664fe89359f1 的子网 b3dee5e6-0dce-403c-80b2-ad62880b662f $ climc server-create --prefer-region 9b0fdc39-701b-44fc-8842-664fe89359f1 vm4 --hypervisor aliyun --net b3dee5e6-0dce-403c-80b2-ad62880b662f vm4 ecs.t5-lc2m1.nano"
},
{
	"uri": "/howto/image/query/",
	"title": "查询镜像",
	"tags": [],
	"description": "",
	"content": " 列表 # 查询所有镜像列表 $ climc image-list # 查询所有缓存的镜像列表 $ climc cached-image-list # 查询包含 ubuntu 关键字的镜像 $ climc image-list --search ubuntu # 查询公有云包含 centos 关键字的缓存 $ climc cached-image-list --search centos --public-cloud # image-list 支持的查询条件 $ climc help image-list # cached-image-list 支持的查询条件 $ climc help cached-image-list 详情 根据 image-list 可以获取镜像的列表，第1、2列包含镜像的 id 和 name，通过 id 或 name 可以获取镜像的详情。\n# 查询名称包含 ubuntu 的镜像 $ climc image-list --search ubuntu +--------------------------------------+--------------------------------------+-------------+------------+-----------+----------+---------+--------+----------------------------------+ | ID | Name | Disk_format | Size | Is_public | Min_disk | Min_ram | Status | Checksum | +--------------------------------------+--------------------------------------+-------------+------------+-----------+----------+---------+--------+----------------------------------+ | bd0a4029-7646-4d21-89b7-856d90334cc7 | ubuntu-xenial-server.qcow2 | qcow2 | 297009152 | true | 2252 | 0 | active | 3ab09243ba73ae87fb48c08ddb42ef42 | | b3440f33-23ca-4d56-85ee-dc2b368b6337 | ubuntu-18.04.2-server-20190430.qcow2 | qcow2 | 1003356160 | true | 30720 | 0 | active | 9c414111827a07a446e25811a3674a43 | | a0ef7a1e-eb92-406f-8042-b7018a410b2c | ubuntu-16.04.5-server-20181117.qcow2 | qcow2 | 792002560 | true | 30720 | 0 | active | a69f06c9063089368fdc729149fc545e | +--------------------------------------+--------------------------------------+-------------+------------+-----------+----------+---------+--------+----------------------------------+ *** Total: 3 Pages: 1 Limit: 20 Offset: 0 Page: 1 *** # 查看 ubuntu-xenial-server.qcow2 的详情 $ climc image-show ubuntu-xenial-server.qcow2 +-----------------+------------------------------------------------------------------------------------------------------------------+ | Field | Value | +-----------------+------------------------------------------------------------------------------------------------------------------+ | can_delete | false | | can_update | true | | checksum | 3ab09243ba73ae87fb48c08ddb42ef42 | | created_at | 2019-07-19T03:33:11.000000Z | | disk_format | qcow2 | | domain_id | default | | fast_hash | bdcce6185fcefcd0e009499226f0bee9 | | id | bd0a4029-7646-4d21-89b7-856d90334cc7 | | is_emulated | false | | is_public | true | | is_system | false | | min_disk | 2252 | | min_ram | 0 | | name | ubuntu-xenial-server.qcow2 | | oss_checksum | 3ab09243ba73ae87fb48c08ddb42ef42 | | owner | a7f2e2a81a1e4850a41eae5f140ceb14 | | pending_deleted | false | | project_src | local | | properties | {\u0026#34;installed_cloud_init\u0026#34;:\u0026#34;true\u0026#34;,\u0026#34;os_arch\u0026#34;:\u0026#34;x86\u0026#34;,\u0026#34;os_distribution\u0026#34;:\u0026#34;Ubuntu\u0026#34;,\u0026#34;os_type\u0026#34;:\u0026#34;Linux\u0026#34;,\u0026#34;os_version\u0026#34;:\u0026#34;16.0\u0026#34;} | | protected | false | | public_scope | system | | size | 297009152 | | status | active | | tenant_id | a7f2e2a81a1e4850a41eae5f140ceb14 | | update_version | 6 | | updated_at | 2019-07-19T03:34:47.000000Z | +-----------------+-------------------------------------------------------------------------------------------------"
},
{
	"uri": "/howto/image/create/",
	"title": "制作镜像",
	"tags": [],
	"description": "",
	"content": "你可能需要自己定制发行版的镜像，用于给不同的业务使用。本文介绍如何制作镜像。\n可以通过下载发行版操作系统的 iso , 然后本地启动虚拟机，将 iso 安装到虚拟机的磁盘，然后保存该磁盘，这个磁盘就可以作为镜像上传到 glance，但是这种方法人工参与的步骤太多，容易出错。\n推荐使用 packer 这个工具来自动化制作镜像，详细操作可以参考对应的文档 https://www.packer.io/docs/index.html 。\nhttps://github.com/yunionio/service-images 仓库包含了一些我们使用 packer 制作镜像的配置，可以参考使用。\n"
},
{
	"uri": "/howto/server/",
	"title": "云主机",
	"tags": [],
	"description": "",
	"content": "云主机(server)指云平台管理的虚拟机和裸金属服务器。\n 虚拟机: 又叫做云服务器，包括我们提供的 kvm 虚拟机、vmware、openstack 和各个公有云的虚拟机。\n 裸金属: 云平台提供物理机(baremetal)装机功能，安装完操作系统并被云平台管理的服务器称为裸金属服务器。\n  现在支持的主机和平台的对应关系如下：\n   类型 平台     kvm onecloud 私有云虚拟机   baremetal onecloud 私有云裸金属   esxi vmware 虚拟机   openstack openstack 私有云虚拟机   zstack zstack 私有云虚拟机   aliyun 阿里云虚拟机   qcloud 腾讯云虚拟机   aws AWS 虚拟机   azure Azure 虚拟机   huawei 华为云虚拟机   ucloud UCloud 虚拟机    "
},
{
	"uri": "/howto/",
	"title": "操作管理",
	"tags": [],
	"description": "",
	"content": "主要结合应用场景介绍云平台各个资源的操作管理，首先会介绍命令行工具 climc 的用法，然后再具体介绍每种资源的操作。建议先熟悉命令行工具 climc 的使用过后在看后面的章节。\n熟悉命令行工具后，会分不同的部分介绍各种资源的操作和一些概念，云平台的资源大概分为 \u0026ldquo;虚拟资源\u0026rdquo; 和 \u0026ldquo;基础设施\u0026rdquo; 两类，有了基础设施类型的资源才能在其之上构建虚拟化的资源，具体分类如下:\n infra: 表示基础设施类型 virtual: 表示虚拟资源类型，属于具体的项目     名称 抽象资源 作用 类型     cloudregion 云平台地域 标记数据中心所在地域 infra   zone 云平台数据中心 标记数据中心 infra   vpc 逻辑隔离网络空间 抽象虚拟化网络的集合 infra   wire 对应二层扁平网络的广播域 抽象二层扁平网络广播域 infra   storage 存储 标记存储，提供云硬盘能力 infra   host 服务器 标记服务器，提供计算虚拟化 infra   server 云主机 运行在 host 上，使用虚拟化技术提供计算能力 virtual   disk 云硬盘 创建在 storage 上，使用虚拟化技术提供存储能力 virtual   network 网络 创建在 vpc 中，使用虚拟化技术提供网络 virtual   image 镜像 安装了操作系统的虚拟机磁盘，也属于 disk 一类 virtual   eip 外网浮动 ip 对应外网可用 ip virtual   loadbalancer 负载均衡器 标记负载均衡器，提供服务负载均衡 virtual    除了上面介绍的常见资源外，为了做多云管理，我们还引入了以下的概念:\n   名称 资源 作用 类型     cloudaccount 云平台的账户 对应各个云平台的认证信息 infra   project 项目 OneCloud 内部对虚拟机资源的划分 infra   schedtag 调度标签 可以标记多种资源，提供资源调度能力 infra   sku 套餐信息 对应创建虚拟资源的规格信息 infra    "
},
{
	"uri": "/setup/host/",
	"title": "计算节点",
	"tags": [],
	"description": "",
	"content": " 如果需要构建内部私有云，就需要部署计算节点(宿主机)。计算节点主要负责虚拟机、网络和存储的管理，需要安装的组件如下:\n   组件 用途 安装方式 运行方式     host 管理 kvm 虚拟机和存储 rpm systemd   sdnagent 管理虚拟机网络和安全组 rpm systemd   openvswitch 虚拟机网络端口和流表配置 rpm systemd   qemu 运行虚拟机 rpm process   kernel onecloud 提供的内核 rpm -    环境  操作系统: Centos 7.x 硬件要求:  Virtualization: CPU 要支持虚拟化，用于虚拟机 KVM 加速 打开 iommu，VT-d: 用于 GPU 透传  网络:\n 当前可用的网段: 虚拟机可以直接使用和计算节点所在的扁平网段，需要预先划分保留对应端给云平台虚拟机使用，防止被其它设备占用，最后 IP 冲突  备注:\n 如果是以测试为目的，可以拿一台虚拟机部署计算节点的服务，但可能无法使用 KVM 加速和 GPU 透传   安装依赖 计算节点所有的服务都以 rpm 的方式安装，因为虚拟机会用到内核 vfio 和 nbd 等特性，所以没有容器化部署。\n# 添加 yum 源 $ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/yum.repos.d/yunion.repo [yunion] name=Packages for Yunion Multi-Cloud Platform baseurl=https://iso.yunion.cn/yumrepo-2.10 sslverify=0 failovermethod=priority enabled=1 gpgcheck=0 EOF # 禁用防火墙和selinux $ systemctl disable firewalld $ sed -i \u0026#39;s/SELINUX=enforcing/SELINUX=disabled/g\u0026#39; /etc/selinux/config 安装 rpm 包\n$ yum install -y \\  epel-release chntpw dosfstools ethtool fetchclient fuse fuse-devel fuse-libs gdisk \\  libaio jq libusb lvm2 lxcfs lz4 nc ntfs-3g_ntfsprogs zerofree \\  oniguruma parted pciutils spice spice-protocol sshpass sysstat \\  tcpdump telegraf usbredir vmware-vddk xfsprogs \\  yunion-qemu-2.12.1 yunion-host yunion-host-image yunion-sdnagent \\  kernel-3.10.0-862.14.4.el7.yn20190116 \\  kernel-devel-3.10.0-862.14.4.el7.yn20190116 \\  kernel-headers-3.10.0-862.14.4.el7.yn20190116 \\  kmod-openvswitch-2.9.3-1.el7 \\  openvswitch-2.9.3-1 # 安装完成后需要重启进入我们的内核 $ reboot # 重启完成后，查看当前节点内核信息，确保为 yn 内核 $ uname -r 3.10.0-862.14.4.el7.yn20190116.x86_64 控制节点操作 创建 host 服务的认证用户 $ source /etc/yunion/rc_admin $ cat /etc/yunion/rc_admin # 这个是云平台 keystone 的认证地址，后面配置会用到 export OS_AUTH_URL=https://10.168.222.216:5000/v3 ... # 这个 region0 也会在配置中用到 export OS_REGION_NAME=region0 # 这里记住自己的用户密码，后面配置会用到 $ climc user-create --enabled --password hostadminpasswd hostadmin $ climc project-add-user system hostadmin admin 创建计算节点所在的网段 我的环境控制节点的 ip 为 10.168.222.218，就创建一个对应的 host 网段。需要根据自己的环境创建对应的网段。\n# 查看当前环境的 zone $ climc zone-list +--------------------------------------+-------+--------+----------------+ | ID | Name | Status | Cloudregion_ID | +--------------------------------------+-------+--------+----------------+ | f73a2120-1206-45fa-8d43-de374ab0f494 | zone0 | enable | default | +--------------------------------------+-------+--------+----------------+ # 在 zone0 里面创建一个 wire bcast0，该资源抽象计算节点所在的二层广播域信息 $ climc wire-create zone0 bcast0 1000 # 在 wire bcast0 之上创建一个计算节点的网络，计算节点的 host 服务注册会用到，如果 host 注册时没有在云平台找到对应的网络，将会注册失败 $ climc network-create --gateway 10.168.222.1 --server-type baremetal bcast0 inf0 10.168.222.218 10.168.222.218 24 配置 host 服务 $ mkdir -p /etc/yunion $ cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/yunion/host.conf region = \u0026#39;region0\u0026#39; # 记得把这些认证信息参考控制节点的 rc_amdin 配置对应过来 address = \u0026#39;10.168.222.218\u0026#39; port = 8885 auth_uri = \u0026#39;https://10.168.222.216:5000/v3\u0026#39; admin_user = \u0026#39;hostadmin\u0026#39; admin_password = \u0026#39;hostadminpasswd\u0026#39; admin_tenant_name = \u0026#39;system\u0026#39; networks = [\u0026#39;eth0/br0/10.168.222.218\u0026#39;] hostname = \u0026#39;$(hostname -s)\u0026#39; bridge_driver = \u0026#39;openvswitch\u0026#39; servers_path = \u0026#39;/opt/cloud/workspace/servers\u0026#39; snapshot_path = \u0026#39;/opt/cloud/workspace/disks/snapshots\u0026#39; local_image_path = [\u0026#39;/opt/cloud/workspace/disks\u0026#39;] image_cache_path = \u0026#39;/opt/cloud/workspace/disks/image_cache\u0026#39; agent_temp_path = \u0026#39;/opt/cloud/workspace/disks/agent_tmp\u0026#39; rack = \u0026#39;rack0\u0026#39; slots = \u0026#39;slot0\u0026#39; linux_default_root_user = True allow_inter_tenant_broadcast = True allow_inter_tenant_multicast = True allow_inter_tenant_unicast = True block_io_scheduler = \u0026#39;cfq\u0026#39; enable_template_backing = True default_qemu_version = \u0026#39;2.12.1\u0026#39; EOF 启动 host 配置完成后就可以使用 systemctl 启动 host 服务了，命令如下:\n# 启动 $ systemctl enable yunion-host --now # 观察启动日志 $ journalctl -u yunion-host -f ... Jul 09 18:23:34 lzx-ocadm-test2 host[4216]: [I 190709 18:23:34 metadata.StartService(metadatahandler.go:268)] Host Metadata Start listen on http://10.168.222.218:9885 # 出现上述信息表示 host 已经成功注册到了控制节点 控制节点启动 host 回到控制节点，启用刚才上报的计算节点\n# 使用 climc 查看注册的 host 列表 $ climc host-list +--------------------------------------+-----------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-----------------+--------------+ | ID | Name | Access_mac | Access_ip | Manager_URI | Status | enabled | host_status | mem_size | cpu_count | node_count | sn | storage_type | host_type | version | storage_size | +--------------------------------------+-----------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-----------------+--------------+ | cc053d7c-1456-4c72-8198-adc1f487df9d | lzx-ocadm-test2 | 00:22:1b:c4:a4:81 | 10.168.222.218 | http://10.168.222.218:8885 | running | false | online | 4096 | 4 | 4 | Not Specified | rotate | hypervisor | HEAD(5c8f4b19a) | 29982 | +--------------------------------------+-----------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-----------------+--------------+ *** Total: 1 Pages: 1 Limit: 20 Offset: 0 Page: 1 *** # 启动 host $ climc host-enable lzx-ocadm-test2 创建虚拟机测试 上传 cirrors 测试镜像 # 下载 cirros 测试镜像 $ wget https://iso.yunion.cn/yumrepo-2.10/images/cirros-0.4.0-x86_64-disk.qcow2 # 将镜像上传到 glance $ climc image-upload --format qcow2 --os-type Linux --min-disk 10240 cirros-0.4.0-x86_64-disk.qcow2 ./cirros-0.4.0-x86_64-disk.qcow2 # 查看上传的镜像 $ climc image-list +--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+ | ID | Name | Disk_format | Size | Is_public | Min_disk | Min_ram | Status | Checksum | +--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+ | 63f6f2af-4db2-4e30-85f5-0ad3baa27bd9 | cirros-0.4.0-x86_64-disk.qcow2 | qcow2 | 22806528 | false | 30720 | 0 | active | 76dc07d1a730a92d0db7fb2d3c305ecd | +--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+ # 如果使用虚拟机作为计算节点，存储可能不大，可以把镜像的默认大小30g调整到10g $ climc image-update --min-disk 10240 cirros-0.4.0-x86_64-disk.qcow2 创建测试网络 下面是随机创建了一个主机间不可达的网络用于测试，如果有划分好的扁平二层可用网络，可以直接拿来给虚拟机使用。\n$ climc network-create --gateway 10.20.30.1 --server-type guest bcast0 vnet0 10.20.30.2 10.20.30.254 24 $ climc network-public vnet0 创建虚拟机 # 创建虚拟机 testvm01，512M内存, 1个CPU, 系统盘 10g, 第二块磁盘 5g 格式化为 ext4 并挂载到 /opt 的虚拟机 $ climc server-create --disk cirros-0.4.0-x86_64-disk.qcow2:10g --disk 5g:ext4:/opt --net vnet0 --auto-start --allow-delete --ncpu 1 testvm01 512M # 查看创建的虚拟机，1分钟后应该会变为 running 状态 $ climc server-list --details +--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-----------------+--------+-----------+ | ID | Name | Billing_type | IPs | Disk | Status | vcpu_count | vmem_size | Secgroup | Created_at | Hypervisor | os_type | Host | Tenant | is_system | +--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-----------------+--------+-----------+ | f10c0083-9ee8-4353-86e2-67b9ac16f732 | testvm01 | postpaid | 10.20.30.253 | 30720 | running | 1 | 512 | Default | 2019-07-09T13:12:16.000000Z | kvm | Linux | lzx-ocadm-test2 | system | false | +--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-----------------+--------+-----------+ # 获取虚拟机登录信息 $ climc server-logininfo testvm01 +----------+-----------------------------+ | Field | Value | +----------+-----------------------------+ | password | Bs5Zn6%Ry?9h | | updated | 2019-07-09T13:12:22.785767Z | | username | root | +----------+-----------------------------+ # 在计算节点联通测试网络(如果你是直接用的二层网络，应该能直接 ping 通虚拟机的 ip 了，不需要做这一步) $ ip address add 10.20.30.1/24 dev br0 $ ping 10.20.30.253 PING 10.20.30.253 (10.20.30.253) 56(84) bytes of data. 64 bytes from 10.20.30.253: icmp_seq=1 ttl=64 time=0.984 ms # 用之前 server-logininfo 命令获取的用户名密码，直接登录到虚拟机里面 $ ssh root@10.20.30.253 # 如果网络不通，也可以通过 vnc 的方式打开虚拟机的 tty 登录界面，操作如下 # 打开 vnc 链接，用浏览器打开下面的链接 # 打开 vnc 链接时会出现不安全认证，导致 websocket 无法握手，需要在浏览器信任 webconsole server 对应的 endpoint $ climc endpoint-list --details | grep webconsole | 67dcd7e163524526867d2a67c2162389 | region0 | 0c79be9a91f840c38d02930e9aa24dce | webconsole | webconsole | https://10.168.222.216:8899 | internal | true | # 然后用浏览器访问下 https://10.168.222.216:8899 , 信任该链接即可 # 在通过 webconsole-server 命令获取 vnc web 界面的链接地址 $ climc webconsole-server testvm01 https://console.yunion.cn/web-console?access_token=FI-VXQSAonhzfSnxVTKCCbwHinp7swlRkmi-4p6s-4OfZpg6TG9YhWuwbHEUA1D7XoKu_w%3D%3D\u0026amp;api_server=https%3A%2F%2F10.168.222.216%3A8899\u0026amp;password=65xB2kaE\u0026amp;protocol=vnc"
},
{
	"uri": "/howto/host/",
	"title": "宿主机",
	"tags": [],
	"description": "",
	"content": "宿主机(host): 指运行虚拟机的机器，云平台的抽象的宿主机根据 hypervisor 字段判断不同平台的宿主机。现在支持的类型如下：\n   类型 平台     hypervisor onecloud 私有云宿主机   baremetal onecloud 私有云物理机   esxi vmware 宿主机   openstack openstack 私有云宿主机   zstack zstack 私有云宿主机    "
},
{
	"uri": "/howto/server/connect/",
	"title": "登录云主机",
	"tags": [],
	"description": "",
	"content": " 创建好主机后，登录的方式大概分为以下几种：\n ssh: linux 通用，要求主机网络可达; rdp: windows 远程桌面，要求主机网络可达； vnc: vnc 链接，对主机网络没有要求，只要能链接云平台 vnc proxy 即可; ipmi sol: 只对装有 BMC 的物理机可用;  针对以上的链接方式，我们提供以下接口链接云主机：\nvnc 链接 climc webconsole-server 命令提供通过 vnc 的方式链接虚拟机，该方式对裸金属服务器不可用。\n$ climc webconsole-server \u0026lt;server_id\u0026gt; ssh 链接 查询 server 的 ip\n# 可通过 server-list --search --details 的方式找到主机的 ip $ climc server-list --search \u0026lt;server_name\u0026gt; --details # 或者通过 server-show \u0026lt;server_id\u0026gt; 的方式得到 ip $ climc server-show \u0026lt;server_name\u0026gt; | grep ip | ips | 10.168.222.226 | 查询 server 的登录信息\n$ climc server-logininfo \u0026lt;server_name\u0026gt; +----------+-----------------------------+ | Field | Value | +----------+-----------------------------+ | password | @2aWXB6AmCbV | | updated | 2019-07-03T10:00:20.801716Z | | username | root | +----------+-----------------------------+ ssh 登录\n$ ssh root@10.168.222.226 通过 webconsole 登录\n$ climc webconsole-ssh 10.168.222.226 https://console.yunion.cn/web-console?access_token=y7bjpBwtvJHLHpwOUMzNVvsYiAgY1vskIuVwB-aINfH4mm8MsZqwxKSfHqm2pCvY6O8bBA%3D%3D\u0026amp;api_server=https%3A%2F%2Foffice.yunion.io\u0026amp;protocol=tty  在浏览器打开 webconsole 放回的 url ，就会到对应虚拟机的登录界面\n"
},
{
	"uri": "/howto/server/others/",
	"title": "其他操作",
	"tags": [],
	"description": "",
	"content": " 开关机 # 开机 $ climc server-start \u0026lt;server_id\u0026gt; # 关机 $ climc server-stop \u0026lt;server_id\u0026gt; # 强制关机 $ climc server-stop --is-force \u0026lt;server_id\u0026gt; # 重启 $ climc server-restart \u0026lt;server_id\u0026gt; 删除 # 删除至回收站 $ climc server-delete \u0026lt;server_id\u0026gt; # 彻底删除 $ climc server-delete -f \u0026lt;server_id\u0026gt; 重装密码 $ climc server-deploy --reset-password --password \u0026lt;your_password\u0026gt; \u0026lt;server_id\u0026gt; TODO\n"
},
{
	"uri": "/howto/baremetal/",
	"title": "物理机",
	"tags": [],
	"description": "",
	"content": " 术语解释  Baremetal: 指尚未安装操作系统的服务器， 也叫作物理机 PXE (Preboot eXecution Environment): 使用网络接口启动计算机的机制。这种机制不依赖本地数据存储设备（如硬盘）或本地已安装的操作系统，使用 DHCP 协议查找引导服务器并获取 IP，再通过 TFTP 协议下载初始引导程序和附加文件启动 DHCP (Dynamic Host Configuration Protocol): 动态主机设置协议是一个局域网的网络协议，使用UDP协议工作，为机器分配 IP TFTP (Trivial File Transfer Protocol): 小型文件传输协议，使用UDP协议传输文件 DHCP Relay: 在不同子网和物理网段之间处理和转发dhcp信息的功能 IPMI (Intelligent Platform Management Interface)：管理服务器硬件的标准，特性是独立于操作系统外自行运行，即使在缺少操作系统或系统管理软件、或受监控的系统关机但有接电源的情况下仍能远程管理系统，也能在操作系统引导后运行 BMC (Baseboard management controller): 基板管理控制器，支持行业标准的 IPMI 规范 SSH (Secure Shell): 用于远程登录控制服务器 RAID (Redundant Array of Independent Disks): 磁盘阵列，把多个硬盘组合成为一个逻辑扇区，操作系统只会把它当作一个硬盘\n Region Service: 云平台控制服务，提供 baremetal 相关 API\n Baremetal Agent: 云平台管理 baremetal 的服务\n Glance Service: 云平台镜像服务，提供物理机装机的 Image 镜像\n 裸金属服务器: baremetal 物理机安装操作系统后，在云平台创建的 server 的记录\n 宿主机: 可以运行云平台虚拟机的节点\n  "
},
{
	"uri": "/howto/server/gpu/",
	"title": "GPU相关",
	"tags": [],
	"description": "",
	"content": " 目前仅支持 OneCloud kvm 虚拟机使用 GPU，使用的 PCI Passthrough 的方式将宿主机上的 Nvidia/AMD GPU 透传给虚拟机使用。\n相关操作 创建 GPU 云主机  查询 gpu 列表  $ climc isolated-device-list --gpu +--------------------------------------+----------+---------------------+---------+------------------+--------------------------------------+ | ID | Dev_type | Model | Addr | Vendor_device_id | Host_id | +--------------------------------------+----------+---------------------+---------+------------------+--------------------------------------+ | 273f4f72-06b6-49aa-8456-4beceec44997 | GPU-HPC | GeForce GTX 1050 Ti | 41:00.0 | 10de:1c82 | 3bce9607-2597-469f-8d9b-977345456739 | | a77333e9-08d9-45c6-87eb-a7d8d902c5f5 | GPU-HPC | Quadro FX 580 | 05:00.0 | 10de:0659 | 3bce9607-2597-469f-8d9b-977345456739 | +--------------------------------------+----------+---------------------+---------+------------------+--------------------------------------+  创建 server  server-create 中的 --isolated-device 参数指定透传的设备到云主机，可以重复使用多次，透传多个 gpu 到云主机，但要求透传到同一云主机的 gpu 必须在同一宿主机。其余创建参数和创建普通云主机是一样的。\n$ climc server-create --hypervisor kvm --isolated-device 273f4f72-06b6-49aa-8456-4beceec44997 ... 查询 GPU 云主机 $ climc server-list --gpu 关联 GPU 如果云主机所在的宿主机有可用的 gpu，在主机关机的情况下，可以通过 server-attach-isolated-device 命令将 gpu 和云主机关联起来，下次主机启动后就可以使用该 gpu 。\n$ climc server-attach-isolated-device \u0026lt;server_id\u0026gt; \u0026lt;device_id\u0026gt; 卸载 GPU 如果云主机关联了 gpu，可以通过 server-detach-isolated-device 卸载主机的某一 gpu。\n$ climc server-detach-isolated-device \u0026lt;server_id\u0026gt; \u0026lt;device_id\u0026gt;"
},
{
	"uri": "/howto/network/",
	"title": "网络",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/howto/lb/",
	"title": "负载均衡",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/howto/storage/",
	"title": "存储",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/howto/multicloud/",
	"title": "多云管理",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/howto/auth/",
	"title": "认证与权限",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/howto/server/migrate/",
	"title": "迁移相关",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/howto/container/",
	"title": "容器集群",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/howto/server/backup/",
	"title": "主备机",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/howto/scheduler/",
	"title": "资源调度",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/howto/image/operation/",
	"title": "其他操作",
	"tags": [],
	"description": "",
	"content": " 导入镜像 云平台的 glance 镜像服务支持从外部 url 导入镜像，对应 climc 的子命令为 image-import　。\n# 导入 https://iso.yunion.cn/yumrepo-2.10/images/cirros-0.4.0-x86_64-disk.qcow2 镜像 $ climc image-import --format qcow2 --os-type Linux cirros-test.qcow2 https://iso.yunion.cn/yumrepo-2.10/images/cirros-0.4.0-x86_64-disk.qcow2 使用 image-list 或 image-show 查询导入镜像的状态，变为 active 时表明可以使用。\n下载镜像 如果需要将云平台的镜像导出到本地，就需要用 climc image-download 把 glance 存的镜像下载下来。\n参考 查询镜像 查询你想要下载的镜像，等到镜像 id 或 name。\n下载镜像:\n$ climc image-download \u0026lt;id\u0026gt; 删除镜像 镜像确定不用了，可以通过 climc image-delete 删除镜像\n$ climc image-delete \u0026lt;image_id\u0026gt;"
},
{
	"uri": "/",
	"title": "OneCloud 文档",
	"tags": [],
	"description": "",
	"content": " OneCloud 文档 文档分为以下部分：\n OneCloud 简介: 简单介绍 onecloud 产品特性和功能\n 安装部署: 安装和部署 onecloud 各个服务与组件\n 开发贡献: 搭建开发环境，提交 PR\n 操作管理: 介绍如何操作云平台资源和管理服务\n  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]