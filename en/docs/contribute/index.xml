<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloudpods – Development</title><link>https://www.cloudpods.org/en/docs/contribute/</link><description>Recent content in Development on Cloudpods</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://www.cloudpods.org/en/docs/contribute/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Code contribution</title><link>https://www.cloudpods.org/en/docs/contribute/contrib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/en/docs/contribute/contrib/</guid><description>
&lt;h2 id="fork-repository">Fork Repository&lt;/h2>
&lt;p>Visit &lt;a href="https://github.com/yunionio/cloudpods">https://github.com/yunionio/cloudpods&lt;/a> , fork it.&lt;/p>
&lt;h2 id="clone-source">Clone source&lt;/h2>
&lt;p>Clone your fork repository and set upstream.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/&amp;lt;your_name&amp;gt;/cloudpods
$ &lt;span style="color:#204a87">cd&lt;/span> cloudpods
$ git remote add upstream https://github.com/yunionio/cloudpods
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="how-to-make-a-pull-request">How to make a Pull Request?&lt;/h2>
&lt;ul>
&lt;li>Checkout a branch from master, either for a new feature or a bugfix&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># checkout new branch&lt;/span>
$ git fetch upstream --tags
$ git checkout -b feature/implement-x upstream/master
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Coding on the new branch&lt;/li>
&lt;li>After coding is done, do the following to prepare for Pull Request&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git fetch upstream &lt;span style="color:#8f5902;font-style:italic"># fetch most up-to-date upstream master&lt;/span>
$ git rebase upstream/master &lt;span style="color:#8f5902;font-style:italic"># resolv possible conflicts&lt;/span>
$ git push origin feature/implement-x &lt;span style="color:#8f5902;font-style:italic"># push your local branch to github&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Submit Pull Request on GitHub&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/submitPR.png" alt="">&lt;/p>
&lt;ul>
&lt;li>Request reviews, set labels to indicate the impact components of the codes&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/reviewer_label.png" alt="">&lt;/p>
&lt;ul>
&lt;li>You may use comments to appoint reviwers and set labels. Use &amp;lsquo;/cc&amp;rsquo; and @&lt;userid> to appoint reviwers, use &amp;lsquo;/area&amp;rsquo; to indicate the impact components of the codes.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/robot_review_label.png" alt="">&lt;/p>
&lt;p>​ Available labels are listed under issues——Labels, any label prefixed with area can be used for &amp;lsquo;/area&amp;rsquo; command.&lt;/p>
&lt;ul>
&lt;li>If the codes need to be merged into release branch, you should create new cherry-pick PRs to the target release branch.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># Donwload github command line tool: https://github.com/github/hub&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># For OSX, please execute: brew install hub&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># For Debian, please execute: sudo apt install hub&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># For other OS, please install binaries: https://github.com/github/hub/releases&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Setup username of github&lt;/span>
$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GITHUB_USER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;your_username&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># Use the following scripts to cherry-pick PR to release branch&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># For exmaple, to cherry-pick the PR with ID #8 to release/2.8.0&lt;/span>
$ ./scripts/cherry_pick_pull.sh upstream/release/2.8.0 &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># the cherry pick may have conflicts, please open a new terminal to resolve the conflicts, then input &amp;#39;Y&amp;#39; to continue the cherry-pick process&lt;/span>
$ git add xxx &lt;span style="color:#8f5902;font-style:italic"># resolve conflicts&lt;/span>
$ git am --continue
&lt;span style="color:#8f5902;font-style:italic"># go back to the terminal of cherry-pick, and input &amp;#39;Y&amp;#39; to continue the cherry-pick process&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Go to the Pull Requests of upstream &lt;a href="https://github.com/yunionio/yunioncloud/pulls">PR&lt;/a>, you will find the cherry-pick PR，the title of the chery-pick PR should look like: &lt;code>Automated cherry pick of #8: ...&lt;/code>, then procedure the reviwer process and merge the PR to the release branch.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">attention&lt;/h4>
Git commit should follow &lt;a href="../git-convention">Git Commit Convention&lt;/a>。
&lt;/div></description></item><item><title>Docs: Git Commit Message Convention</title><link>https://www.cloudpods.org/en/docs/contribute/git-convention/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/en/docs/contribute/git-convention/</guid><description>
&lt;p>For the purpose of word-processing the code change history, and statistics, we compile the following Git Commit Message Convention to regulate the format of Git Commit Message.&lt;/p>
&lt;h2 id="git-commit-message-convention">Git Commit Message Convention&lt;/h2>
&lt;p>Conform to the following format:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;lt;type&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&amp;lt;scope&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: &amp;lt;subject&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;footer&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The message is composed of three parts (part is separated by an empty line):&lt;/p>
&lt;ul>
&lt;li>Title: required, describing the type of modification and a concise summary of changes&lt;/li>
&lt;li>Content: optional, describing in details why the modification is need, how to change, the basic outline of codes, how to make the change take effect, etc.&lt;/li>
&lt;li>Notes: optional, some additional notes&lt;/li>
&lt;/ul>
&lt;p>The descriptions of tokens of each part are explained as following:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>type(type of PR:&lt;/p>
&lt;ul>
&lt;li>feat: new feature&lt;/li>
&lt;li>fix: bug fix&lt;/li>
&lt;li>refactor: recode, refactoring of codes&lt;/li>
&lt;li>test: test cases&lt;/li>
&lt;li>chore: modifications of helping scripts, such as Makefile, Dockerfile, etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>scope(components of impact): such as region, scheduler, cloudcommon, etc.，use comma &amp;lsquo;,&amp;rsquo; as separator if impacting multiple components, e.g. (region,scheduler,monitor)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>subject(concise summary of commit): no more than 50 characters&lt;/p>
&lt;/li>
&lt;li>
&lt;p>body(detailed description of commit, optional): can be multiple lines, each line contains no more than 72 characters&lt;/p>
&lt;/li>
&lt;li>
&lt;p>footer(some notes, optional): some notes, e.g. references, breaking change, upgrading suggestions or url of related tasks or issue&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="commit-examples">Commit Examples&lt;/h2>
&lt;hr>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">fix&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>region&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: compute NextSyncTime &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> snapshotpolicydisk
1. If calculated NextSyncTime equals to base, increase base by &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> hour to process recusively.
2. For snapshotpolicies with effective retentionday, e.g. a snapshotpolicy
takes effect on every Monday and the snapshots are kept &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> days automatically,
synchronization will be performed on every Month &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> snapshoting&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> and Thursday
&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> release snapshots&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">feat&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>scheduler&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: add cpu filter
Added new cpu filter to scheduler:
- filter host by cpu model
- &lt;span style="color:#204a87">set&lt;/span> host capability by request cpu count
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">fix&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>apigateway,monitor,influxdb&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: disable influxdb service query proxy
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">feat&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>climc&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: support disable wrap line
Usage:
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_TRY_TERM_WIDTH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">false&lt;/span>
climc server-list
Closes &lt;span style="color:#8f5902;font-style:italic">#6710&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.fpepsvr2gqby">https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.fpepsvr2gqby&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/noaman_wgs/article/details/103429171">https://blog.csdn.net/noaman_wgs/article/details/103429171&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>