<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloudpods –
开发相关</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/</link><description>Recent content in 开发相关 on Cloudpods</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://www.cloudpods.org//v3.8/zh/docs/development/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 搭建开发环境</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/dev-env/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/dev-env/</guid><description>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">说明&lt;/h4>
&lt;ul>
&lt;li>服务是以容器的方式运行在 Kubernetes(K8S) 集群里面的，所以开发调试需要部署一个 Kubernetes 集群&lt;/li>
&lt;li>后端服务都是用 Golang 编写，所以需要在开发环境安装 Golang&lt;/li>
&lt;li>为了把开发的服务发布到 Kubernetes 集群，需要在本地把相关服务构建成 docker 镜像&lt;/li>
&lt;li>开发环境最好都是在 Linux 上进行，安装使用 docker 和编译源码都很方便&lt;/li>
&lt;/ul>
&lt;/div>
&lt;p>接下来介绍如何搭建开发环境。&lt;/p>
&lt;h2 id="部署-cloudpods-服务">部署 Cloudpods 服务&lt;/h2>
&lt;p>在开始开发之前，请先参考 &lt;a href="../../quickstart/allinone">All in One 安装&lt;/a> 或者 &lt;a href="../../quickstart/minikube">MiniKube 安装&lt;/a> 部署 Cloudpods 服务。我们的服务全部使用容器的方式运行在 Kubernetes 集群里面，所以需要先搭建好我们的服务，把这个环境作为自己的开发环境。&lt;/p>
&lt;p>这里建议使用一个单独的 CentOS 7 虚拟机，配置(至少 4C8G + 100G 系统盘)，安装部署我们的服务。&lt;/p>
&lt;h2 id="安装-go">安装 Go&lt;/h2>
&lt;p>Golang 版本要求 1.15 以上&lt;/p>
&lt;p>安装 Golang 环境请参考： &lt;a href="https://golang.org/doc/install">Install Golang&lt;/a>&lt;/p>
&lt;h2 id="安装配置-docker">安装配置 Docker&lt;/h2>
&lt;p>因为要把服务打包成容器镜像，所以需要先安装 docker，这里的 docker 版本需要是 docker-ce 19.03 以上的版本。&lt;/p>
&lt;p>下面是不同操作系统和 Linux 发行版的安装方式，这里还是建议开发环境是 Linux 。&lt;/p>
&lt;h3 id="安装-docker">安装 Docker&lt;/h3>
&lt;ul class="nav nav-tabs" id="docker_install" role="tablist">&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link active" href="#docker_install-0" role="tab" aria-controls="docker_install-0" aria-selected="true">CentOS 7&lt;/a>&lt;/li>
&lt;/ul>
&lt;div class="tab-content" id="docker_install">&lt;div id="docker_install-0" class="tab-pane show active" role="tabpanel" aria-labelledby="docker_install-0">
&lt;p>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 1. 安装必要的一些系统工具&lt;/span>
sudo yum install -y yum-utils
&lt;span style="color:#8f5902;font-style:italic"># 2. 添加软件源信息&lt;/span>
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;span style="color:#8f5902;font-style:italic"># 3. 更新并安装 Docker CE&lt;/span>
sudo yum -y install docker-ce
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;/div>
&lt;h3 id="配置-docker">配置 Docker&lt;/h3>
&lt;p>后续的代码编译和打包使用了 &lt;a href="https://github.com/docker/buildx/">docker buildx&lt;/a> 的功能，需要做在让 docker daemon 开启 experimental 特性。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 在 docker daemon 的配置里面打开 experimental 特性&lt;/span>
$ cat /etc/docker/daemon.json
&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;experimental&amp;#34;&lt;/span>: &lt;span style="color:#204a87">true&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 重启 docker 服务&lt;/span>
$ systemctl restart docker
&lt;span style="color:#8f5902;font-style:italic"># 创建 buildx context&lt;/span>
$ docker buildx create --use --name build --node build --driver-opt &lt;span style="color:#000">network&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>host
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编译-cloudpods-组件">编译 cloudpods 组件&lt;/h2>
&lt;h3 id="fork-仓库">Fork 仓库&lt;/h3>
&lt;p>访问 &lt;a href="https://github.com/yunionio/cloudpods">https://github.com/yunionio/cloudpods&lt;/a> ，将仓库 fork 到自己的 github 用户下。&lt;/p>
&lt;h3 id="clone-源码">Clone 源码&lt;/h3>
&lt;p>git clone 前确保 GOPATH 等环境变量已经设置好，clone 你自己 fork 的仓库&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ git clone https://github.com/&amp;lt;your_name&amp;gt;/cloudpods &lt;span style="color:#000">$GOPATH&lt;/span>/src/yunion.io/x/cloudpods
$ &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$GOPATH&lt;/span>/src/yunion.io/x/cloudpods
$ git remote add upstream https://github.com/yunionio/cloudpods
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="二进制编译">二进制编译&lt;/h3>
&lt;p>编译是直接调用 go 编译器在本地编译出二进制，对应的 Makefile 规则为 &lt;code>make cmd/%&lt;/code> ，&lt;code>%&lt;/code> 对应的是 &lt;code>cmd&lt;/code> 目录里面的组件名称。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># cmd 目录下面存放着所有的组件:&lt;/span>
$ ls cmd
...
ansibleserver climc glance keystone qcloudcli ucloudcli
awscli cloudir host lbagent region webconsole
&lt;span style="color:#8f5902;font-style:italic"># 可以编译cmd下指定的组件，比如：编译 climc 和 region 组件&lt;/span>
$ make cmd/climc cmd/region
&lt;span style="color:#8f5902;font-style:italic"># 编译好的二进制会直接在 _output/bin 目录下面，查看编译好的二进制文件&lt;/span>
$ ls _output/bin
climc region
&lt;span style="color:#8f5902;font-style:italic"># 编译所有组件&lt;/span>
$ make
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="docker-镜像编译上传">Docker 镜像编译上传&lt;/h3>
&lt;p>通常我们的开发流程是写完代码，把相应服务打包生成 docker 镜像，然后发布到自己搭建的 Kubernetes 集群里面测试。
下面说明如何生成 docker 镜像。&lt;/p>
&lt;p>生成好的 docker 镜像需要上传的镜像仓库，这里以 &lt;a href="https://cn.aliyun.com/product/acr">Aliyun 的容器镜像服务&lt;/a> 为例，比如我在 aliyun 创建了一个公开的命令空间，仓库地址为: &lt;code>registry.cn-beijing.aliyuncs.com/zexi&lt;/code> 。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 在本地登录镜像仓库，这里以你自己的镜像仓库为准&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 需要先用自己的 aliyun 帐号登录下，后面容器镜像的上传就不需要密码了&lt;/span>
$ docker login registry.cn-beijing.aliyuncs.com/zexi
......
Login Succeeded
&lt;/code>&lt;/pre>&lt;/div>&lt;p>准备好镜像仓库后，就可以开始打包上传镜像了，这些步骤是通过 Makefile 的 image 规则来执行的。&lt;/p>
&lt;p>这里有以下环境变量用来控制制作镜像的内容：&lt;/p>
&lt;ul>
&lt;li>REGISTRY: 对应镜像上传的仓库&lt;/li>
&lt;li>VERSION: 用于生成镜像的 tag&lt;/li>
&lt;li>ARCH: 对应 docker 镜像的 arch，可设置成 &amp;lsquo;arm64&amp;rsquo; 或者 &amp;lsquo;all&amp;rsquo;
&lt;ul>
&lt;li>arm64: 编译打包制作 arm64 的 docker 镜像&lt;/li>
&lt;li>all: 编译打包制作 amd64 和 arm64 的镜像&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DEBUG: 如果设置为 true 会显示打包步骤&lt;/li>
&lt;/ul>
&lt;p>根据 REGISTRY 和 VERSION 这两个环境变量，会生成各个组件的镜像地址，格式是:
&lt;code>$(REGISTRY)/$(component):$VERSION&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 将 region 服务编译并制作成 docker 镜像&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 然后上传到 registry.cn-beijing.aliyuncs.com/zexi/region:dev&lt;/span>
$ &lt;span style="color:#000">VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>dev &lt;span style="color:#000">REGISTRY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>registry.cn-beijing.aliyuncs.com/zexi make image region
&lt;span style="color:#8f5902;font-style:italic"># 编译多个组件，并上传，以下命令会上传以下的组件&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># - registry.cn-beijing.aliyuncs.com/zexi/ansibleserver:dev&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># - registry.cn-beijing.aliyuncs.com/zexi/apigateway:dev&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># - registry.cn-beijing.aliyuncs.com/zexi/region:dev&lt;/span>
$ &lt;span style="color:#000">VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>dev &lt;span style="color:#000">REGISTRY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>registry.cn-beijing.aliyuncs.com/zexi make image &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> ansibleserver apigateway region
&lt;span style="color:#8f5902;font-style:italic"># 编译 arm64 的镜像，如果指定了 ARCH=arm64 ，则会在对应镜像的末尾加上 &amp;#39;-arm64&amp;#39; 的后缀&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># - registry.cn-beijing.aliyuncs.com/yunionio/scheduler:dev-arm64&lt;/span>
$ &lt;span style="color:#000">VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>dev &lt;span style="color:#000">REGISTRY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>registry.cn-beijing.aliyuncs.com/zexi &lt;span style="color:#000">ARCH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>arm64 make image scheduler
&lt;span style="color:#8f5902;font-style:italic"># 编译 amd64 + arm64 的镜像，指定 ARCH=all，这里不会添加后缀，会在镜像名里面包含两个架构的版本&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># - registry.cn-beijing.aliyuncs.com/yunionio/cloudid:dev&lt;/span>
$ &lt;span style="color:#000">VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>dev &lt;span style="color:#000">REGISTRY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>registry.cn-beijing.aliyuncs.com/zexi &lt;span style="color:#000">ARCH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>all make image cloudid
&lt;span style="color:#8f5902;font-style:italic"># 同时编译多个多架构的组件，并上传&lt;/span>
$ &lt;span style="color:#000">VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>dev &lt;span style="color:#000">ARCH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>all &lt;span style="color:#000">REGISTRY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>registry.cn-beijing.aliyuncs.com/zexi make image &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> ansibleserver apigateway baremetal-agent climc cloudevent &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> cloudnet devtool esxi-agent glance host host-deployer keystone &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> logger notify region s3gateway scheduler webconsole yunionconf &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> vpcagent monitor region-dns cloudid
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="开发调试">开发调试&lt;/h2>
&lt;p>开发调试的通常步骤是，写好代码后，使用之前说的 &lt;a href="#docker-%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91%E4%B8%8A%E4%BC%A0">make image&lt;/a> 规则打包上传对应服务的 docker 镜像，然后将镜像发布到自己的 Kubernetes 集群进行测试。&lt;/p>
&lt;h3 id="将镜像发布到-kubernetes-集群">将镜像发布到 Kubernetes 集群&lt;/h3>
&lt;p>后端的服务都运行在 Kubernetes 的 onecloud namespace 里面，可以通过以下命令查看对应的 Kubernetes 资源。我们的服务使用以下的 Kubernetes 资源进行服务的管理。&lt;/p>
&lt;ul>
&lt;li>deployment: 管理大部分的服务，这种服务会在 Kubernetes 的任意一个 master 节点启动，比如: region, apigateway 服务等&lt;/li>
&lt;li>daemonset: 管理需要在每个 Kubernetes 节点都启动的服务，比如: host 服务(私有云计算节点服务)&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">说明&lt;/h4>
&lt;p>另外需要简单了解下 Kubernetes pod 这种资源，pod 是实际运行容器的集合，是 Kubernetes 里面运行容器化服务的最小单元，一个 pod 里面可以运行多个容器，每个容器都有自己对应的镜像。&lt;/p>
&lt;p>其它 Kubernetes 资源介绍可参考官方的 &lt;a href="https://kubernetes.io/zh/docs/concepts/workloads/">工作负载介绍&lt;/a>。&lt;/p>
&lt;/div>
&lt;p>下面是使用 kubectl(Kubernetes 命令行工具) 查看各个服务对应资源的命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查看 onecloud 命令空间下面的 deployment&lt;/span>
$ kubectl -n onecloud get deployment
&lt;span style="color:#8f5902;font-style:italic"># 查看 onecloud 命令空间下面的 daemonset&lt;/span>
$ kubectl -n onecloud get daemonset
&lt;span style="color:#8f5902;font-style:italic"># 查看 onecloud 命名空间下面的 pods&lt;/span>
$ kubectl -n onecloud get pod
&lt;/code>&lt;/pre>&lt;/div>&lt;p>对 Kubernetes 资源有了大概了解后，接下来的步骤就是把刚才打包的服务镜像发布到集群里面对应的服务，这里以 region 这个服务为例。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 先在本地编译打包 region 镜像&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 会在 aliyun 生成镜像: registry.cn-beijing.aliyuncs.com/zexi/region:dev-test&lt;/span>
$ &lt;span style="color:#000">VERSION&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>dev-test &lt;span style="color:#000">REGISTRY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>registry.cn-beijing.aliyuncs.com/zexi make image region
&lt;span style="color:#8f5902;font-style:italic"># 找到 region 服务对应的 kubernetes 资源名称&lt;/span>
$ kubectl get deployment -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep region
default-region 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 90d
&lt;span style="color:#8f5902;font-style:italic"># 更新 default-region deployment 资源里面 image 属性&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 然后对应的 default-region 的 pod 就会自动拉取镜像重启&lt;/span>
$ kubectl -n onecloud edit deployment default-region
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>kubectl -n onecloud edit deployment default-region&lt;/code> 命令后，进入编辑资源 YAML 属性的步骤，只需要将里面的 &lt;code>image&lt;/code> 属性修改成 aliyun 对应镜像地址，截图如下：&lt;/p>
&lt;p>&lt;img src="../images/kubectl-edit-image.png" alt="">&lt;/p>
&lt;p>修改完后保存退出，就会拉取刚才指定的镜像创建新的 region pod，删除旧的。可以再次查看 region pod 的当前状态。&lt;/p>
&lt;p>&lt;img src="../images/kubectl-get-region-pod.png" alt="">&lt;/p>
&lt;h3 id="查看服务输出日志">查看服务输出日志&lt;/h3>
&lt;p>可以使用 &lt;code>kubectl log&lt;/code> 命令查看对应 pod 的输出日志，这里以刚才发布的 region pod 为例。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 先找到 region 服务对应的 pod&lt;/span>
$ kubectl get pods -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep region
default-region-6bd8c54d68-sq4gq 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 101m
&lt;span style="color:#8f5902;font-style:italic"># 查看日志&lt;/span>
$ kubectl logs -n onecloud default-region-6bd8c54d68-sq4gq
&lt;span style="color:#8f5902;font-style:italic"># 把日志重定向到文件 /tmp/region.log&lt;/span>
$ kubectl logs -n onecloud default-region-6bd8c54d68-sq4gq &amp;gt; /tmp/region.log
&lt;span style="color:#8f5902;font-style:italic"># 流式查看日志，类似于 &amp;#39;tail -f&amp;#39;&lt;/span>
$ kubectl logs -n onecloud default-region-6bd8c54d68-sq4gq -f
&lt;span style="color:#8f5902;font-style:italic"># 查看 5 分钟前的日志&lt;/span>
$ kubectl logs -n onecloud default-region-6bd8c54d68-sq4gq -f --since 5m
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装配置-climc">安装配置 climc&lt;/h3>
&lt;p>climc 是访问后端的命令行工具，可以通过该工具向后端各个服务发送API请求，日常开发中会使用改命令行工具进行功能验证和调试，安装和使用方法参考下面的连接。&lt;/p>
&lt;p>climc 的本地安装参考: &lt;a href="../../climc/#%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85">源码编译安装&lt;/a>&lt;/p>
&lt;p>climc 的本地配置参考: &lt;a href="../../climc/#%E9%9D%9E%E6%8E%A7%E5%88%B6%E8%8A%82%E7%82%B9%E8%AE%A4%E8%AF%81%E9%85%8D%E7%BD%AE">非控制节点认证配置&lt;/a>&lt;/p>
&lt;p>climc 的使用简介参考: &lt;a href="../../climc/#%E4%BD%BF%E7%94%A8">climc 使用&lt;/a>&lt;/p>
&lt;h2 id="快速开发调试">快速开发调试&lt;/h2>
&lt;p>我们的服务都已经容器化运行在 Kubernetes 集群中，使用上面说的 &lt;strong>&amp;ldquo;制作docker镜像-&amp;gt;发布到集群&amp;rdquo;&lt;/strong> 的开发流程有些长，对于快速开发调试并不方便。&lt;/p>
&lt;p>通过 &lt;a href="https://www.telepresence.io">Telepresence&lt;/a> 提供远程 Kubernetes 连接信息上下文，可以在本地开发调试。下面介绍使用 Telepresence 进行本地快速开发。&lt;/p>
&lt;h3 id="安装配置-kubectl">安装配置 kubectl&lt;/h3>
&lt;p>需要在本地安装 &lt;a href="https://kubernetes.io/zh/docs/tasks/tools/install-kubectl/">kubectl&lt;/a>。&lt;/p>
&lt;p>需要在本地配置好集群信息，以通过 kubectl 访问；将 cloudpods 控制节点上的&lt;code>$KUBECONFIG&lt;/code>文件拷贝到本地&lt;code>~/.kube/config&lt;/code>;
如果本地已经有此文件，参考 &lt;a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/configure-access-multiple-clusters/">配置多集群访问&lt;/a> 进行合并。&lt;/p>
&lt;h3 id="安装-telepresence">安装 telepresence&lt;/h3>
&lt;p>这里介绍 CentOS 7 的本地环境安装，其他发行版可参考官方文档：&lt;a href="https://www.telepresence.io/reference/install">Installing Telepresence&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>不建议K8S集群的部署和开发在同一个环境，使用Telepresence会有端口冲突。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 安装依赖&lt;/span>
$ yum install -y python3 sshfs conntrack iptables torsocks sshuttle sudo yum-utils
&lt;span style="color:#8f5902;font-style:italic"># 安装 kubectl 用于连接 K8S 集群&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/yum.repos.d/kubernetes.repo
&lt;/span>&lt;span style="color:#4e9a06">[kubernetes]
&lt;/span>&lt;span style="color:#4e9a06">name=Kubernetes
&lt;/span>&lt;span style="color:#4e9a06">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
&lt;/span>&lt;span style="color:#4e9a06">enabled=1
&lt;/span>&lt;span style="color:#4e9a06">gpgcheck=0
&lt;/span>&lt;span style="color:#4e9a06">repo_gpgcheck=0
&lt;/span>&lt;span style="color:#4e9a06">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ yum install -y kubectl-1.15.12-0
&lt;span style="color:#8f5902;font-style:italic"># 需要自行配置kubctl config&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 测试kubctl可以访问之前部署的K8S集群&lt;/span>
$ kubctl version
&lt;span style="color:#8f5902;font-style:italic"># 源码安装 telepresence 到 /usr/local/bin/telepresence&lt;/span>
$ git clone https://github.com/telepresenceio/telepresence
$ &lt;span style="color:#204a87">cd&lt;/span> telepresence
$ git checkout 0.109
$ sed -i &lt;span style="color:#4e9a06">&amp;#39;s/https:\/\/github.com\/datawire\/sshuttle.git/git@github.com:datawire\/sshuttle.git/g&amp;#39;&lt;/span> packaging/build-sshuttle.py
$ sudo env &lt;span style="color:#000">PREFIX&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/usr/local ./install.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用">使用&lt;/h3>
&lt;p>利用 telepresence 本地连通远端 K8S 的特性，我们就可以做到在本地编译运行 region，keystone 等服务，同时又能访问远端 K8S 其它服务的环境。&lt;/p>
&lt;p>&lt;strong>macOS 或 linux 中本地编译运行 region 服务&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 切换到 cloudpods 代码目录&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$GOPATH&lt;/span>/src/yunion.io/x/cloudpods
&lt;span style="color:#8f5902;font-style:italic"># 编译 region 服务&lt;/span>
$ make cmd/region
&lt;span style="color:#8f5902;font-style:italic"># 使用 telepresence 替换 K8S 里面的 default-region deployment&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 该命令在 K8S 集群中启动一个 deployment 替换掉原来的 default-regoin&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 然后把流量的访问导向本地&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 如果想要使用特定的 shell，比如 zsh，可以在后面加上&amp;#34;--run /bin/zsh&amp;#34;&lt;/span>
$ telepresence --swap-deployment default-region --namespace onecloud
&lt;/code>&lt;/pre>&lt;/div>&lt;p>到这里已经进入到 telepresence 隔离的 namespace 里面了，
$TELEPRESENCE_ROOT 这个目录 是通过 sshfs 挂载的远端 K8S pod 的文件系统。
接下来我们就可以在这个 namespace 里面运行 region 服务了：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ sudo chmod &lt;span style="color:#0000cf;font-weight:bold">777&lt;/span> /etc
&lt;span style="color:#8f5902;font-style:italic"># 将 $TELEPRESENCE_ROOT/etc/yunion 链接到本地的 /etc&lt;/span>
$ ln -s &lt;span style="color:#000">$TELEPRESENCE_ROOT&lt;/span>/etc/yunion /etc
&lt;span style="color:#8f5902;font-style:italic"># 启动 region 服务&lt;/span>
$ ./_output/bin/region --config /etc/yunion/region.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个时候如果我们在外部调用 climc 就会发现相关的请求已经被转发到本地开发机启动 region 服务了。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc network-list
&lt;/code>&lt;/pre>&lt;/div>&lt;p>调试完成后需要进行清理操作&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 退出 telepresence&lt;/span>
$ &lt;span style="color:#204a87">exit&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 会看到类似下面的输出&lt;/span>
T: Your process exited with &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> code 127.
T: Exit cleanup in progress
T: Cleaning up Pod
&lt;span style="color:#8f5902;font-style:italic"># 删除链接文件&lt;/span>
$ rm /etc/yunion
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Linux系统中本地编译运行 region 服务&lt;/strong>&lt;/p>
&lt;p>这种方式相比上一种方式，更加干净；但是相对复杂&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 切换到 cloudpods 代码目录&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$GOPATH&lt;/span>/src/yunion.io/x/cloudpods
&lt;span style="color:#8f5902;font-style:italic"># 编译 region 服务&lt;/span>
$ make cmd/region
&lt;span style="color:#8f5902;font-style:italic"># 使用 telepresence 替换 K8S 里面的 default-region deployment&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 该命令在 K8S 集群中启动一个 deployment 替换掉原来的 default-regoin&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 然后把流量的访问导向本地&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 如果想要使用特定的 shell，比如 zsh，可以在后面加上&amp;#34;--run /bin/zsh&amp;#34;&lt;/span>
$ telepresence --swap-deployment default-region --namespace onecloud
&lt;/code>&lt;/pre>&lt;/div>&lt;p>到这里已经进入到 telepresence 隔离的 namespace 里面了，
$TELEPRESENCE_ROOT 这个目录 是通过 sshfs 挂载的远端 K8S pod 的文件系统。
接下来我们就可以在这个 namespace 里面运行 region 服务了：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 设置 max_user_namespaces&lt;/span>
$ cat /proc/sys/user/max_user_namespaces
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 如果 max_user_namespaces 为 0，需要设置下 user_namespaces&lt;/span>
$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">640&lt;/span> &amp;gt; /proc/sys/user/max_user_namespaces
&lt;span style="color:#8f5902;font-style:italic"># 启动一个新的 namespace , 但不共享 mount namespace，这样接下来的 mount bind 操作就不会影响到宿主机&lt;/span>
$ unshare --map-root-user --mount
&lt;span style="color:#8f5902;font-style:italic"># bind K8S /var/run/secrets&lt;/span>
$ mount --bind &lt;span style="color:#000">$TELEPRESENCE_ROOT&lt;/span>/var/run /var/run
$ ls /var/run/
secrets
&lt;span style="color:#8f5902;font-style:italic"># bind cloudpods config&lt;/span>
$ mkdir /etc/yunion
$ mount --bind &lt;span style="color:#000">$TELEPRESENCE_ROOT&lt;/span>/etc/yunion /etc/yunion
$ ls /etc/yunion/
pki region.conf
&lt;span style="color:#8f5902;font-style:italic"># 启动 region 服务&lt;/span>
$ ./_output/bin/region --config /etc/yunion/region.conf
&lt;span style="color:#8f5902;font-style:italic"># 这个时候如果我们在外部调用 climc&lt;/span>
$ climc network-list
&lt;span style="color:#8f5902;font-style:italic"># 就会发现相关的请求已经被转发到本地开发机启动 region 服务了&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>更多用法，以及 telepresence 的原理请参考&lt;a href="https://www.telepresence.io/discussion/overview">官方文档&lt;/a>。&lt;/p>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;h3 id="1-开发环境是-windows-或者-macos怎么开发">1. 开发环境是 windows 或者 macOS，怎么开发？&lt;/h3>
&lt;p>因为我们的服务最后会运行在基于 CentOS 7 搭建的 K8S 集群里面，所以日常的开发和打包中一般都是在 CentOS 7 里面做的。&lt;/p>
&lt;p>如果开发环境是 windows ，可以在 windows 里面写代码，然后创建一个 CentOS 7 的虚拟机，在虚拟机里面把开发环境搭建好，写完代码利用 &lt;code>rsync&lt;/code> 等同步工具，把修改的代码增量拷贝到虚拟机中，然后进行打包发布等流程。&lt;/p>
&lt;p>对于 Mac 上的 macOS 也是类似的，可以使用和 windows 开发一样的流程。但 macOS 里开发和 Linux 里面开发差异没有很大，在 macOS 里面安装好对应的命令行工具和 docker 后，就可以直接使用 &lt;code>make image&lt;/code> 相关的规则打包生成 docker 镜像了。&lt;/p>
&lt;h3 id="2-本地调试启动-region-服务报以下错误">2. 本地调试启动 region 服务，报以下错误&lt;/h3>
&lt;p>&lt;img src="../images/region_error.png" alt="">&lt;/p>
&lt;p>使用&lt;code>climc service-config-edit region2&lt;/code>编辑 region 服务的配置，修改参数：&lt;/p>
&lt;blockquote>
&lt;pre>&lt;code>fetch_etcd_service_info_and_use_etcd_lock: false
enable_host_health_check: false
&lt;/code>&lt;/pre>
&lt;/blockquote>
&lt;h3 id="3-使用-telepresence-时上次未正常退出再次使用一直报错">3. 使用 telepresence 时，上次未正常退出，再次使用一直报错&lt;/h3>
&lt;p>尝试手动清理:&lt;/p>
&lt;ol>
&lt;li>使用 kubectl 删除 onecloud namespace 下除 default-region-dns-xxxxx 外，所有以 default-region 开头的Pod；&lt;/li>
&lt;li>使用&lt;code>kubectl edit deployment default-region -n onecloud&lt;/code>，将 spec 下的 replicas 从0改为1.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 可以编译cmd下制定的组件，比如：编译 region 和 host 组件&lt;/span>
$ make cmd/region cmd/host
&lt;span style="color:#8f5902;font-style:italic"># 查看编译好的二进制文件&lt;/span>
$ ls _output/bin
region host
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-本地直接运行-make-cmdhost-会出现-ceph-依赖的报错">4. 本地直接运行 &lt;code>make cmd/host&lt;/code> 会出现 ceph 依赖的报错&lt;/h3>
&lt;p>host 组件是私有云里面管理虚拟机的一个关键组件，依赖了 cephfs, rbd 和 rados 相关的库，如果是本地直接编译，则需要安装对应的依赖，操作如下：&lt;/p>
&lt;ul class="nav nav-tabs" id="host_dep_install" role="tablist">&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link active" href="#host_dep_install-0" role="tab" aria-controls="host_dep_install-0" aria-selected="true">CentOS 7&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#host_dep_install-1" role="tab" aria-controls="host_dep_install-1">Ubuntu 20.04&lt;/a>&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="host_dep_install">&lt;div id="host_dep_install-0" class="tab-pane show active" role="tabpanel" aria-labelledby="host_dep_install-0">
&lt;p>&lt;p>On rpm based systems (dnf, yum, etc):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo rpm --import https://download.ceph.com/keys/release.asc
sudo yum install -y https://download.ceph.com/rpm-luminous/el7/noarch/ceph-release-1-1.el7.noarch.rpm
sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
sudo yum install -y libcephfs-devel librbd-devel librados-devel
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="host_dep_install-1" class="tab-pane" role="tabpanel" aria-labelledby="host_dep_install-1">
&lt;p>&lt;p>On debian systems (apt):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">wget -q -O- &lt;span style="color:#4e9a06">&amp;#39;https://download.ceph.com/keys/release.asc&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> sudo apt-key add -
&lt;span style="color:#204a87">echo&lt;/span> deb https://download.ceph.com/debian-luminous/ &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>lsb_release -sc&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> main &lt;span style="color:#000;font-weight:bold">|&lt;/span> sudo tee /etc/apt/sources.list.d/ceph.list
apt-get update &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> apt-get install -y libcephfs-dev librbd-dev librados-dev
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;/div></description></item><item><title>Docs: 提交贡献代码</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/contrib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/contrib/</guid><description>
&lt;h2 id="fork-仓库">Fork 仓库&lt;/h2>
&lt;p>访问 &lt;a href="https://github.com/yunionio/cloudpods">https://github.com/yunionio/cloudpods&lt;/a> ，将仓库 fork 到自己的 github 用户下。&lt;/p>
&lt;h2 id="clone-源码">Clone 源码&lt;/h2>
&lt;p>clone 自己 fork 的仓库，并设置 upstream 为源仓库。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/&amp;lt;your_name&amp;gt;/cloudpods
$ &lt;span style="color:#204a87">cd&lt;/span> cloudpods
$ git remote add upstream https://github.com/yunionio/cloudpods
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="提交代码流程">提交代码流程&lt;/h2>
&lt;ul>
&lt;li>从 master checkout 出 feature 或者 bugfix 分支&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># checkout 新分支&lt;/span>
$ git fetch upstream --tags
$ git checkout -b feature/implement-x upstream/master
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在新的分支上进行开发&lt;/li>
&lt;li>开发完成后，进行提交PR前的准备操作&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git fetch upstream &lt;span style="color:#8f5902;font-style:italic"># 同步远程 upstream master 代码&lt;/span>
$ git rebase upstream/master &lt;span style="color:#8f5902;font-style:italic"># 有冲突则解决冲突&lt;/span>
$ git push origin feature/implement-x &lt;span style="color:#8f5902;font-style:italic"># push 分支到自己的 repo&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在GitHub的Web界面完成提交PR的流程&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/submitPR.png" alt="">&lt;/p>
&lt;ul>
&lt;li>提完 PR 后请求相关开发人员 review，并设置Labels来表明提交的代码属于哪一个模块或者哪几个模块&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/reviewer_label.png" alt="">&lt;/p>
&lt;ul>
&lt;li>或者通过添加评论的方式来完成上一步；评论 &amp;ldquo;/cc&amp;rdquo; 并 @ 相关人员完成设置reviewer，评论/area 并填写label完成设置Labels&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/robot_review_label.png" alt="">&lt;/p>
&lt;p>​ 所有Label都可以在issues——Labels下查询到，带area/前缀的Label均可以使用评论&amp;quot;/area&amp;quot;的形式添加&lt;/p>
&lt;ul>
&lt;li>如果是 bugfix 或者需要合并到之前 release 分支的 feature PR，需要额外使用脚本将此PR cherry-pick 到对应的 release 分支&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 自行下载安装 github 的 cli 工具：https://github.com/github/hub&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># OSX 使用: brew install hub&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Debian: sudo apt install hub&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 二进制安装: https://github.com/github/hub/releases&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 设置github的用户名&lt;/span>
$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GITHUB_USER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;your_username&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 使用脚本自动 cherry-pick PR 到 release 分支&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 比如现在有一个提交的PR的编号为18，要把它合并到 release/3.4&lt;/span>
$ ./scripts/cherry_pick_pull.sh upstream/release/3.4 &lt;span style="color:#0000cf;font-weight:bold">18&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># cherry pick 可能会出现冲突，冲突时开另外一个 terminal，解决好冲突，再输入 &amp;#39;y&amp;#39; 进行提交&lt;/span>
$ git add xxx &lt;span style="color:#8f5902;font-style:italic"># 解决完冲突后&lt;/span>
$ git am --continue
&lt;span style="color:#8f5902;font-style:italic"># 回到执行 cherry-pick 脚本的 terminal 输入 &amp;#39;y&amp;#39; 即可&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>去 upstream 的 &lt;a href="https://github.com/yunionio/cloudpods/pulls">PR 页面&lt;/a>, 就能看到自动生成的 cherry-pick PR，上面操作的PR的标题前缀就应该为：&lt;code>Automated cherry pick of #18&lt;/code>，然后重复 PR review 流程合并到 release&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
提交 git 代码后需要书写 commit 内容，规范请参考: &lt;a href="../git-convention">Git 提交内容规范&lt;/a>。
&lt;/div></description></item><item><title>Docs: Git 提交内容规范</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/git-convention/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/git-convention/</guid><description>
&lt;p>为了方便代码提交记录的查看，以及以后的统计，我们制定了以下使用 Git 书写提交内容的规范，提交代码的时候请大家遵循以下的格式。&lt;/p>
&lt;h2 id="git-提交记录书写规范">Git 提交记录书写规范&lt;/h2>
&lt;p>格式如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;lt;type&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&amp;lt;scope&amp;gt;&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: &amp;lt;subject&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;footer&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>git commit&lt;/code> 命令填写的提交内容应该类似如上的结构，大致分为３个部分（每个部分使用空行分割）：&lt;/p>
&lt;ul>
&lt;li>标题行：必填，描述主要修改类型和概要内容&lt;/li>
&lt;li>主题内容：选填，描述为什么修改，做了什么样的修改，以及开发的思路，使用方法等等&lt;/li>
&lt;li>页脚备注：选填，一些备注&lt;/li>
&lt;/ul>
&lt;p>每个部分的占位符说明如下:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>type(PR 的类型):&lt;/p>
&lt;ul>
&lt;li>feat: 新功能&lt;/li>
&lt;li>fix: 修复&lt;/li>
&lt;li>refactor: 代码重构&lt;/li>
&lt;li>test: 测试用例相关修改&lt;/li>
&lt;li>chore: 其它修改，比如Makefile,Dockerfile等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>scope(影响范围，相关组件): 比如 region, scheduler, cloudcommon，如果是多个组件，用英文 &amp;lsquo;,&amp;rsquo; 分割，比如: (region,scheduler,monitor)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>subject(commit 的概述): 建议不超过 50 个字符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>body(commit 具体修改内容): 可以分为多行，建议每行不超过 72 个字符&lt;/p>
&lt;/li>
&lt;li>
&lt;p>footer(一些备注，选填): 一些备注，通常是相关参考连接、BREAKING CHANGE 或修复 bug 的连接&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="commit-举例">Commit 举例&lt;/h2>
&lt;hr>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">fix&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>region&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: compute NextSyncTime &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> snapshotpolicydisk
1. 如果计算出来的 NextSyncTime 和 base 相等，可以将 base 加1一个小时递归处理。
2. 对于 retentionday 有效的快照策略，比如某一个 snaphsotpolicy
是每周一生效，并且打的快照自动保留 &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> 天，那么，就应该在每周一（打快照）
和每周四（释放快照）进行快照的同步。
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">feat&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>scheduler&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: add cpu filter
Added new cpu filter to scheduler:
- filter host by cpu model
- &lt;span style="color:#204a87">set&lt;/span> host capability by request cpu count
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">fix&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>apigateway,monitor,influxdb&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: disable influxdb service query proxy
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">feat&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>climc&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>: support disable wrap line
Usage:
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_TRY_TERM_WIDTH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">false&lt;/span>
climc server-list
Closes &lt;span style="color:#8f5902;font-style:italic">#6710&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="辅助工具">辅助工具&lt;/h2>
&lt;p>也有相应的工具帮忙生成符合要求的 Commit message，使用 &lt;a href="https://github.com/lintingzhen/commitizen-go">commitizen-go&lt;/a> 可以协助生成 Commit message，用法如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># osx 安装 commitizen-go&lt;/span>
$ brew tap lintingzhen/tap
$ brew install commitizen-go
&lt;span style="color:#8f5902;font-style:italic"># 如果是 linux 环境，可以 clone 源码编译，这个工具是 golang 写的，编译也简单&lt;/span>
$ git clone https://github.com/lintingzhen/commitizen-go &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> commitizen-go
$ make &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> ./commitizen-go install
&lt;span style="color:#8f5902;font-style:italic"># 这一部会生成 git cz 命令的配置&lt;/span>
$ sudo commitizen-go install
&lt;span style="color:#8f5902;font-style:italic"># 测试提交&lt;/span>
$ git add .
&lt;span style="color:#8f5902;font-style:italic"># 使用 git cz 命令，就会以交互式的方式帮忙输入 commit&lt;/span>
$ git cz
&lt;/code>&lt;/pre>&lt;/div>&lt;p>相关配置参考：https://github.com/lintingzhen/commitizen-go/blob/master/README.MD#configure&lt;/p>
&lt;p>当然工具并不是说强制使用，只是说有工具的帮助，生成的 commit 内容会更统一一点　;)&lt;/p>
&lt;p>当然也有 nodejs 版本的工具，可能更符合前端的使用: &lt;a href="https://github.com/commitizen/cz-cli">https://github.com/commitizen/cz-cli&lt;/a> ，前端的同学也可以使用这个工具。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.fpepsvr2gqby">https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.fpepsvr2gqby&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/noaman_wgs/article/details/103429171">https://blog.csdn.net/noaman_wgs/article/details/103429171&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 手动部署开发集群</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/single_service_dev/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/single_service_dev/</guid><description>
&lt;p>本文介绍手工部署用于开发测试用途的服务集群的步骤。&lt;/p>
&lt;h2 id="适用人群">适用人群&lt;/h2>
&lt;ul>
&lt;li>想要断点调试&lt;/li>
&lt;li>虚拟机配置低&lt;/li>
&lt;li>不想使用docker打包镜像&lt;/li>
&lt;li>想要在macOS/Linux上直接开发&lt;/li>
&lt;/ul>
&lt;h2 id="已知问题">已知问题&lt;/h2>
&lt;ul>
&lt;li>macOS上调试不了host服务&lt;/li>
&lt;li>配置复杂&lt;/li>
&lt;/ul>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;p>这里以Debain 11环境为例，仅配置nginx, apigateway, keystone, region等服务组成的最小集群，其他服务可以根据需要自行添加。&lt;/p>
&lt;ul>
&lt;li>Linux 或 macOS&lt;/li>
&lt;li>4核8G&lt;/li>
&lt;/ul>
&lt;h3 id="基础软件安装">基础软件安装&lt;/h3>
&lt;ul>
&lt;li>nginx&lt;/li>
&lt;li>MariaDB 5.5 或 MySQL 5.7&lt;/li>
&lt;li>git, make, npm, yarn, curl&lt;/li>
&lt;li>go 1.15&lt;/li>
&lt;/ul>
&lt;h3 id="源码克隆">源码克隆&lt;/h3>
&lt;p>这里假设克隆源码的目录分别为 &lt;strong>/root/cloudpods&lt;/strong> &lt;strong>/root/dashboard&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 克隆后端源代码&lt;/span>
$ git clone https://github.com/yunionio/cloudpods.git
&lt;span style="color:#8f5902;font-style:italic"># 这里需要将代码切到自己想要的分支，这里设为 release/3.9&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> cloudpods &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> git checkout release/3.9 &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> /root
&lt;span style="color:#8f5902;font-style:italic"># 克隆前端源代码&lt;/span>
$ git clone https://github.com/yunionio/dashboard.git
&lt;span style="color:#8f5902;font-style:italic"># 前端代码分支需要和后端保持一致&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> dashboard &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> git checkout release/3.9 &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> /root
&lt;span style="color:#8f5902;font-style:italic"># 创建配置文件放置目录&lt;/span>
$ mkdir -p /etc/yunion
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动nginx及数据库服务">启动nginx及数据库服务&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now nginx mariadb
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="认证服务keystone初始化">认证服务（keystone）初始化&lt;/h2>
&lt;p>第一个要起的服务是keystone，因为其他服务都依赖于认证服务&lt;/p>
&lt;ol>
&lt;li>首先配置keystone的数据库&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 为keystone服务创建数据库及数据库账号&lt;/span>
$ mysql -uroot -e &lt;span style="color:#4e9a06">&amp;#39;create database keystone;&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 这里设置一个密码为cloudpods-keystone的keystone用户，后面配置文件会用到&lt;/span>
$ mysql -uroot -e &lt;span style="color:#4e9a06">&amp;#39;grant all privileges on keystone.* to &amp;#34;keystone&amp;#34;@&amp;#34;%&amp;#34; identified by &amp;#34;cloudpods-keystone&amp;#34;; flush privileges;&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>下面配置keystone服务&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 编译keysonte&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> /root/cloudpods &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> make cmd/keystone
&lt;span style="color:#8f5902;font-style:italic"># 编写keystone服务的配置文件&lt;/span>
$ mkdir -p /etc/yunion/keystone
&lt;span style="color:#8f5902;font-style:italic"># 这里要注意使用刚创建的数据库及数据库账号密码&lt;/span>
$ cat&lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/yunion/keystone/keystone.conf
&lt;/span>&lt;span style="color:#4e9a06">address = &amp;#39;127.0.0.1&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">port = 5000
&lt;/span>&lt;span style="color:#4e9a06">admin_port = 35357
&lt;/span>&lt;span style="color:#4e9a06">sql_connection = &amp;#39;mysql+pymysql://keystone:cloudpods-keystone@localhost:3306/keystone?charset=utf8&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">log_level = &amp;#39;debug&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">auto_sync_table = true
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ 初始化配置
&lt;span style="color:#8f5902;font-style:italic"># 这里会先根据配置初始化keystone的数据库表，并设置sysadmin用户密码，这里设置为123@admin 后面会用到&lt;/span>
$ /root/cloudpods/_output/bin/keystone --conf /etc/yunion/keystone/keystone.conf --bootstrap-admin-user-password 123@admin --exit-after-db-init
&lt;span style="color:#8f5902;font-style:italic"># 启动keystone服务&lt;/span>
$ /root/cloudpods/_output/bin/keystone --conf /etc/yunion/keystone/keystone.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>配置keystone服务&lt;/li>
&lt;/ol>
&lt;h2 id="climc-初始化">climc 初始化&lt;/h2>
&lt;p>认证服务完成后，需要用climc进行部分操作&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 编译climc命令, 并放置到可执行环境目录里面&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> /root/cloudpods &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> make cmd/climc &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> cp /root/cloudpods/_output/bin/climc /usr/local/bin/
&lt;span style="color:#8f5902;font-style:italic"># 编写rc_admin文件&lt;/span>
$ cat&lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/yunion/rc_admin
&lt;/span>&lt;span style="color:#4e9a06">export OS_REGION_NAME=Yunion
&lt;/span>&lt;span style="color:#4e9a06">export OS_PROJECT_NAME=system
&lt;/span>&lt;span style="color:#4e9a06">export OS_PASSWORD=123@admin
&lt;/span>&lt;span style="color:#4e9a06">export OS_AUTH_URL=http://127.0.0.1:35357/v3
&lt;/span>&lt;span style="color:#4e9a06">export OS_USERNAME=sysadmin
&lt;/span>&lt;span style="color:#4e9a06">export OS_ENDPOINT_TYPE=publicURL
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 设置环境变量&lt;/span>
$ &lt;span style="color:#204a87">source&lt;/span> /etc/yunion/rc_admin
&lt;span style="color:#8f5902;font-style:italic"># 保存sysadmin的policy&lt;/span>
$ cat&lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/root/sysadmin
&lt;/span>&lt;span style="color:#4e9a06">policy:
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#39;*&amp;#39;:
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#39;*&amp;#39;:
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#39;*&amp;#39;: allow
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 创建sysadmin的权限&lt;/span>
$ climc policy-create --enabled --scope system --is-system sysadmin /root/sysadmin
&lt;span style="color:#8f5902;font-style:italic"># 将sysadmin权限绑定到admin角色上&lt;/span>
$ climc policy-bind-role --project-id system --role-id admin sysadmin
&lt;span style="color:#8f5902;font-style:italic"># 将sysadmin以admin的角色加入system项目, 此后sysadmin用户才拥有整个平台的操作权限, 若报ForbiddenError错误，可以重启keystone服务后,再次尝试此操作&lt;/span>
$ climc user-join-project --role admin --project system sysadmin
&lt;span style="color:#8f5902;font-style:italic"># 创建 Yunion 区域&lt;/span>
$ climc region-create Yunion
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="初始化服务及端点">初始化服务及端点&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 创建 keystone 服务&lt;/span>
$ climc service-create --enabled identity keystone
&lt;span style="color:#8f5902;font-style:italic"># 创建 keystone 端点&lt;/span>
$ climc endpoint-create --enabled keystone Yunion public http://127.0.0.1:35357/v3
$ climc endpoint-create --enabled keystone Yunion admin http://127.0.0.1:35357/v3
$ climc endpoint-create --enabled keystone Yunion internal http://127.0.0.1:5000/v3
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="计算服务region初始化">计算服务（region）初始化&lt;/h2>
&lt;p>region服务是基础服务，也是控制节点。&lt;/p>
&lt;ol>
&lt;li>首先在keystone配置region服务的服务账号，并且注册region服务的服务端点（service endpoint）。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 创建 region 服务&lt;/span>
$ climc service-create --enabled compute_v2 region2
&lt;span style="color:#8f5902;font-style:italic"># 确定 region 服务监听端口，这里假定是8090，后面region服务配置时指定端口得是8090&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 创建 region 端点&lt;/span>
$ climc endpoint-create --enabled region2 Yunion internal http://127.0.0.1:8090
$ climc endpoint-create --enabled region2 Yunion public http://127.0.0.1:8090
&lt;span style="color:#8f5902;font-style:italic"># 创建 region 服务的服务账号&lt;/span>
$ climc user-create --enabled --system-account --no-web-console --password region@admin regionadmin
&lt;span style="color:#8f5902;font-style:italic"># 赋予 regionadmin 用户 admin 角色&lt;/span>
$ climc user-join-project --role admin --project system regionadmin
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>其次配置region的数据库&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 为region服务创建数据库及数据库账号&lt;/span>
$ mysql -uroot -e &lt;span style="color:#4e9a06">&amp;#39;create database yunioncloud;&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 这里设置一个密码为cloudpods-yunioncloud的yunioncloud用户&lt;/span>
$ mysql -uroot -e &lt;span style="color:#4e9a06">&amp;#39;grant all privileges on yunioncloud.* to &amp;#34;yunioncloud&amp;#34;@&amp;#34;%&amp;#34; identified by &amp;#34;cloudpods-yunioncloud&amp;#34;; flush privileges;&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>下面配置并启动region服务&lt;/li>
&lt;/ol>
&lt;pre>&lt;code># 编译 region
$ cd /root/cloudpods/ &amp;amp;&amp;amp; make cmd/region
# 编写region服务的配置文件
# 这里要注意使用刚创建的数据库及数据库账号密码, 及region服务认证的用户名密码
$ cat&amp;lt;&amp;lt;EOF &amp;gt;/etc/yunion/region.conf
region = 'Yunion'
address = '127.0.0.1'
port = 8090
auth_uri = 'http://127.0.0.1:35357/v3'
admin_user = 'regionadmin'
admin_password = 'region@admin'
admin_tenant_name = 'system'
sql_connection = 'mysql+pymysql://yunioncloud:cloudpods-yunioncloud@localhost:3306/yunioncloud?charset=utf8'
log_level = 'debug'
auto_sync_table = true
EOF
# 启动 region 服务
$ /root/cloudpods/_output/bin/region --conf /etc/yunion/region.conf
&lt;/code>&lt;/pre>&lt;ol start="4">
&lt;li>测试region服务是否正常&lt;/li>
&lt;/ol>
&lt;pre>&lt;code># 测试 region 服务接口
$ climc server-list
*** Total: 0 ***
&lt;/code>&lt;/pre>&lt;p>其他使用数据库的服务的配置步骤和region类似。&lt;/p>
&lt;h2 id="api网关服务apigateway初始化">API网关服务（apigateway）初始化&lt;/h2>
&lt;p>api网关是web到各个服务的中间层，web请求到达nginx再由nginx分发到api网关服务，最终由api网关去判断请求需要转发到哪个服务&lt;/p>
&lt;p>首先为api网关创建服务账号&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 创建 api网关 服务认证用户&lt;/span>
$ climc user-create --enabled --system-account --no-web-console --password apigateway@admin apigateway
&lt;span style="color:#8f5902;font-style:italic"># 赋予 apigateway 用户 admin 角色&lt;/span>
$ climc user-join-project --role admin --project system apigateway
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面配置api网关服务&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 编译 apigateway&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> /root/cloudpods/ &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> make cmd/apigateway
&lt;span style="color:#8f5902;font-style:italic"># 编写apigateway服务的配置文件, 注意，这里监听的端口是3000, 后面配置nginx时需要用到&lt;/span>
$ cat&lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/yunion/apigateway.conf
&lt;/span>&lt;span style="color:#4e9a06">region = &amp;#39;Yunion&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">address = &amp;#39;0.0.0.0&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">port = 3000
&lt;/span>&lt;span style="color:#4e9a06">auth_uri = &amp;#39;http://127.0.0.1:35357/v3&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">admin_user = &amp;#39;apigateway&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">admin_password = &amp;#39;apigateway@admin&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">admin_tenant_name = &amp;#39;system&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">log_level = &amp;#39;debug&amp;#39;
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 启动apigateway服务&lt;/span>
$ /root/cloudpods/_output/bin/apigateway --conf /etc/yunion/apigateway.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="前端服务配置">前端服务配置&lt;/h2>
&lt;h3 id="前端编译">前端编译&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 安装yarn, 参考 https://yarn.bootcss.com/docs/install&lt;/span>
$ apt install yarn
&lt;span style="color:#8f5902;font-style:italic"># 编译前端代码&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> /root/dashboard &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> yarn &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> yarn build
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nginx配置">nginx配置&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 修改nginx默认配置&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 这里不一定是要改/etc/nginx/conf.d/default 文件，有可能是其他配置问题，主要是让以下内容生效&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 编辑 /etc/nginx/conf.d/default 文件，输入以下代码&lt;/span>
server &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
listen 80&lt;span style="color:#000;font-weight:bold">;&lt;/span>
location ~ /.well-known &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
allow all&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
location / &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 注意这里要匹配前端编译后代码的位置&lt;/span>
root /root/dashboard/dist&lt;span style="color:#000;font-weight:bold">;&lt;/span>
index index.html&lt;span style="color:#000;font-weight:bold">;&lt;/span>
add_header Cache-Control no-cache&lt;span style="color:#000;font-weight:bold">;&lt;/span>
expires 1s&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>!-e &lt;span style="color:#000">$request_filename&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
rewrite ^/&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>.*&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> /index.html last&lt;span style="color:#000;font-weight:bold">;&lt;/span>
break&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
location /static/ &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Some basic cache-control for static files to be sent to the browser # 同上&lt;/span>
root /root/dashboard/dist&lt;span style="color:#000;font-weight:bold">;&lt;/span>
expires max&lt;span style="color:#000;font-weight:bold">;&lt;/span>
add_header Pragma public&lt;span style="color:#000;font-weight:bold">;&lt;/span>
add_header Cache-Control &lt;span style="color:#4e9a06">&amp;#34;public, must-revalidate, proxy-revalidate&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
location /api &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 这里要匹配到api网关的地址和端口&lt;/span>
proxy_pass http://127.0.0.1:3000&lt;span style="color:#000;font-weight:bold">;&lt;/span>
proxy_redirect off&lt;span style="color:#000;font-weight:bold">;&lt;/span>
proxy_set_header Host &lt;span style="color:#000">$host&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
proxy_set_header X-Real-IP &lt;span style="color:#000">$remote_addr&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
proxy_set_header X-Forwarded-For &lt;span style="color:#000">$proxy_add_x_forwarded_for&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
location /api/v1/imageutils/upload &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
proxy_pass http://127.0.0.1:3000&lt;span style="color:#000;font-weight:bold">;&lt;/span>
client_max_body_size 0&lt;span style="color:#000;font-weight:bold">;&lt;/span>
proxy_http_version 1.1&lt;span style="color:#000;font-weight:bold">;&lt;/span>
proxy_request_buffering off&lt;span style="color:#000;font-weight:bold">;&lt;/span>
proxy_buffering off&lt;span style="color:#000;font-weight:bold">;&lt;/span>
proxy_set_header Host &lt;span style="color:#000">$host&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
proxy_set_header X-Real-IP &lt;span style="color:#000">$remote_addr&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
proxy_set_header X-Forwarded-For &lt;span style="color:#000">$remote_addr&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 为了防止/root/dashboard/dist目录权限问题，建议将启动用户改为root，或者设置正确的目录权限，可以忽略此步&lt;/span>
$ sed -i &lt;span style="color:#4e9a06">&amp;#39;/^user.*/c\user root;&amp;#39;&lt;/span> /etc/nginx/nginx.conf
&lt;span style="color:#8f5902;font-style:italic"># 重新加载nginx配置文件&lt;/span>
$ nginx -s reload
&lt;span style="color:#8f5902;font-style:italic"># 测试 web 是否加载正确&lt;/span>
$ curl http://127.0.0.1 &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep OneCloud
&lt;span style="color:#8f5902;font-style:italic"># 测试nginx是否可以将请求转发至api网关服务&lt;/span>
$ curl http://127.0.0.1/api/v2/servers &lt;span style="color:#000;font-weight:bold">|&lt;/span> python3 -m json.tool
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="前端登录">前端登录&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 创建 web 登录用户 admin&lt;/span>
$ climc user-create --enabled --password admin@123 admin
&lt;span style="color:#8f5902;font-style:italic"># 赋予 admin 用户 admin 角色&lt;/span>
$ climc user-join-project --role admin --project system admin
&lt;span style="color:#8f5902;font-style:italic"># 此时可以打开虚拟机的地址(http://ip)进行前端登录, 用户名密码分别为admin/admin@123&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="后续改进">后续改进&lt;/h1>
&lt;ul>
&lt;li>此步骤是直接指定的参数执行各个服务
&lt;ul>
&lt;li>macOS推荐使用launchctl+LaunchControl进行各个服务的启动管理&lt;/li>
&lt;li>Linux可以编写systemd script管理各个服务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>此步骤并没有使用ssl，若使用ssl需要变更以下内容
&lt;ul>
&lt;li>修个各个服务的配置文件，添加ssl的配置&lt;/li>
&lt;li>修个各个服务的端点，指定https&lt;/li>
&lt;li>修改nginx配置，将转发请求改为https&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>此步骤中服务监听的地址都是127.0.0.1，若想对外暴露各个服务的api，需要改以下内容
&lt;ul>
&lt;li>修改监听地址为0.0.0.0&lt;/li>
&lt;li>修改服务的public端点地址，改为外部可访问地址&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>由于依然有很多服务没有部署，因此前端会有很多服务没找到的报错，甚至前端很多功能都用不了
&lt;ul>
&lt;li>根据前端的提示, 将缺失的服务部署起来&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: 服务组件介绍</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/services/</guid><description>
&lt;h2 id="架构简介">架构简介&lt;/h2>
&lt;p>Cloudpods 服务组件较多，接下来分别介绍每个组件的功能:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>服务组件&lt;/th>
&lt;th>功能用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>keystone&lt;/td>
&lt;td>认证权限管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>region&lt;/td>
&lt;td>多云资源控制器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scheduler&lt;/td>
&lt;td>资源调度器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>glance&lt;/td>
&lt;td>虚拟机镜像管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>host&lt;/td>
&lt;td>私有云虚拟机管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>baremetal&lt;/td>
&lt;td>私有云物理机管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>esxi-agent&lt;/td>
&lt;td>vmware esxi 实例管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lb-agent&lt;/td>
&lt;td>私有云负载均衡&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>webconsole&lt;/td>
&lt;td>提供 vnc, ssh 访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>logger&lt;/td>
&lt;td>记录审计日志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>apigateway&lt;/td>
&lt;td>api 网关，能通过该服务访问后端所有 api&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>climc&lt;/td>
&lt;td>命令行管理工具&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>组件架构见下图，分为接入层，控制层和资源层三个主要部分。&lt;/p>
&lt;p>&lt;img src="../images/onecloud-services.png" alt="">&lt;/p>
&lt;h2 id="接入层">接入层&lt;/h2>
&lt;p>接入层实现云管平台的访问功能，允许用户通过如下3种方式访问云管平台的功能：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>API访问&lt;/strong>: 通过REST API访问云管平台功能，用户可以直接通过http接口访问云管平台的REST API，也可以使用云管平台提供的SDK。目前SDK支持Java，Python和Golang等三种语言。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>命令行访问&lt;/strong>: 通过云管平台提供的climc命令行工具访问云管平台功能，允许用户通过脚本调用climc，实现一些自动化运维功能。Climc使用Golang语言，基于云管平台的Golang SDK开发。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Web控制台访问&lt;/strong>: 通过Web UI访问云管平台的功能。允许用户通过主流web浏览器访问云管平台。Web控制台提供管理员使用的管理后台以及普通用户使用的普通功能页面，能够提供大部分的管理和使用功能。Web控制台基于Vue 2.0 JavaScript SPA框架实现。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="控制层">控制层&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>控制层实现云管平台的管理和控制功能。主要由API网关，认证服务，镜像服务，云控制器和调度器，以及 webconsole vnc, ssh 代理服务等组件构成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>API网关提供Web控制台对各个服务的统一REST API访问接口。实现Web控制台的登录验证，session 控制，以及对后端各个服务的API调用。API网关由Golang完全自主开发，完全无状态架构，具备水平扩展能力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>认证服务提供平台的账户管理和认证体系，并提供基于项目的多租户支持，同时提供服务目录功能。认证服务支持多种认证源，允许和企业的LDAP／AD对接，允许用户以企业统一的账户体系登入系统。认证服务2.10之前版本基于OpenStack Keystone Pika版本，开发语言为Python。在开源版本基础上，我们修正了BUG，并做了若干改进。2.10之后版本采用golang语言开发。Keystone采用无状态架构，支持水平扩展，可以水平拆分实现服务高可用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>镜像服务提供云管平台各种主机资源的操作系统镜像的管理功能。提供镜像存储，元数据管理等功能。镜像服务1.x版本基于OpenStack Glance Folsom版本改进而来，开发语言为Python。在开源版本基础上，我们修正了BUG，并做了若干改进。2.x版本采用golang语言开发。Glance采用无状态架构，支持水平扩展，可以水平拆分实现服务高可用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>云控制器是整个云管平台的中枢，负责机房网络，宿主机，网络，存储，虚拟机等各类资源的元数据信息管理，以及对虚拟机，裸机等的自动化管理操作认证的调度，协调管理。云控制器内置基于REST API接口的分布式异步任务管理框架，实现对在计算节点进行的开关机，创建删除等耗时操作任务的管理协调工作。云控制器完全自主开发，云控制器采用无状态架构，可以水平扩展，通过水平拆分实现高可用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调度器负责云管平台资源调度功能，是云管平台中资源获取决策的唯一执行者，根据用户对资源的要求，给出资源的最优提供者。调度器支持批量调度，调度性能优异，可扩展性好。调度器完全自主开发，基于Golang语言开发。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="资源层">资源层&lt;/h2>
&lt;ul>
&lt;li>资源层实现对KVM虚拟机，裸机，VMWare虚拟机等计算资源的管理和控制功能。云管平台目前主要支持对KVM虚拟机，裸机，VMWare虚拟机，常用私有云openstack, zstack 以及公有云阿里云，Azure，腾讯云，AWS等公有云资源的管理。&lt;/li>
&lt;/ul></description></item><item><title>Docs: 后端服务框架</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/framework/</guid><description>
&lt;p>介绍云平台后端服务所用的框架和相关库的使用方法，建议先阅读 &lt;a href="../../development/services/">&amp;ldquo;开发相关/服务组件介绍&amp;rdquo;&lt;/a> 了解各个服务大概的功能。&lt;/p>
&lt;h2 id="后端服务框架">后端服务框架&lt;/h2>
&lt;p>keystone, region, glance 等后端服务，都是用的同一套后端服务框架，这个框架是我们自己定义实现的，核心模块如下:&lt;/p>
&lt;p>&lt;img src="../images/service_framework.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>REST API: 负责解析客户端发送的 CRUD http 请求，将不同的请求对应到 Model Dispatcher 模块。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Model Dispatcher: 将客户端的请求分发到对应资源的业务操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Model: 定义云平台各种资源，会进行数据库读写相关操作，如果具体业务需要进行耗时操作，会通过 Task 机制来执行耗时任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Task: 后台处理异步耗时任务的模块，会通过更新 Model 的状态来更新任务的执行结果。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="cloudpods-代码结构">Cloudpods 代码结构&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/master/build">build&lt;/a>: 打包rpm脚本&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/master/cmd">cmd&lt;/a>: 可执行binary入口程序&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/master/pkg">pkg&lt;/a>: 库
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/master/pkg/appsrv">appsrv&lt;/a>: 通用http服务框架&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/master/pkg/cloudcommon">cloudcommon&lt;/a>: 云平台服务框架，基于appsrv扩展
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/master/pkg/cloudcommon/options">cloudcommon/options&lt;/a>: 通用options&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/master/pkg/cloudcommon/app">cloudcommon/app&lt;/a>: 通用服务初始化代码&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/master/pkg/cloudcommon/db">cloudcommon/db&lt;/a>: Model dispatcher和Models的基础实现&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/master/pkg/cloudcommon/db/lockman">cloudcommon/db/lockman&lt;/a>: 锁实现&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/master/pkg/cloudcommon/db/taskman">cloudcommon/db/taskman&lt;/a>: 异步任务框架&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="认证部分">认证部分&lt;/h2>
&lt;p>&lt;img src="../images/auth_framework.png" alt="">&lt;/p>
&lt;ul>
&lt;li>客户端向服务发起请求前，需要从keystone获得token&lt;/li>
&lt;li>客户端通过携带用户名密码调用keystone的/v3/auth/tokens接口获得token&lt;/li>
&lt;li>客户端向服务发起的每次API请求都会在HTTP头携带该token，比如: X-Auth-Token: {token}&lt;/li>
&lt;li>后端服务向keystone验证该token，获得用户的身份信息，执行后续API的流程&lt;/li>
&lt;li>每个服务都有一个keystone注册的服务用户账号（user/password)，并且以admin角色加入system项目&lt;/li>
&lt;li>服务启动后，会向keystone发起认证，获得admin token&lt;/li>
&lt;li>用户通过API访问服务时，将在header携带token&lt;/li>
&lt;li>使用这个admin token访问keystone的token验证接口，验证这个token，获得用户的身份信息&lt;/li>
&lt;/ul>
&lt;h2 id="model-dispatcher">Model Dispatcher&lt;/h2>
&lt;p>把 REST API 和 Manager/Model 的方法进行一一映射&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>REST API 请求&lt;/th>
&lt;th>API 功能&lt;/th>
&lt;th>返回数据格式&lt;/th>
&lt;th>对应对象&lt;/th>
&lt;th>框架方法&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET /&amp;lt;resources&amp;gt;&lt;/td>
&lt;td>列表&lt;/td>
&lt;td>{&amp;ldquo;resources&amp;rdquo;:[{res&amp;hellip;},&lt;/td>
&lt;td>Manager&lt;/td>
&lt;td>ListItemFilter&lt;/td>
&lt;td>过滤&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&amp;hellip;,{res&amp;hellip;}]&lt;/td>
&lt;td>Manager&lt;/td>
&lt;td>GetCustomizeColumns&lt;/td>
&lt;td>获得扩展字段的信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET /&amp;lt;resources&amp;gt;/&amp;lt;property&amp;gt;&lt;/td>
&lt;td>获得&lt;em>该类资源&lt;/em>特定属性&lt;/td>
&lt;td>{&amp;ldquo;resources&amp;rdquo;:{info&amp;hellip;}}&lt;/td>
&lt;td>Manager&lt;/td>
&lt;td>GetProperty&amp;lt;Property&amp;gt;&lt;/td>
&lt;td>获得&lt;em>该类资源&lt;/em>的特定属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET /&amp;lt;resources&amp;gt;/&amp;lt;res_id&amp;gt;&lt;/td>
&lt;td>获得&lt;em>某个资源&lt;/em>详情&lt;/td>
&lt;td>{&amp;ldquo;resource&amp;rdquo;:{res&amp;hellip;}}&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>GetExtraDetails&lt;/td>
&lt;td>获取扩展字段的信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET /&amp;lt;resources&amp;gt;/&amp;lt;res_id&amp;gt;/&amp;lt;spec&amp;gt;&lt;/td>
&lt;td>获得&lt;em>某个资源&lt;/em>特定属性&lt;/td>
&lt;td>{&amp;ldquo;resource&amp;rdquo;:{info&amp;hellip;}}&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>GetDetails&amp;lt;Spec&amp;gt;&lt;/td>
&lt;td>获取&lt;em>某个资源&lt;/em>的特定属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST /&amp;lt;resources&amp;gt;&lt;/td>
&lt;td>新建资源&lt;/td>
&lt;td>{&amp;ldquo;resource&amp;rdquo;:{res&amp;hellip;}}&lt;/td>
&lt;td>Manager&lt;/td>
&lt;td>ValidateCreateData&lt;/td>
&lt;td>校验和处理创建的数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>CustomizeCreate&lt;/td>
&lt;td>自定义的创建操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>PostCreate&lt;/td>
&lt;td>创建后的hook&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Manager&lt;/td>
&lt;td>OnCreateComplete&lt;/td>
&lt;td>创建完成的hook&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST /&amp;lt;resources&amp;gt;/&amp;lt;action&amp;gt;&lt;/td>
&lt;td>对&lt;em>该类资源&lt;/em>执行操作&lt;/td>
&lt;td>{&amp;ldquo;resource&amp;rdquo;:{res&amp;hellip;}}&lt;/td>
&lt;td>Manager&lt;/td>
&lt;td>Perform&amp;lt;Action&amp;gt;&lt;/td>
&lt;td>对&lt;em>该类资源&lt;/em>执行特定操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST /&amp;lt;resources&amp;gt;/&amp;lt;res_id&amp;gt;/&amp;lt;action&amp;gt;&lt;/td>
&lt;td>对&lt;em>某个资源&lt;/em>执行操作&lt;/td>
&lt;td>{&amp;ldquo;resource&amp;rdquo;:{res&amp;hellip;}}&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>Perform&amp;lt;Action&amp;gt;&lt;/td>
&lt;td>对&lt;em>某个资源&lt;/em>执行特定操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PUT /&amp;lt;resources&amp;gt;/&amp;lt;res_id&amp;gt;&lt;/td>
&lt;td>更新&lt;em>某个资源&lt;/em>的属性&lt;/td>
&lt;td>{&amp;ldquo;resource&amp;rdquo;:{res&amp;hellip;}}&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>ValidateUpdateData&lt;/td>
&lt;td>校验和处理更新操作的数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>PreUpdate&lt;/td>
&lt;td>自定义的创建操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>PostUpdate&lt;/td>
&lt;td>创建后的hook&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DELETE /&amp;lt;resources&amp;gt;/&amp;lt;res_id&amp;gt;&lt;/td>
&lt;td>删除&lt;em>某个资源&lt;/em>&lt;/td>
&lt;td>{&amp;ldquo;resource&amp;rdquo;:{res&amp;hellip;}}&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>CustomizeDelete&lt;/td>
&lt;td>自定义的删除操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>PreDelete&lt;/td>
&lt;td>删除前的hook&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>Delete&lt;/td>
&lt;td>执行删除操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Model&lt;/td>
&lt;td>PostDelete&lt;/td>
&lt;td>删除后的hook&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>具体 restful 请求的绑定函数在: &lt;a href="https://github.com/yunionio/cloudpods/blob/master/pkg/appsrv/dispatcher/dispatcher.go#L33">pkg/appsrv/dispatcher/dispatcher.go&lt;/a> 文件中的 &lt;strong>AddModelDispatcher&lt;/strong> 函数。&lt;/p>
&lt;h2 id="数据库-orm-模型">数据库 ORM 模型&lt;/h2>
&lt;p>代码位于 &lt;a href="https://github.com/yunionio/cloudpods/tree/master/pkg/cloudcommon/db">cloudcommon/db&lt;/a>&lt;/p>
&lt;ul>
&lt;li>接口
&lt;ul>
&lt;li>IModelManager: 对应资源在数据库里面的表&lt;/li>
&lt;li>IModel: 对应资源在数据库里面的单条数据&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据结构
&lt;ul>
&lt;li>SResourceBase: 基础资源
&lt;ul>
&lt;li>SStandaloneResourceBase: 基础设施的物理资源，没有具体ownerId的资源，如zone, host
&lt;ul>
&lt;li>SVirtualResourceBase: 虚拟资源，如虚拟机（guest)
&lt;ul>
&lt;li>SSharableVirtualResourceBase: 虚拟的可以共享的虚拟资源，如disk, network
&lt;ul>
&lt;li>SAdminSharableVirtualInfoBase: 管理配置用的可共享虚拟资源，如security group&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SJointResourceBase: 联合数据类型，如虚拟网卡是虚拟机和网络的联合，虚拟磁盘挂在：虚拟机和虚拟磁盘的联合&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="举例">举例&lt;/h3>
&lt;p>用虚拟机的 model 来举例，代码在: &lt;a href="https://github.com/yunionio/cloudpods/blob/master/pkg/compute/models/guests.go">pkg/compute/models/guests.go&lt;/a>。&lt;/p>
&lt;p>GuestManager 对应数据库里面的 guests_tbl，该对象嵌套 db.SVirtualResourceBaseManager 表示是虚拟资源的 Manager，这样会默认实现 db.IModelManager 接口，然后根据业务需要重写一些方法会比较方便。&lt;/p>
&lt;p>SGuest 对应 guests_tbl 数据库里面的每一行数据，由 GuestManager 管理，嵌套 db.SVirtualResourceBase 结构，默认就会有虚拟资源所需要的表结构，然后再定义一些虚拟机独有的属性比如 VcpuCount 表示 cpu 核数，VmemSize 表示内存大小。 在代码抽象后表示虚拟机实例，该对象会绑定对虚拟机具体的业务操作实现函数。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;yunion.io/x/cloudpods/pkg/cloudcommon/db&amp;#34;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">SGuestManager&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SVirtualResourceBaseManager&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">GuestManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">SGuestManager&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">init&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">GuestManager&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">SGuestManager&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">SVirtualResourceBaseManager&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewVirtualResourceBaseManager&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;guests_tbl&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;server&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;servers&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">GuestManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetVirtualObject&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">GuestManager&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">GuestManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetAlias&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;guest&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;guests&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">SGuest&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SVirtualResourceBase&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SExternalizedResourceBase&lt;/span>
&lt;span style="color:#000">SBillingResourceBase&lt;/span>
&lt;span style="color:#000">VcpuCount&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#4e9a06">`nullable:&amp;#34;false&amp;#34; default:&amp;#34;1&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(TINYINT, nullable=False, default=1)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">VmemSize&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#4e9a06">`nullable:&amp;#34;false&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;required&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(Integer, nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">BootOrder&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;8&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; default:&amp;#34;cdn&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(8, charset=&amp;#39;ascii&amp;#39;), nullable=True, default=&amp;#39;cdn&amp;#39;)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">DisableDelete&lt;/span> &lt;span style="color:#000">tristate&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TriState&lt;/span> &lt;span style="color:#4e9a06">`nullable:&amp;#34;false&amp;#34; default:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(Boolean, nullable=False, default=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ShutdownBehavior&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;16&amp;#34; charset:&amp;#34;ascii&amp;#34; default:&amp;#34;stop&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(16, charset=&amp;#39;ascii&amp;#39;), default=SHUTDOWN_STOP)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">KeypairId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">HostId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;admin&amp;#34; get:&amp;#34;admin&amp;#34; index:&amp;#34;true&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">BackupHostId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; get:&amp;#34;user&amp;#34;`&lt;/span>
&lt;span style="color:#000">Vga&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Vdi&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Machine&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Bios&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">OsType&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">FlavorId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">SecgrpId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; get:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">AdminSecgrpId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; get:&amp;#34;admin&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">Hypervisor&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;16&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;false&amp;#34; default:&amp;#34;kvm&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;required&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(16, charset=&amp;#39;ascii&amp;#39;), nullable=False, default=HYPERVISOR_DEFAULT)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">InstanceType&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;64&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="数据库锁">数据库锁&lt;/h2>
&lt;p>代码位于 cloudcommon/db/lockman:&lt;/p>
&lt;ul>
&lt;li>LockClass/ReleaseClass: 锁住一类实例，一般创建资源时候需要锁&lt;/li>
&lt;li>LockObject/ReleaseObject: 锁住一个实例，一般修改资源实例是需要锁&lt;/li>
&lt;li>LockRawObject/RelaseRawObject: 通用的锁&lt;/li>
&lt;/ul>
&lt;h3 id="举例-1">举例&lt;/h3>
&lt;p>&lt;a href="https://github.com/yunionio/cloudpods/blob/master/pkg/cloudcommon/db/db_dispatcher.go#L900">pkg/cloudcommon/db/db_dispatcher.go&lt;/a> 里面的 DoCreate 函数会创建对应 Model 的对象并插入数据到数据库，这个时候就需要加锁。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">DoCreate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">manager&lt;/span> &lt;span style="color:#000">IModelManager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TokenCredential&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">query&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ownerId&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IIdentityProvider&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">IModel&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">lockman&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">LockClass&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">manager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">GetLockClassKey&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">manager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ownerId&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">lockman&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReleaseClass&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">manager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">GetLockClassKey&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">manager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ownerId&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">doCreateItem&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">manager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ownerId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="worker队列管理">worker队列管理&lt;/h2>
&lt;p>为了避免不可预期的并发度，所有异步执行的代码都应该在worker内执行，以便于管理并发度。&lt;/p>
&lt;p>代码位于 appsrv/workers.go&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#000">workerman&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">appsrv&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewWorkerManager&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">parallel_cnt&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">…&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">workerman&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Run&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">…&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="task-机制">Task 机制&lt;/h2>
&lt;p>云平台的异步耗时任务会放在 Task 机制里面去执行，比如创建虚拟机操作，用户提交了请求，region 控制器校验参数合格后，会记录数据到数据库，然后马上返回客户端对应的虚拟机记录，与此同时，会开始执行创建虚拟机的 task，这个 task 会立即在后台执行，会通过更新虚拟机 SGuest model 的状态和记录操作日志来表示执行的成功或失败。&lt;/p>
&lt;p>task 也是记录在数据库 tasks_tbl 里面的记录，对应的定义在: &lt;a href="https://github.com/yunionio/cloudpods/blob/master/pkg/cloudcommon/db/taskman/tasks.go">pkg/cloudcommon/db/taskman/tasks.go&lt;/a> 里面，数据结构如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">STaskManager&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SResourceBaseManager&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">TaskManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">STaskManager&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">init&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">TaskManager&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">STaskManager&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">SResourceBaseManager&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewResourceBaseManager&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">STask&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;tasks_tbl&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;task&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;tasks&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">TaskManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetVirtualObject&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TaskManager&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">STask&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SResourceBase&lt;/span>
&lt;span style="color:#000">Id&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; primary:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">36&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">charset&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#000">ascii&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">primary_key&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">default&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">get_uuid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">ObjName&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;128&amp;#34; charset:&amp;#34;utf8&amp;#34; nullable:&amp;#34;false&amp;#34; list
&lt;/span>&lt;span style="color:#4e9a06">:&amp;#34;user&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(128, charset=&amp;#39;utf8&amp;#39;), nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ObjId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;128&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;false&amp;#34; lis
&lt;/span>&lt;span style="color:#4e9a06">t:&amp;#34;user&amp;#34; index:&amp;#34;true&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(ID_LENGTH, charset=&amp;#39;ascii&amp;#39;), nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">TaskName&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;64&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;false&amp;#34; list
&lt;/span>&lt;span style="color:#4e9a06">:&amp;#34;user&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(64, charset=&amp;#39;ascii&amp;#39;), nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">UserCred&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TokenCredential&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;1024&amp;#34; charset:&amp;#34;utf8&amp;#34; nullable:&amp;#34;false&amp;#34; get
&lt;/span>&lt;span style="color:#4e9a06">:&amp;#34;user&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(1024, charset=&amp;#39;ascii&amp;#39;), nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// OwnerCred string `width:&amp;#34;512&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34;` // Column(VARCHAR
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">512&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">charset&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#000">ascii&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">nullable&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">Params&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONDict&lt;/span> &lt;span style="color:#4e9a06">`charset:&amp;#34;utf8&amp;#34; length:&amp;#34;medium&amp;#34; nullable:&amp;#34;false&amp;#34; get:&amp;#34;us
&lt;/span>&lt;span style="color:#4e9a06">er&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(MEDIUMTEXT(charset=&amp;#39;ascii&amp;#39;), nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">Stage&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;64&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;false&amp;#34; default:&amp;#34;on_init&amp;#34; list:&amp;#34;u
&lt;/span>&lt;span style="color:#4e9a06">ser&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(64, charset=&amp;#39;ascii&amp;#39;), nullable=False, default=&amp;#39;on_init&amp;#39;)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">taskObject&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IStandaloneModel&lt;/span> &lt;span style="color:#4e9a06">`ignore:&amp;#34;true&amp;#34;`&lt;/span>
&lt;span style="color:#000">taskObjects&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IStandaloneModel&lt;/span> &lt;span style="color:#4e9a06">`ignore:&amp;#34;true&amp;#34;`&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Id: STask 里面的 Id 是该 task 记录的 Id&lt;/li>
&lt;li>ObjId: 对应资源对象的 Id，用于记录执行该 task 的对应操作的资源，比如某台虚拟机、磁盘的 Id&lt;/li>
&lt;li>UserCred: 存储执行 task 的用户信息&lt;/li>
&lt;li>Params: 执行 task 的参数&lt;/li>
&lt;li>TaskName: 对应 task 的名称&lt;/li>
&lt;li>Stage: task 执行的阶段，默认为 OnInit&lt;/li>
&lt;/ul>
&lt;h3 id="举例-2">举例&lt;/h3>
&lt;p>以虚拟机关机这个操作来举例:&lt;/p>
&lt;ul>
&lt;li>客户端发起 POST /servers/&amp;lt;server_id&amp;gt;/stop 请求后，通过服务框架会执行 &lt;code>func (self *SGuest) PerformStop&lt;/code> 函数，代码片段如下(位于: &lt;a href="https://github.com/yunionio/cloudpods/blob/2003c44264f1a244f32fd0584e7ce0d23df78705/pkg/compute/models/guest_actions.go#L2357">pkg/compute/models/guest_actions.go&lt;/a>):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">PerformStop&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TokenCredential&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">query&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// XXX if is force, force stop guest
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">isForce&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">QueryBoolean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;is_force&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">isForce&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span> &lt;span style="color:#000">utils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IsInStringArray&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Status&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">VM_RUNNING&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">VM_STOP_FAILED&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">StartGuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">isForce&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">httperrors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewInvalidStatusError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Cannot stop server in status %s&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Status&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>SGuest 会执行 self.StartGuestStopTask 函数，该函数会去调用虚拟机不同的 Driver 执行关机操作&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#8f5902;font-style:italic">// pkg/compute/models/guest_actions.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">StartGuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TokenCredential&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">isForce&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">parentTaskId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">StartGuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">parentTaskId&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// pkg/compute/guestdrivers/virtualization.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;yunion.io/x/cloudpods/pkg/cloudcommon/db/taskman&amp;#34;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">SVirtualizedGuestDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">StartGuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TokenCredential&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">params&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONDict&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">parentTaskId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">taskman&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TaskManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;GuestStopTask&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">parentTaskId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ScheduleRun&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>taskman.TaskManager.NewTask(ctx, &amp;ldquo;GuestStopTask&amp;rdquo;, &amp;hellip;)&lt;/strong> 这里面的 GuestStopTask 对应 &lt;a href="https://github.com/yunionio/cloudpods/blob/master/pkg/compute/tasks/guest_stop_task.go">pkg/compute/tasks/guest_stop_task.go&lt;/a> 里面的 GuestStopTask，是通过 taskman 里面维护的一个 map 查找的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>task.ScheduleRun(nil)&lt;/strong> 会开始执行对应的 Task，默认会从 task 的默认 Stage OnInit 函数开始执行，所以通过 task 机制就会执行到 GuestStopTask.OnInit 函数。OnInit 函数最终会调用对应虚拟机的 driver 执行 RequestStopOnHost 函数并更新设置自己的 Stage 为 OnMasterStopTaskComplete。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于虚拟机来说 RequestStopOnHost 函数会请求虚拟机所在的 host agent 关闭虚拟机，关机成功后会回调 region task 框架，该框架会根据 taskId 从数据库 load 回来 GuestStopTask，接着它设置的 Stage OnMasterStopTaskComplete 执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>这里失败会自动调用 OnGuestStopTaskCompleteFailed 函数，所以编写对应 task stage 函数时如果写 &amp;lt;OnSometingComplete&amp;gt; 函数时，必须也同时写 &amp;lt;OnSometingCompleteFailed&amp;gt; 函数来处理失败情况。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;ul>
&lt;li>如果成功关机，OnMasterStopTaskComplete 调用 OnGuestStopTaskComplete 函数，该函数会把虚拟机的状态设置为 ready，并记录一条关机操作日志；如果失败会调用 OnGuestStopTaskCompleteFailed 函数，该函数会虚拟机状态设置为关机失败，并记录失败的原因。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">OnInit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obj&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IStandaloneModel&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">obj&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OpsLog&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">LogEvent&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ACT_STOPPING&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UserCred&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">stopGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">stopGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">host&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetHost&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">host&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnGuestStopTaskCompleteFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewString&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;no associated host&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IsSubtask&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetStatus&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UserCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">VM_STOPPING&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetStage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;OnMasterStopTaskComplete&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">RequestStopOnHost&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">OnMasterStopTaskComplete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnGuestStopTaskComplete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">OnMasterStopTaskCompleteFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obj&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IStandaloneModel&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">obj&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnGuestStopTaskCompleteFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">OnGuestStopTaskComplete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetStatus&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UserCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">VM_READY&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#000">logclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddActionLogWithStartable&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">logclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ACT_VM_STOP&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Us&lt;/span>
&lt;span style="color:#000">erCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">OnGuestStopTaskCompleteFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OpsLog&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">LogEvent&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ACT_STOP_FAIL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UserCred&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetStageFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000">logclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddActionLogWithStartable&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">logclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ACT_VM_STOP&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UserCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="如何增加一个新的服务">如何增加一个新的服务&lt;/h2>
&lt;ul>
&lt;li>在keystone注册一个服务启用用的账户&lt;/li>
&lt;li>在keystone注册service和endpoint&lt;/li>
&lt;li>参考 cloudpods/pkg/logger实现服务代码&lt;/li>
&lt;li>为服务准备一个配置文件，包含以下基础信息&lt;/li>
&lt;/ul>
&lt;p>假设服务名为 svc，用户和密码为 svcuser, svcuserpassword，服务监听地址为: http://localhost:8866, region 为 LocalTest，对应操作如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 创建 service&lt;/span>
$ climc service-create --enabled svc svc
&lt;span style="color:#8f5902;font-style:italic"># 创建 endpoint，对应的 service 为 svc&lt;/span>
$ climc endpoint-create svc LocalTest internal http://localhost:8866
&lt;span style="color:#8f5902;font-style:italic"># 创建 user&lt;/span>
$ climc user-create --password svcuserpassword --enabled svcuser
&lt;span style="color:#8f5902;font-style:italic"># 把 user 加入 system 项目&lt;/span>
$ climc project-add-user system svcuser admin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置信息如下&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">region&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">LocalTest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8866&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">auth_url&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">https://&amp;lt;keystone_url&amp;gt;:35357/v3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">admin_user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">svcuser&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">admin_password&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">svcuserpassword&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">admin_tenant_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">system&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 资源模型</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/model/</guid><description>
&lt;p>云平台的资源大概分为 &lt;strong>&amp;ldquo;虚拟资源&amp;rdquo;&lt;/strong> 和 &lt;strong>&amp;ldquo;基础设施&amp;rdquo;&lt;/strong> 两类，有了基础设施类型的资源才能在其之上构建虚拟化的资源，具体分类如下:&lt;/p>
&lt;ul>
&lt;li>infra: 表示基础设施类型&lt;/li>
&lt;li>virtual: 表示虚拟资源类型，属于具体的项目&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>抽象资源&lt;/th>
&lt;th>作用&lt;/th>
&lt;th>类型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>cloudregion&lt;/td>
&lt;td>云平台地域&lt;/td>
&lt;td>标记数据中心所在地域&lt;/td>
&lt;td>infra&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>zone&lt;/td>
&lt;td>云平台数据中心&lt;/td>
&lt;td>标记数据中心&lt;/td>
&lt;td>infra&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vpc&lt;/td>
&lt;td>逻辑隔离网络空间&lt;/td>
&lt;td>抽象虚拟化网络的集合&lt;/td>
&lt;td>infra&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wire&lt;/td>
&lt;td>对应二层扁平网络的广播域&lt;/td>
&lt;td>抽象二层扁平网络广播域&lt;/td>
&lt;td>infra&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>storage&lt;/td>
&lt;td>存储&lt;/td>
&lt;td>标记存储，提供云硬盘能力&lt;/td>
&lt;td>infra&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>host&lt;/td>
&lt;td>服务器&lt;/td>
&lt;td>标记服务器，提供计算虚拟化&lt;/td>
&lt;td>infra&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>server&lt;/td>
&lt;td>云主机&lt;/td>
&lt;td>运行在 host 上，使用虚拟化技术提供计算能力&lt;/td>
&lt;td>virtual&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>disk&lt;/td>
&lt;td>云硬盘&lt;/td>
&lt;td>创建在 storage 上，使用虚拟化技术提供存储能力&lt;/td>
&lt;td>virtual&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>network&lt;/td>
&lt;td>网络&lt;/td>
&lt;td>创建在 vpc 中，使用虚拟化技术提供网络&lt;/td>
&lt;td>virtual&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>image&lt;/td>
&lt;td>镜像&lt;/td>
&lt;td>安装了操作系统的虚拟机磁盘，也属于 disk 一类&lt;/td>
&lt;td>virtual&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>eip&lt;/td>
&lt;td>外网浮动 ip&lt;/td>
&lt;td>对应外网可用 ip&lt;/td>
&lt;td>virtual&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loadbalancer&lt;/td>
&lt;td>负载均衡器&lt;/td>
&lt;td>标记负载均衡器，提供服务负载均衡&lt;/td>
&lt;td>virtual&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>除了上面介绍的常见资源外，为了做多云管理，我们还引入了以下的概念:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>资源&lt;/th>
&lt;th>作用&lt;/th>
&lt;th>类型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>cloudaccount&lt;/td>
&lt;td>云平台的账户&lt;/td>
&lt;td>对应各个云平台的认证信息&lt;/td>
&lt;td>infra&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>project&lt;/td>
&lt;td>项目&lt;/td>
&lt;td>Cloudpods 内部对虚拟机资源的划分&lt;/td>
&lt;td>infra&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>schedtag&lt;/td>
&lt;td>调度标签&lt;/td>
&lt;td>可以标记多种资源，提供资源调度能力&lt;/td>
&lt;td>infra&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sku&lt;/td>
&lt;td>套餐信息&lt;/td>
&lt;td>对应创建虚拟资源的规格信息&lt;/td>
&lt;td>infra&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: 代码结构</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/codestruct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/codestruct/</guid><description>
&lt;h2 id="后端代码结构">后端代码结构&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/build">build&lt;/a>: 编译、构建相关的目录，每个组件在此目录下均有对应的目录&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/cmd">cmd&lt;/a>: 各个组件的入口函数（main函数）所在目录
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/cmd/climc">climc&lt;/a>: 命令行工具climc代码
&lt;ul>
&lt;li>shell: 各个服务对应的命令行工具代码&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/docs">docs&lt;/a>: API swagger 文档，目前没用了&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/locales">locales&lt;/a>: 本地化代码目录，主要负责response中信息的本地化&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg">pkg&lt;/a>: 主要代码
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/ansibleserver">ansibleserver&lt;/a>: ansibleserver代码，执行ansible的服务&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/apigateway">apigateway&lt;/a>: API网关代码
&lt;ul>
&lt;li>app: web服务工具包&lt;/li>
&lt;li>clientman: 访问其他服务client相关代码&lt;/li>
&lt;li>constants: 常量&lt;/li>
&lt;li>handler: web服务handler&lt;/li>
&lt;li>options: 服务的参数&lt;/li>
&lt;li>policy: keystone权限client代码&lt;/li>
&lt;li>service: 主要的服务代码&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/apihelper">apihelper&lt;/a>: web服务工具包&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/apis">apis&lt;/a>: API数据结构，一般来说每个目录对应一个组件
&lt;ul>
&lt;li>compute: region的API数据结构
&lt;ul>
&lt;li>zz_generated.model.go: 根据region的models自动生成的对应的数据结构&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/appctx">appctx&lt;/a>: context 工具包&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/appsrv">appsrv&lt;/a>: web框架
&lt;ul>
&lt;li>dispatcher: web路由相关代码&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/baremetal">baremetal&lt;/a>: baremetal-agent 服务代码&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/cloudcommon">cloudcommon&lt;/a>: 通用工具包
&lt;ul>
&lt;li>agent: agent服务通用包，目前被baremetal-agent和esxi-agent所使用&lt;/li>
&lt;li>app: web服务工具包&lt;/li>
&lt;li>cmdline: 命令行工具包&lt;/li>
&lt;li>cronman: cronjob工具包&lt;/li>
&lt;li>db: 服务models通用代码
&lt;ul>
&lt;li>lockman: 锁工具包&lt;/li>
&lt;li>proxy: 代理设置，主要被pkg/compute/models/cloudaccounts.go使用&lt;/li>
&lt;li>quotas: 配额相关代码&lt;/li>
&lt;li>taskman: 异步任务代码&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>elect: etcd相关代码&lt;/li>
&lt;li>etcd: etcd相关代码&lt;/li>
&lt;li>informer: 订阅通知相关代码，如果关注某些model的变化，就可以订阅&lt;/li>
&lt;li>notifyclient: notify服务对应的client代码&lt;/li>
&lt;li>options: 通用的options&lt;/li>
&lt;li>pending_delete: pending_delete相关的option&lt;/li>
&lt;li>policy: model默认权限通用代码，主要用来为各个服务的model设置默认的keystone权限&lt;/li>
&lt;li>service: sevice通用代码&lt;/li>
&lt;li>syncman: informer使用相关代码
&lt;ul>
&lt;li>watcher: 监视服务的model&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>validators: 校验web请求参数的通用代码&lt;/li>
&lt;li>workmanager: worker代码&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/cloudevent">cloudevent&lt;/a>: cloudevent服务，公有云日志&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/cloudid">cloudid&lt;/a>: cloudid服务，公有云免密登陆&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/cloudmon">cloudmon&lt;/a>: cloudmon服务，公有云监控
&lt;ul>
&lt;li>collectors: 各个公有云的监控数据收集&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/cloudprovider">cloudprovider&lt;/a>: 多云的通用数据结构&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/cloudproxy">cloudproxy&lt;/a>: 代理服务，可以通过代理访问vpc内部的虚拟机&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/compute">compute&lt;/a>: region服务代码
&lt;ul>
&lt;li>baremetal: baremetal相关代码&lt;/li>
&lt;li>capabilities: capabilities接口代码&lt;/li>
&lt;li>guestdrivers: 多云场景下，虚拟机相关的操作代码，不同的云实现driver&lt;/li>
&lt;li>hostdrivers: 多云场景下，宿主机相关的操作代码，不同的云实现driver&lt;/li>
&lt;li>misc: 托管已有操作系统的物理机，接口代码&lt;/li>
&lt;li>models: 服务资源模型代码，一般一个model对应数据库中的一张表&lt;/li>
&lt;li>options: 服务选项&lt;/li>
&lt;li>policy: 资源model默认权限&lt;/li>
&lt;li>regiondrivers: 多云场景下，region级别的云资源操作代码，不同的云实现driver&lt;/li>
&lt;li>service: service启动的代码&lt;/li>
&lt;li>specs: 获取物理机和GPU规格的代码，用来创建裸金属和GPU虚拟机&lt;/li>
&lt;li>sshkeys: 获取sshkey的代码，包括全局的sshkey和project的sshkey，可以用来访问虚拟机&lt;/li>
&lt;li>storagedrivers: 多云场景下，存储相关的操作代码，不同的云实现driver&lt;/li>
&lt;li>tasks: 服务相关的异步任务代码，比如创建虚拟机最终会作为异步任务执行&lt;/li>
&lt;li>usages: 获取云资源使用量统计的接口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/controller">controller&lt;/a>: 控制器代码
&lt;ul>
&lt;li>autoscaling: 弹性伸缩控制器，主要用于实现虚拟机的弹性伸缩功能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/devtool">devtool&lt;/a>: 运维工具服务，比如安装监控agent&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/esxi">esxi&lt;/a>: esxi-agent服务，主要用来操作vmware集群或者esxi宿主机&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/hostimage">hostimage&lt;/a>: 部署在每台宿主机上，和镜像相关的服务&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/hostman">hostman&lt;/a>: host服务相关代码
&lt;ul>
&lt;li>diskutils: 磁盘操作工具包
&lt;ul>
&lt;li>fsutils: 文件系统操作工具包&lt;/li>
&lt;li>libguestfs: 调用libguestfs的工具包&lt;/li>
&lt;li>nbd: 调用nbd模块的工具包&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>downloader: 下载代码，包括镜像、快照等下载&lt;/li>
&lt;li>guestfs: 主要用来mount完虚拟机磁盘后，检测磁盘的fs，并做一些初始化操作&lt;/li>
&lt;li>guestman: host服务中，虚拟机相关接口&lt;/li>
&lt;li>host_health: 宿主机健康检查相关接口&lt;/li>
&lt;li>hostdeployer: host-deployer服务代码，host-deployer主要用来初始化虚拟机&lt;/li>
&lt;li>hosthandler: host服务中，宿主机相关接口&lt;/li>
&lt;li>storageman: host服务中，存储相关接口&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/httperrors">httperrors&lt;/a>: web服务errors工具包&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/i18n">i18n&lt;/a>: 本地化工具包&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/image">image&lt;/a>: glance服务代码
&lt;ul>
&lt;li>drivers: 存储driver&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/keystone">keystone&lt;/a>: keystone服务代码，主要是鉴权以及用户管理&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/lbagent">lbagent&lt;/a>: 负载均衡agent代码&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/logger">logger&lt;/a>: 日志服务&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/mcclient">mcclient&lt;/a>: 后端服务通用client代码
&lt;ul>
&lt;li>auth: 鉴权相关&lt;/li>
&lt;li>informer: model订阅通知&lt;/li>
&lt;li>modules: 每种资源对应一个module&lt;/li>
&lt;li>options: 请求的结构体，目前主要被climc调用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/monitor">monitor&lt;/a>: 监控服务&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/multicloud">multicloud&lt;/a>: 多云纳管，纳管各种云的代码，实现cloudpods定义的资源接口
&lt;ul>
&lt;li>aliyun: 阿里云纳管
&lt;ul>
&lt;li>shell: 每个云都会实现一个命令行工具，方便调试，对应cmd/aliyuncli&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/notify">notify&lt;/a>: 通知服务
&lt;ul>
&lt;li>rpc: 通知服务的rpc模块，用于调用notify-plugins组件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/proxy">proxy&lt;/a>: web框架调用的代理代码&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/s3gateway">s3gateway&lt;/a>: s3网关服务&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/scheduler">scheduler&lt;/a>: 调度器服务
&lt;ul>
&lt;li>algorithm: 调度的两大步骤
&lt;ul>
&lt;li>predicates: 过滤宿主机&lt;/li>
&lt;li>priorities: 给宿主机打分&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>algorithmprovider: 启用那些predicates和priorities&lt;/li>
&lt;li>api: API数据结构&lt;/li>
&lt;li>cache: 宿主机的缓存，宿主机的信息会缓存，提高调度效率&lt;/li>
&lt;li>core: 核心代码，主要是调度的实现&lt;/li>
&lt;li>test: 调度器的测试代码
&lt;ul>
&lt;li>mock: mock测试&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/util">util&lt;/a>: 工具包
&lt;ul>
&lt;li>alipayclient: 支付宝客户端&lt;/li>
&lt;li>ansible: ansible工具包&lt;/li>
&lt;li>ansiblev2: ansible工具包v2&lt;/li>
&lt;li>atexit: web框架代码&lt;/li>
&lt;li>billing: 计费工具&lt;/li>
&lt;li>bitmap: 位图&lt;/li>
&lt;li>cephutils: cepu存储&lt;/li>
&lt;li>cgrouputils: Ccroup&lt;/li>
&lt;li>choices: 命令行工具中的选项参数&lt;/li>
&lt;li>fileutils2: 文件操作工具包&lt;/li>
&lt;li>fuseutils: fuse工具包&lt;/li>
&lt;li>gin: web框架gin&lt;/li>
&lt;li>httputils: http工具包，主要用来构造client&lt;/li>
&lt;li>imagetools: 镜像工具&lt;/li>
&lt;li>influxdb: influxdb&lt;/li>
&lt;li>logclient: 日志client，服务资源的操作可以借此记录日志&lt;/li>
&lt;li>qemuimg: 调用qemu-img 工具包&lt;/li>
&lt;li>qemutils: qemu工具包&lt;/li>
&lt;li>rbacutils: rbac鉴权工具包&lt;/li>
&lt;li>regutils2: 正则工具包&lt;/li>
&lt;li>s3auth: s3鉴权&lt;/li>
&lt;li>vmdkutils: vmware vmdk工具包&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/vpcagent">vpcagent&lt;/a>: vpc agent服务，实现私有云的vpc功能&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/webconsole">webconsole&lt;/a>: webconsole服务，比如vnc接口&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/pkg/yunionconf">yunionconf&lt;/a>: 配置服务&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/cloudpods/tree/release/3.8/scripts">scripts&lt;/a>: 开发用到的各种脚本
&lt;ul>
&lt;li>gencopyright.sh: 生成copyright&lt;/li>
&lt;li>cherry_pick_pull.sh: 最常用的，cherry pick PR 到其他分支&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="前端代码结构">前端代码结构&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers">containers&lt;/a>: 功能模块（对应一级菜单）
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/Dashboard">Dashboard&lt;/a>: 控制面板
&lt;ul>
&lt;li>components: 模块内组件&lt;/li>
&lt;li>extends: 控制面板不同种类的磁贴目录&lt;/li>
&lt;li>locales: 国际化（控制面板部分）&lt;/li>
&lt;li>router: 路由&lt;/li>
&lt;li>sections: 磁贴配置时使用的业务组件&lt;/li>
&lt;li>styles: 样式文件&lt;/li>
&lt;li>utils: 工具方法&lt;/li>
&lt;li>views: 页面展示文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/Cloudenv">Cloudenv&lt;/a>: 多云管理
&lt;ul>
&lt;li>contants: 模块内常量&lt;/li>
&lt;li>locales: 国际化（当前模块部分）&lt;/li>
&lt;li>router: 路由（当前模块部分）&lt;/li>
&lt;li>sections: 业务组件&lt;/li>
&lt;li>utils: 工具方法&lt;/li>
&lt;li>views: 模块页面（对应二级菜单）
&lt;ul>
&lt;li>cloudaccount: 模块名
&lt;ul>
&lt;li>components: 组件目录，其中 List.vue 为当前二级菜单模块的列表页&lt;/li>
&lt;li>create: 新建相关页面&lt;/li>
&lt;li>dialogs: 弹框组件&lt;/li>
&lt;li>mixins: 提供当前模块列表、详情、新建、弹框等使用的mixin，常见singleAction.js（列表单行操作按钮）与columns.js（定义列表表头）&lt;/li>
&lt;li>sidepage: 包含但不限于详情页的侧边栏组件&lt;/li>
&lt;li>utils: 工具方法&lt;/li>
&lt;li>index.vue: 当前模块的入口文件&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/Compute">Compute&lt;/a>: 主机
&lt;ul>
&lt;li>以下各模块代码结构同 多云管理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/DB">DB&lt;/a>: 数据库&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/Helm">Helm&lt;/a>: 运维工具&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/IAM">IAM&lt;/a>: 认证与安全&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/K8S">K8S&lt;/a>: 容器&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/Middleware">Middleware&lt;/a>: 中间件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/Monitor">Monitor&lt;/a>: 监控&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/Network">Network&lt;/a>: 网络&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/containers/Storage">Storage&lt;/a>: 存储&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/mock">mock&lt;/a>: API管理（测试用）&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/public">public&lt;/a>:
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/public/index.html">index.html&lt;/a>: 入口页面&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/scope">scope&lt;/a>: 授权相关
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/scope/assets">assets&lt;/a>: 存放全局自定义icon&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/scope/router">router&lt;/a>: 路由（登录授权部分）&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/scope/store">store&lt;/a>: 状态管理（登录授权部分）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/scripts">scripts&lt;/a>: 可执行脚本&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src">src&lt;/a>: 源码目录
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/assets">assets&lt;/a>: 静态资源&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/components">components&lt;/a>: 全局通用组件（可直接使用，无需引入）&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/config">config&lt;/a>: 配置，包含插件、主题、语言、渠道等&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/constants">constants&lt;/a>: 全局常量，包含多云类型、全局搜索、色彩配置、监控等&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/layouts">layouts&lt;/a>: 页面排版相关组件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/locales">locales&lt;/a>: 国际化（全局）&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/mixins">mixins&lt;/a>: 全局mixin&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/plugins">plugins&lt;/a>: 插件目录&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/router">router&lt;/a>: 全局路由（包含scope和containers中的路由）&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/sections">sections&lt;/a>: 全局业务组件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/store">store&lt;/a>: 全局状态管理&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/styles">styles&lt;/a>: 样式&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/tools">tools&lt;/a>: 包含国际化插件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/utils">utils&lt;/a>: 全局工具方法（http、表单验证、列表、echart、storage、授权、error等）&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/src/views">views&lt;/a>: 页面（用户信息、工单信息、全局搜索、邮箱验证等）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/tests">tests&lt;/a>: 测试文件目录&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/upload">upload&lt;/a>: 打包发布流程配置&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/.env.development">.env.development&lt;/a>: 开发环境变量&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/.env.production">.env.production&lt;/a>: 生产环境变量&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/.gitignore">.gitignore&lt;/a>: Git忽略文件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/package.json">package.json&lt;/a>: npm包配置文件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/package-lock.json">package-lock.json&lt;/a>: npm包版本锁定文件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/yarn.lock">yarn.lock&lt;/a>: npm包版本锁定文件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/vue.config.js">vue.config.js&lt;/a>: Vue配置文件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/README.md">README.md&lt;/a>: 项目介绍&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/.eslintrc.js">.eslintrc.js&lt;/a>: ESlint配置文件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/.travirs.yml">.travirs.yml&lt;/a>: Travis CI配置文件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/babel.config.js">babel.config.js&lt;/a>: Babel配置文件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/Dockerfile">Dockerfile&lt;/a>: 构建镜像文件&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/dashboard/tree/master/jest.config.js">jest.config.js&lt;/a>: 单元测试配合文件&lt;/li>
&lt;/ul></description></item><item><title>Docs: 问题排查工具</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/devtools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/devtools/</guid><description>
&lt;p>本节介绍有助于调试服务程序的工具和API。&lt;/p>
&lt;h2 id="内置api">内置API&lt;/h2>
&lt;p>每个采用Cloudpods服务框架的服务都会自动注册一系列的API，用于获得服务的关键运行指标和状态，方便诊断服务程序问题。下面逐一介绍。&lt;/p>
&lt;h3 id="内置状态api">内置状态API&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>请求方法&lt;/th>
&lt;th>API路径&lt;/th>
&lt;th>climc子命令&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/stats&lt;/td>
&lt;td>api-stats-show&lt;/td>
&lt;td>对应服务的每个API URL的请求统计，累计请求次数，平均请求延时等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/db_stats&lt;/td>
&lt;td>db-stats-show&lt;/td>
&lt;td>对应服务的数据库统计，包括最大连接数，活跃连接数等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/worker_stats&lt;/td>
&lt;td>worker-stats-show&lt;/td>
&lt;td>对应服务内的goroutine池的worker的统计，包括每个worker的活跃数量，队列长度等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/version&lt;/td>
&lt;td>version-show&lt;/td>
&lt;td>服务的版本号&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="profile-api">Profile API&lt;/h3>
&lt;p>Cloudpods服务内置了golang的profile工具(&lt;a href="https://pkg.go.dev/net/http/pprof">https://pkg.go.dev/net/http/pprof&lt;/a>)，可以通过调用这些API获得服务的profile数据。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>请求方法&lt;/th>
&lt;th>API路径&lt;/th>
&lt;th>对应pprof方法&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/debug/pprof/&lt;/td>
&lt;td>pprof.Index&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/debug/pprof/cmdline&lt;/td>
&lt;td>pprof.Cmdline&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/debug/pprof/profile&lt;/td>
&lt;td>pprof.Profile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/debug/pprof/symbol&lt;/td>
&lt;td>pprof.Symbol&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST&lt;/td>
&lt;td>/debug/pprof/symbol&lt;/td>
&lt;td>pprof.Symbol&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET&lt;/td>
&lt;td>/debug/pprof/trace&lt;/td>
&lt;td>pprof.Trace&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="获取调用栈">获取调用栈&lt;/h3>
&lt;p>可以通过给服务进程发送SIGUSR1信号，触发服务进程打印当前调用栈。该方法有助于发现程序Block的函数调用栈，找到阻塞的函数方法。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>使用场景&lt;/th>
&lt;th>可能涉及的服务&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>kvm主机创建, 或相关操作&lt;/td>
&lt;td>region, host, host-deployer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kvm镜像相关&lt;/td>
&lt;td>glance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vmware主机相关&lt;/td>
&lt;td>region, esxi-agent, host-deployer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>其他主机相关&lt;/td>
&lt;td>region&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>系统运行缓慢&lt;/td>
&lt;td>region, keystone&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>死锁&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>日志关键字:
&lt;ul>
&lt;li>queue full, task dropped&lt;/li>
&lt;li>stucking for a while&lt;/li>
&lt;li>WorkerManager task has been busy for 1923 cycles&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">
&lt;span style="color:#8f5902;font-style:italic"># 登录控制节点，列出所有服务pod&lt;/span>
$ kubectl get pods -n onecloud
NAME READY STATUS RESTARTS AGE
default-ansibleserver-7b5d9857df-qbfbf 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-apigateway-75ddb7464d-xhbbv 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-autoupdate-6fc9d9f9cc-jgfpl 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-baremetal-agent-6bcc88655-ggtxb 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-climc-b8b6b5b86-lx24v 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-cloudevent-759df4fd89-qpmfw 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-cloudid-59f4798789-7sgjb 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-cloudmon-7f9554cc9-vk8ht 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-cloudnet-7dfd5f8485-9lf8v 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-cloudproxy-645774fc44-jjn4n 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-devtool-766dd9b758-qj6z6 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-esxi-agent-569cdff69f-mcs8l 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-etcd-7ldqpxjkm4 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 96d
default-glance-74df5dbf7f-hx4k9 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-host-8nkh5 3/3 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-host-9db2z 3/3 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-host-deployer-6f6bx 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-host-deployer-lkn2r 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-host-deployer-tfrd2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-host-image-72wdn 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">13&lt;/span> 34d
default-host-image-89rp8 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 34d
default-host-image-lzgnt 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 34d
default-host-image-nsvbs 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 34d
default-host-t42qb 3/3 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-influxdb-9465c896b-526t5 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 96d
default-itsm-fcc57bbf7-w24x2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-keystone-5f5f9f66d5-6x6j2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-kubeserver-94b9cc6cb-xdl58 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-logger-7cb764b4c5-884vl 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-meter-68dbd99767-4n9n8 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-monitor-7868d6695f-dwprp 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-notify-67dd949bd4-fpcdf 11/11 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-onecloud-service-operator-858f7687ff-f5rtm 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-ovn-north-844bc977-pq28d 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 96d
default-region-65f4b4445d-lqklc 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-region-dns-js5tc 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-s3gateway-6d57886b6-xsgn7 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-scheduler-69589964c8-br265 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10h
default-suggestion-5d4b588449-b6fzk 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-telegraf-6mwjs 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 9h
default-telegraf-9w9fp 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 9h
default-telegraf-sfpk7 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-vpcagent-6459584bfc-8wvkl 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-web-849dc55988-bxlws 3/3 Running &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 10h
default-webconsole-75549f45dd-4nn6w 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-yunionagent-hvkzw 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
default-yunionconf-85bdb759d6-f6fzt 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 10h
onecloud-operator-c79f98c6c-lndnb 0/1 CrashLoopBackOff &lt;span style="color:#0000cf;font-weight:bold">73&lt;/span> 10h
&lt;span style="color:#8f5902;font-style:italic"># 这里以region服务举例, 查看region pod 日志, 这里需要观察一会，看是否会出现上面的列出的日志关键字&lt;/span>
$ kubectl logs -n onecloud default-region-65f4b4445d-lqklc --tail &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> -f
&lt;span style="color:#8f5902;font-style:italic"># 另起一个终端，进入到region的pod&lt;/span>
$ kubectl &lt;span style="color:#204a87">exec&lt;/span> -it -n onecloud default-region-65f4b4445d-lqklc -- /bin/sh
&lt;span style="color:#8f5902;font-style:italic"># 先记录当前服务的版本信息&lt;/span>
$ /opt/yunion/bin/region -v
&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;major&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;0&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;minor&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;0&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;gitVersion&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;v3.8.8-20220330.0&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;gitBranch&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;release/3.8&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;gitCommit&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;8b24ebdac&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;gitTreeState&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;dirty&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;buildDate&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;2022-03-30T14:53:38Z&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;goVersion&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;go1.15.15&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;compiler&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;gc&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;platform&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;linux/amd64&amp;#34;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 查询当前服务的进程pid, 这里看到region的pid为1, host服务的pid会有所不同&lt;/span>
$ ps -elf &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep region
&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> root 42:02 /opt/yunion/bin/region --config /etc/yunion/region.conf
&lt;span style="color:#0000cf;font-weight:bold">782&lt;/span> root 0:00 grep region
&lt;span style="color:#8f5902;font-style:italic"># 发送信号`SIGUSR1`到region服务进程，获取进程堆栈信息 kill -s SIGUSR1 &amp;lt;pid&amp;gt;&lt;/span>
$ &lt;span style="color:#204a87">kill&lt;/span> -s SIGUSR1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># region服务的最新日志会dump堆栈信息&lt;/span>
$ kubectl logs -n onecloud default-region-65f4b4445d-lqklc --tail &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> -f
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info &lt;span style="color:#0000cf;font-weight:bold">220331&lt;/span> 03:30:29 appsrv.&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>*Application&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.ServeHTTP&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>appsrv.go:246&lt;span style="color:#ce5c00;font-weight:bold">)]&lt;/span> &lt;span style="color:#000">9d0MzJpH6aqIdfUKdfMyUK4gNV4&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> c3ee55 GET /groupguests?admin&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>true&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">details&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>false&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>filter.0&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>updated_at.ge%28%270001-01-01+00%3A00%3A00%27%29&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>filter.1&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>manager_id.isnullorempty%28%29&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>filter.2&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>external_id.isnullorempty%28%29&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>filter.3&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>cloud_env%3Donpremise&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">limit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1024&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">order&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>asc&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>order_by.0&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>updated_at&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">show_emulated&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>false&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">system&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>10.105.87.255:8240:vpcagent&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 1.77ms
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info &lt;span style="color:#0000cf;font-weight:bold">220331&lt;/span> 03:30:29 appsrv.&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>*Application&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.ServeHTTP&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>appsrv.go:246&lt;span style="color:#ce5c00;font-weight:bold">)]&lt;/span> &lt;span style="color:#000">9d0MzJpH6aqIdfUKdfMyUK4gNV4&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> f7dcf7 GET /groupnetworks?admin&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>true&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">details&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>false&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>filter.0&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>updated_at.ge%28%270001-01-01+00%3A00%3A00%27%29&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>filter.1&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>manager_id.isnullorempty%28%29&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>filter.2&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>external_id.isnullorempty%28%29&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>filter.3&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>cloud_env%3Donpremise&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">limit&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1024&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">offset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">order&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>asc&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>order_by.0&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>updated_at&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">show_emulated&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>false&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">system&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>10.105.87.255:8240:vpcagent&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 1.77ms
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info &lt;span style="color:#0000cf;font-weight:bold">220331&lt;/span> 03:30:30 appsrv.&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>*Application&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>.ServeHTTP&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>appsrv.go:246&lt;span style="color:#ce5c00;font-weight:bold">)]&lt;/span> &lt;span style="color:#000">9d0MzJpH6aqIdfUKdfMyUK4gNV4&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">200&lt;/span> 3985fa PUT /storages/1b5895d9-3517-4e45-84f0-59db7660d840 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>10.40.180.64:44988&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 53.49ms
goroutine profile: total &lt;span style="color:#0000cf;font-weight:bold">83&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">9&lt;/span> @ 0x43c425 0x44c58f 0xb5230d 0x472521
&lt;span style="color:#8f5902;font-style:italic"># 0xb5230c github.com/go-sql-driver/mysql.(*mysqlConn).startWatcher.func1+0xcc /root/go/src/yunion.io/x/onecloud/vendor/github.com/go-sql-driver/mysql/connection.go:621&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> @ 0x43c425 0x44c58f 0xaac0da 0x472521
&lt;span style="color:#8f5902;font-style:italic"># 0xaac0d9 google.golang.org/grpc.newClientStream.func5+0xd9 /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/stream.go:318&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> @ 0x43c425 0x40856f 0x4081eb 0x10aab8f 0x472521
&lt;span style="color:#8f5902;font-style:italic"># 0x10aab8e yunion.io/x/onecloud/pkg/cloudcommon/etcd.(*SEtcdClient).Watch.func1+0x24e /root/go/src/yunion.io/x/onecloud/pkg/cloudcommon/etcd/etcd.go:332&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> @ 0x43c425 0x44c58f 0x4a385a 0x472521
&lt;span style="color:#8f5902;font-style:italic"># 0x4a3859 context.propagateCancel.func1+0xd9 /usr/lib/go/src/context/context.go:279&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> @ 0x43c425 0x44c58f 0xa6e693 0xa6e2b0 0xa6f475 0x4b2087 0xa6f3b2 0xa6f36f 0xa9ddc3 0xa9e9ed 0xa9f35b 0xaa6a4e 0xaac666 0xaa50be 0xaa5d65 0xc662c2 0xd22a5c 0x472521
&lt;span style="color:#8f5902;font-style:italic"># 0xa6e692 google.golang.org/grpc/internal/transport.(*recvBufferReader).readClient+0xd2 /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/internal/transport/transport.go:186&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xa6e2af google.golang.org/grpc/internal/transport.(*recvBufferReader).Read+0x18f /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/internal/transport/transport.go:166&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xa6f474 google.golang.org/grpc/internal/transport.(*transportReader).Read+0x54 /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/internal/transport/transport.go:479&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0x4b2086 io.ReadAtLeast+0x86 /usr/lib/go/src/io/io.go:314&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xa6f3b1 io.ReadFull+0xd1 /usr/lib/go/src/io/io.go:333&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xa6f36e google.golang.org/grpc/internal/transport.(*Stream).Read+0x8e /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/internal/transport/transport.go:463&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xa9ddc2 google.golang.org/grpc.(*parser).recvMsg+0x62 /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/rpc_util.go:510&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xa9e9ec google.golang.org/grpc.recvAndDecompress+0x4c /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/rpc_util.go:641&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xa9f35a google.golang.org/grpc.recv+0x9a /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/rpc_util.go:709&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xaa6a4d google.golang.org/grpc.(*csAttempt).recvMsg+0xed /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/stream.go:884&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xaac665 google.golang.org/grpc.(*clientStream).RecvMsg.func1+0x45 /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/stream.go:735&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xaa50bd google.golang.org/grpc.(*clientStream).withRetry+0x37d /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/stream.go:589&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xaa5d64 google.golang.org/grpc.(*clientStream).RecvMsg+0x104 /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/stream.go:734&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xc662c1 go.etcd.io/etcd/api/v3/etcdserverpb.(*watchWatchClient).Recv+0x61 /root/go/src/yunion.io/x/onecloud/vendor/go.etcd.io/etcd/api/v3/etcdserverpb/rpc.pb.go:6714&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 0xd22a5b go.etcd.io/etcd/client/v3.(*watchGrpcStream).serveWatchClient+0x5b /root/go/src/yunion.io/x/onecloud/vendor/go.etcd.io/etcd/client/v3/watch.go:757&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> @ 0x43c425 0x44c58f 0xd1fedc 0x472521
&lt;span style="color:#8f5902;font-style:italic"># 0xd1fedb go.etcd.io/etcd/client/v3.(*watchGrpcStream).run+0x37b /root/go/src/yunion.io/x/onecloud/vendor/go.etcd.io/etcd/client/v3/watch.go:537&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span> @ 0x43c425 0x44c58f 0xd22ea5 0x472521
&lt;span style="color:#8f5902;font-style:italic"># 0xd22ea4 go.etcd.io/etcd/client/v3.(*watchGrpcStream).serveSubstream+0x284 /root/go/src/yunion.io/x/onecloud/vendor/go.etcd.io/etcd/client/v3/watch.go:803&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> @ 0x43c425 0x40856f 0x4081ab 0xa95a89 0x472521
&lt;span style="color:#8f5902;font-style:italic"># 0xa95a88 google.golang.org/grpc.(*addrConn).resetTransport+0x768 /root/go/src/yunion.io/x/onecloud/vendor/google.golang.org/grpc/clientconn.go:1156&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> @ 0x43c425 0x40856f 0x4081eb 0x10aa8b8 0x472521
&lt;span style="color:#8f5902;font-style:italic"># 0x10aa8b7 yunion.io/x/onecloud/pkg/cloudcommon/etcd.(*SEtcdClient).startSession.func1+0x37 /root/go/src/yunion.io/x/onecloud/pkg/cloudcommon/etcd/etcd.go:170 &lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>将收集到的服务版本信息及堆栈信息发送到 &lt;a href="https://github.com/yunionio/cloudpods/issues">https://github.com/yunionio/cloudpods/issues&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Operator 相关</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/operator-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/operator-intro/</guid><description>
&lt;p>&lt;a href="https://github.com/yunionio/cloudpods-operator">cloudpods-operator&lt;/a> 是单独编写的一个组件，作为一个长期运行的服务运行在 Kubernetes 集群内部，作用是自动搭建和维护 Cloudpods 所有服务。详细的介绍可以参考 &lt;a href="https://github.com/yunionio/cloudpods-operator/blob/master/docs/intro.md">cloudpods-operator 工作原理&lt;/a>。&lt;/p>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>operator 在 K8S 里面创建一个叫做 OnecloudCluster 的资源，该资源里面定义了各个服务组件要使用的 docker 镜像仓库和版本，通过修改 OnecloudCluster 这个资源，可以实现对各个服务多方面的镜像版本控制。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查看 OnecloudCluster 资源&lt;/span>
$ kubectl get onecloudclusters.onecloud.yunion.io -n onecloud
NAME KEYSTONE
default registry.cn-beijing.aliyuncs.com/yunionio/keystone:archdev-v36
&lt;span style="color:#8f5902;font-style:italic"># 查看 default OnecloudCluster 资源的 YAML 详情&lt;/span>
$ kubectl get onecloudclusters.onecloud.yunion.io -n onecloud default -o yaml
&lt;span style="color:#8f5902;font-style:italic"># 进入 edit 编辑界面&lt;/span>
$ kubectl edit onecloudclusters -n onecloud default
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="镜像控制">镜像控制&lt;/h2>
&lt;p>OnecloudCluster 资源的镜像版本控制的关键属性简介如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th>作用&lt;/th>
&lt;th>默认值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>.spec.imageRepository&lt;/td>
&lt;td>控制所有服务的镜像仓库地址&lt;/td>
&lt;td>registry.cn-beijing.aliyuncs.com/yunionio&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.spec.version&lt;/td>
&lt;td>控制所有服务镜像的 tag&lt;/td>
&lt;td>由部署时指定，比如 &amp;lsquo;v3.6.9&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.spec.$(组件名).repository&lt;/td>
&lt;td>控制该组件镜像的仓库地址&lt;/td>
&lt;td>默认没有设置，可以通过设置该值单独控制组件的镜像仓库&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.spec.$(组件名).tag&lt;/td>
&lt;td>控制该组件镜像的 tag&lt;/td>
&lt;td>默认没有设置，可以通过设置该值单独控制组件的 tag&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="统一修改版本">统一修改版本&lt;/h3>
&lt;p>通过修改 default onecloudcluster &lt;code>spec.imageRepository&lt;/code> 和 &lt;code>spec.version&lt;/code> 属性，就会把所有服务的镜像统一更改，以下是使用场景举例:&lt;/p>
&lt;ol>
&lt;li>把所有的服务镜像通一修改到 archdev-v36，修改 &lt;code>spec.version&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 这里的 oc 是 onecloudcluster 的简写，也可以识别&lt;/span>
$ kubectl edit oc -n onecloud default
...
tolerations:
- effect: NoSchedule
key: node-role.kubernetes.io/master
- effect: NoSchedule
key: node-role.kubernetes.io/controlplane
&lt;span style="color:#8f5902;font-style:italic"># 修改这里的 version ，然后所有服务对应 pod 里面的 image tag 都会变成 archdev-v36&lt;/span>
version: archdev-v36
vpcAgent:
disable: &lt;span style="color:#204a87">false&lt;/span>
image: registry.cn-beijing.aliyuncs.com/yunionio/vpcagent:archdev-v36
...
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>修改所有服务镜像仓库到 registry.cn-beijing.aliyuncs.com/zexi 拉取镜像，修改 &lt;code>spec.imageRepository&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl edit oc -n onecloud default
spec:
...
tolerations:
- effect: NoSchedule
key: node-role.kubernetes.io/master
- effect: NoSchedule
key: node-role.kubernetes.io/controlplane
&lt;span style="color:#8f5902;font-style:italic"># 这里修改 imageRepository 的值，所有的服务对应的 pod 里面的 image 都会从 `registry.cn-beijing.aliyuncs.com/zexi` 这个仓库拉取&lt;/span>
imageRepository: registry.cn-beijing.aliyuncs.com/zexi
influxdb:
...
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>&lt;code>spec.imageRepository&lt;/code> 和 &lt;code>spec.version&lt;/code> 可以同时组合使用，这样就可以统一配置各个服务的镜像地址。&lt;/li>
&lt;/ol>
&lt;p>修改完这些属性后，可以查看 pods 的状态，会发现所有的 pods 都在重新拉取镜像启动。&lt;/p>
&lt;h3 id="单独修改组件版本">单独修改组件版本&lt;/h3>
&lt;p>通过修改各个组件里面的 &lt;code>spec.$(component).repository&lt;/code> 和 &lt;code>spec.$(component).tag&lt;/code> 属性，就会把这个服务对应的 deployment 或者 daemonset 的 image 修改。&lt;/p>
&lt;p>这两个属性设置 image 的优先级要高于外层的 &lt;code>spec.imageRepository&lt;/code> 和 &lt;code>spec.version&lt;/code>。也就是说通过修改组件的 &lt;code>repository&lt;/code> 和 &lt;code>tag&lt;/code> 属性，可以做到其它组件镜像不变的情况下，修改单个组件的 image ，这种机制在开发的时候有用。&lt;/p>
&lt;p>下面以 region 为例：&lt;/p>
&lt;ol>
&lt;li>指定 &lt;code>spec.regionServer.repository&lt;/code> 为 &lt;code>192.168.0.1:5000/yunionio&lt;/code> 和 &lt;code>spec.regionServer.tag&lt;/code> 为 &lt;code>lzx-dev&lt;/code>，将会把 default-region deployment 里面的 image 改为: &lt;code>192.168.0.1:5000/yunionio/region:lzx-dev&lt;/code>。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl edit oc -n onecloud default
spec:
...
regionServer:
disable: &lt;span style="color:#204a87">false&lt;/span>
dnsDomain: cloud.onecloud.io
&lt;span style="color:#8f5902;font-style:italic"># 这里设置 repository&lt;/span>
repository: 192.168.0.1:5000/yunionio
&lt;span style="color:#8f5902;font-style:italic"># 这里设置 tag&lt;/span>
tag: lzx-dev
dnsServer: 10.127.40.252
image: registry.cn-beijing.aliyuncs.com/yunionio/region:archdev-v36
imagePullPolicy: IfNotPresent
replicas: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
...
&lt;span style="color:#8f5902;font-style:italic"># 现在查看 default-region 这个 deployment&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 会发现里面的 image 已经被 operator 按照 $(spec.regionServer.repository)/region:$(spec.regionServer.tag) 的格式修改了&lt;/span>
$ kubectl get deployment -n onecloud default-region -o yaml &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep image:
image: 192.168.0.1:5000/yunionio/region:lzx-dev
image: 192.168.0.1:5000/yunionio/region:lzx-dev
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Ceph对接</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/ceph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/ceph/</guid><description>
&lt;h1 id="说明">说明&lt;/h1>
&lt;ul>
&lt;li>release/3.8 及之后版本将使用ceph及rbd命令直接操作ceph集群&lt;/li>
&lt;li>计算节点使用rbd及ceph命令要和使用的ceph集群版本保持一致，否则会出现不兼容情况，导致资源创建删除失败&lt;/li>
&lt;li>若使用了非开源版ceph，请在计算节点装好存储厂商提供的ceph及rbd命令，请确保ceph及rbd命令软连接或直接置于以下&lt;strong>任意&lt;/strong>路径里面
&lt;ul>
&lt;li>/usr/local/sbin&lt;/li>
&lt;li>/usr/local/bin&lt;/li>
&lt;li>/sbin&lt;/li>
&lt;li>/bin&lt;/li>
&lt;li>/usr/sbin&lt;/li>
&lt;li>/usr/bin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>若对接了多个存储厂商，且各厂商提供的rbd命令相互不兼容，需要考虑rbd命令和宿主机挂载关系，避免多套不兼容存储挂载到同一个宿主机&lt;/li>
&lt;/ul></description></item><item><title>Docs: 定位后端代码</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/api-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/api-model/</guid><description>
&lt;h1 id="查看前端请求">查看前端请求&lt;/h1>
&lt;p>这里以虚拟机举例&lt;/p>
&lt;ul>
&lt;li>
&lt;p>打开虚拟机列表界面
&lt;img src="../images/vms.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>右键打开检查并切换到Network
&lt;img src="../images/vms-network.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点击刷新并查看网络请求
&lt;img src="../images/vms-api.png" alt="">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这里看到API请求是 GET &lt;a href="https://office.ioito.com/api/v2/servers">https://office.ioito.com/api/v2/servers&lt;/a> 其他请求可以查看下&lt;a href="../framework/#model-dispatcher">API请求方法&lt;/a>&lt;/p>
&lt;p>可以确定是请求的是servers资源&lt;/p>
&lt;h1 id="通过资源名称定位代码">通过资源名称定位代码&lt;/h1>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 进入到cloudpods源码目录&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> cloudpods
&lt;span style="color:#8f5902;font-style:italic"># 通过关键字&amp;#39;servers&amp;#39;查找&lt;/span>
$ grep -r &lt;span style="color:#4e9a06">&amp;#39;servers&amp;#39;&lt;/span> pkg/mcclient/modules
pkg/mcclient/modules/compute/mod_servers.go: &lt;span style="color:#000">Servers&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> ServerManager&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>modules.NewComputeManager&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;server&amp;#34;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#34;servers&amp;#34;&lt;/span>,
pkg/mcclient/modules/compute/mod_skus.go: &lt;span style="color:#000">ServerSkus&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> ServerSkusManager&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>modules.NewComputeManager&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;serversku&amp;#34;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#34;serverskus&amp;#34;&lt;/span>,
&lt;span style="color:#8f5902;font-style:italic"># 可以看到servers属于compute(region)服务,现在到compute服务的模型里面搜索servers关键字&lt;/span>
$ grep -r &lt;span style="color:#4e9a06">&amp;#39;servers&amp;#39;&lt;/span> pkg/compute/models
pkg/compute/models/loadbalanceragents.go: &lt;span style="color:#000">servers&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;{{ .telegraf.haproxy_input_stats_socket }}&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
pkg/compute/models/skus.go: &lt;span style="color:#4e9a06">&amp;#34;serverskus_tbl&amp;#34;&lt;/span>,
pkg/compute/models/skus.go: &lt;span style="color:#4e9a06">&amp;#34;serversku&amp;#34;&lt;/span>,
pkg/compute/models/skus.go: &lt;span style="color:#4e9a06">&amp;#34;serverskus&amp;#34;&lt;/span>,
pkg/compute/models/skus.go: &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> httperrors.NewNotEmptyError&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;now allow to delete inuse instance_type.please remove related servers first: %s&amp;#34;&lt;/span>, self.Name&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/skus.go: &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> httperrors.NewNotEmptyError&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;instance_type used by servers&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/skus.go: lockman.LockRawObject&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ctx, &lt;span style="color:#4e9a06">&amp;#34;serverskus&amp;#34;&lt;/span>, region.Id&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/skus.go: defer lockman.ReleaseRawObject&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ctx, &lt;span style="color:#4e9a06">&amp;#34;serverskus&amp;#34;&lt;/span>, region.Id&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/skus.go: lockman.LockRawObject&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ctx, &lt;span style="color:#4e9a06">&amp;#34;serverskus&amp;#34;&lt;/span>, region.Id&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/skus.go: defer lockman.ReleaseRawObject&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ctx, &lt;span style="color:#4e9a06">&amp;#34;serverskus&amp;#34;&lt;/span>, region.Id&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/guests.go:// +onecloud:swagger-gen-model-plural&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>servers
pkg/compute/models/guests.go: &lt;span style="color:#4e9a06">&amp;#34;servers&amp;#34;&lt;/span>,
pkg/compute/models/guests.go: // fake delete expired prepaid servers
pkg/compute/models/groups.go: &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> nil, errors.Wrapf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>httperrors.ErrInvalidStatus, &lt;span style="color:#4e9a06">&amp;#34;inconsistent networkId for member servers&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/hosts.go: &lt;span style="color:#4e9a06">&amp;#34;__on_host_down&amp;#34;&lt;/span>: &lt;span style="color:#4e9a06">&amp;#34;shutdown-servers&amp;#34;&lt;/span>,
pkg/compute/models/hosts.go: _, err :&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> self.Request&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ctx, userCred, &lt;span style="color:#4e9a06">&amp;#34;POST&amp;#34;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#34;/hosts/shutdown-servers-on-host-down&amp;#34;&lt;/span>,
pkg/compute/models/hosts.go: db.OpsLog.LogEvent&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>host, db.ACT_HOST_DOWN, fmt.Sprintf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;migrate servers failed %s&amp;#34;&lt;/span>, err&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>, userCred&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/keypairs.go: &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> httperrors.NewNotEmptyError&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Cannot delete keypair used by servers&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/disks.go: &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> httperrors.NewNotEmptyError&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Virtual disk %s(%s) used by virtual servers&amp;#34;&lt;/span>, self.Name, self.Id&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/guest_actions.go: url :&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> fmt.Sprintf&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%s/servers/%s/monitor&amp;#34;&lt;/span>, host.ManagerUri, self.Id&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
pkg/compute/models/guest_actions.go: taskData.Set&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;servers&amp;#34;&lt;/span>, jsonutils.Marshal&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>host.Servers&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 从上可以看到只有 pkg/compute/models/guests.go 文件有完整的 servers 关键字, 可以确定代码就位于此文件&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 我们详细介绍下guests.go文件&lt;/span>
$ cat pkg/compute/models/guests.go &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep &lt;span style="color:#4e9a06">&amp;#39;&amp;#34;servers&amp;#34;&amp;#39;&lt;/span> -A &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> -B &lt;span style="color:#0000cf;font-weight:bold">6&lt;/span>
func init&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">GuestManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>SGuestManager&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
SVirtualResourceBaseManager: db.NewVirtualResourceBaseManager&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>
SGuest&lt;span style="color:#ce5c00;font-weight:bold">{}&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;guests_tbl&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;server&amp;#34;&lt;/span>,
&lt;span style="color:#4e9a06">&amp;#34;servers&amp;#34;&lt;/span>,
&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>,
SRecordChecksumResourceBaseManager: *db.NewRecordChecksumResourceBaseManager&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span>,
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
GuestManager.SetVirtualObject&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>GuestManager&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
GuestManager.SetAlias&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;guest&amp;#34;&lt;/span>, &lt;span style="color:#4e9a06">&amp;#34;guests&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
GuestManager.NameRequireAscii &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">false&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 从上面可以看到这里初始化了虚拟机的Manager, 虚拟机数据是存储在数据库guests_tbl这个表里面&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="特殊api请求说明">特殊API请求说明&lt;/h1>
&lt;p>大部分请求都可以从上面的方法找到后端代码, 但部分API请求是由网关直接注册的
这类的API需要查看&lt;a href="https://github.com/yunionio/cloudpods/tree/master/pkg/apigateway">API网关&lt;/a>代码&lt;/p>
&lt;p>这里以RPC API举例说明&lt;/p>
&lt;ul>
&lt;li>点击获取虚拟机密码查看api请求
&lt;img src="../images/vms-rpc.png" alt="">&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 搜寻rpc关键字&lt;/span>
$ grep -r &lt;span style="color:#4e9a06">&amp;#39;rpc&amp;#39;&lt;/span> pkg/apigateway/handler
pkg/apigateway/handler/rpc.go: h.AddByMethod&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>GET, mf, NewHP&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>RpcHandler, APIVer, &lt;span style="color:#4e9a06">&amp;#34;rpc&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
pkg/apigateway/handler/rpc.go: h.AddByMethod&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>POST, mf, NewHP&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>RpcHandler, APIVer, &lt;span style="color:#4e9a06">&amp;#34;rpc&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 通过查看API网关RpcHandler源码可知, RPC请求是依靠反射调用mcclient模型中的GetXXX或DoXXX实现的&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 这里的XXX是驼峰命名&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 这里看到是GET请求，因此可以知道是调用了servers里面的GetLoginInfo&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 因此我们可以顺利找到相关的实现&lt;/span>
$ grep -r &lt;span style="color:#4e9a06">&amp;#39;GetLoginInfo&amp;#39;&lt;/span> pkg/mcclient/modules/compute
pkg/mcclient/modules/compute/mod_servers.go:func &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>this *ServerManager&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> GetLoginInfo&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>s *mcclient.ClientSession, id string, params jsonutils.JSONObject&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>jsonutils.JSONObject, error&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
pkg/mcclient/modules/compute/mod_hosts.go:func &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>this *HostManager&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> GetLoginInfo&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>s *mcclient.ClientSession, id string, params jsonutils.JSONObject&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>jsonutils.JSONObject, error&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
pkg/mcclient/modules/compute/mod_dbinstanceaccounts.go:func &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>this *SDBInstanceAccountManager&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> GetLoginInfo&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>s *mcclient.ClientSession, id string, params jsonutils.JSONObject&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>jsonutils.JSONObject, error&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
pkg/mcclient/modules/compute/mod_elasticcache.go:func &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>self *ElasticCacheManager&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> GetLoginInfo&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>s *mcclient.ClientSession, id string, params jsonutils.JSONObject&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>jsonutils.JSONObject, error&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
pkg/mcclient/modules/compute/mod_elasticcache.go:func &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>self *ElasticCacheAccountManager&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> GetLoginInfo&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>s *mcclient.ClientSession, id string, params jsonutils.JSONObject&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>jsonutils.JSONObject, error&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 资源纳管</title><link>https://www.cloudpods.org//v3.8/zh/docs/development/resource_sync/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org//v3.8/zh/docs/development/resource_sync/</guid><description/></item></channel></rss>