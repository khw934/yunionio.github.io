<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>云联壹云 – 欢迎来到 OneCloud</title><link>https://www.cloudpods.org/v3.3/docs/</link><description>Recent content in 欢迎来到 OneCloud on 云联壹云</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://www.cloudpods.org/v3.3/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 介绍</title><link>https://www.cloudpods.org/v3.3/docs/howto/baremetal/intro/</link><pubDate>Fri, 19 Jul 2019 20:28:13 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/baremetal/intro/</guid><description>
&lt;h2 id="功能介绍">功能介绍&lt;/h2>
&lt;p>云平台支持 Baremetal(物理机) 管理，提供的功能如下:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>自动化上架: 物理机上架加电启动后，自动注册到云管平台，自动分配BMC IP地址，初始化IPMI账号密码，自动上报物理机硬件配置（CPU、内存、序列号、网卡、磁盘等）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自动化装机: 根据配置要求自动配置 RAID，自动分区格式化磁盘，自动部署操作系统镜像，自动初始化操作系统账号密码，自动分配IP地址，可以植入配置文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生命周期管理: 支持物理机自动化开机，关机，重装系统，远程带外管理，卸载操作系统等操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>与虚拟机共享镜像: 使用虚拟机镜像部署物理机，便于虚拟机和物理机统一操作系统运行环境&lt;/p>
&lt;/li>
&lt;li>
&lt;p>API 支持: 以上操作均支持API操作，便于与其他系统的自动化流程集成&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务器型号支持: 支持Dell、HP、华为、浪潮、联想、超微等主流x86服务器厂商和机型&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RAID 控制器支持: LSI MegaRaid, HP Smart Array, LSI MPT2SAS, LSI MPT3SAS, Mrarvell RAID等&lt;/p>
&lt;/li>
&lt;li>
&lt;p>转换为宿主机: 直接将物理机转换为运行虚拟机的宿主机&lt;/p>
&lt;/li>
&lt;li>
&lt;p>托管已有服务器： 托管已有并装好系统的物理机&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="服务架构">服务架构&lt;/h2>
&lt;p>物理机管理服务架构如下:&lt;/p>
&lt;p>&lt;img src="../images/baremetal-arch.png" alt="物理机管理架构">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Baremetal &amp;lt;-&amp;gt; DHCP Relay： 处理 PXE 网络启动&lt;/p>
&lt;/li>
&lt;li>
&lt;p>DHCP Relay &amp;lt;-&amp;gt; Baremetal Agent:&lt;/p>
&lt;ul>
&lt;li>转发 PXE Boot 请求，获取网络启动相关的信息&lt;/li>
&lt;li>通过 DHCP 和 TFTP 服务下发 PXE 配置
&lt;ul>
&lt;li>云平台定制的&lt;a href="https://github.com/yunionio/yunionos">网络启动小系统(yunionos)&lt;/a> kernel 和 initramfs: 运行 SSH 服务，制作 RAID，收集硬件信息等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Baremetal Agent &amp;lt;-&amp;gt; Region Server:&lt;/p>
&lt;ul>
&lt;li>通过 Region Server 注册物理机记录&lt;/li>
&lt;li>获取网络 IP 地址&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Baremetal Agent &amp;lt;-&amp;gt; Baremetal:&lt;/p>
&lt;ul>
&lt;li>Baremetal 通知 Agent SSH 相关的登录信息&lt;/li>
&lt;li>Agent 通过 SSH 配置 Baremetal 的 IPMI&lt;/li>
&lt;li>Agent 通过 IPMI 控制 Baremetal 开关机等操作&lt;/li>
&lt;li>Agent 通过 SSH 执行做 RAID，装机，销毁等操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Glance Server -&amp;gt; Baremetal: Baremetal 从 Glance server 下载装机镜像&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在交换机上开启 DHCP Relay 功能(或者使用 DHCP Relay软件)，relay 指向 Baremetal Agent&lt;/p>
&lt;ul>
&lt;li>物理机上架通电后，设置 PXE 网络启动，DHCP Relay 会将 PXE Boot 请求转发到 Baremetal Agent，Baremetal Agent 收到 PXE Boot 请求，向 Region Server 注册物理机记录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="技术细节">技术细节&lt;/h2>
&lt;h3 id="注册物理机">注册物理机&lt;/h3>
&lt;p>注册物理机有自动注册和手动注册两种方式，如果 Baremetal Agent 开启了自动注册功能，就会自动在云平台创建 baremetal 记录；如果为手动注册方式，就需要先调用物理机创建接口把对应的 PXE 网卡对应的 MAC 地址注册到平台。&lt;/p>
&lt;p>注册的流程如下:&lt;/p>
&lt;ol>
&lt;li>物理机 PXE 启动时会发送 DHCP PXE boot 的请求，通过 DHCP Relay 请求会到 Baremetal Agent;&lt;/li>
&lt;li>Baremetal Agent 从 DHCP 请求中取出网卡 MAC 地址，拿 MAC 地址向 Region Server 过滤物理机记录;&lt;/li>
&lt;li>Region Server 告诉 Baremetal Agent 改 MAC 地址没有物理机，Baremetal Agent 就会新建记录，并从 Region Server 获取分配对应网段的 IP 地址, 通过内置 DHCP 服务回包给物理机;&lt;/li>
&lt;li>物理机 PXE DHCP 请求获得分配的 IP 地址后，会通过 TFTP 从 Baremetal Agent 下载启动引导文件(kernel 和 initramfs)，然后使用 ramdisk 机制进入我们定制的 initramfs 小系统;&lt;/li>
&lt;li>initramfs 小系统启动后，会启动 sshd 服务，然后修改 root 用户密码，将这些登录信息通知回 Baremetal Agent;&lt;/li>
&lt;li>Baremetal Agent 收到通知后，记录 ssh 登录的信息，开始进行准备工作;&lt;/li>
&lt;li>准备工作包括配置 IPMI，收集硬件信息等，当这些操作完成后，将所有信息上报给 Region Server 完成注册&lt;/li>
&lt;/ol>
&lt;h3 id="yunionos-网络启动小系统">yunionos 网络启动小系统&lt;/h3>
&lt;p>yunionos(&lt;a href="https://github.com/yunionio/yunionos">https://github.com/yunionio/yunionos&lt;/a>) 是我们使用 &lt;a href="https://buildroot.org/">Buildroot&lt;/a> 工具定制的用于 PXE 启动和管理物理机的小型 Linux 系统，作用如下:&lt;/p>
&lt;ol>
&lt;li>运行 sshd 服务，提供 Baremetal Agent 远程执行命令&lt;/li>
&lt;li>包含 LSI MegaRaid, HP Smart Array, LSI MPT2SAS, LSI MPT3SAS, Mrarvell RAID等驱动和工具，用于制作 RAID&lt;/li>
&lt;li>包含 ipmitool 和相关 driver，用于配置和调用 IPMI BMC 管理物理机&lt;/li>
&lt;li>包含 qemu-img, sgdisk, parted 等磁盘分区工具，用于创建操作系统&lt;/li>
&lt;/ol>
&lt;h3 id="ssh-管理">SSH 管理&lt;/h3>
&lt;p>当物理机通过 PXE 进入 yunionos 小系统后会启动 sshd 服务，并将 ssh login 信息通知给 Baremetal Agent，Baremetal Agent 会更新 ssh 相关的登录信息&lt;/p>
&lt;h3 id="raid-配置">RAID 配置&lt;/h3>
&lt;p>RAID 配置由 Baremetal Agent 根据用户的配置，生成 raid 配置命令，通过 ssh 远程控制 yunionos 在物理机上制作 RAID&lt;/p>
&lt;h3 id="安装操作系统">安装操作系统&lt;/h3>
&lt;p>RAID 做完后，Baremetal Agent 会通过 ssh 远程控制 yunionos 安装操作系统和分区，流程如下:&lt;/p>
&lt;ol>
&lt;li>调用 &lt;a href="https://github.com/yunionio/yunionos/blob/master/src/lib/mos/rootcreate.sh">/lib/mos/rootcreate.sh&lt;/a> 将系统创建到磁盘:&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>通过 wget 从 Glance Server 下载用户指定的 image 镜像&lt;/li>
&lt;li>通过 qemu-img convert 命名将 image 写入到磁盘&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>创建好系统后，会根据用户的配置将系统盘 resize 分区&lt;/li>
&lt;li>创建其它分区并格式化&lt;/li>
&lt;li>Baremetal Agent 进行一些网络，磁盘配置的设置：比如 bonding，ip 设置, /etc/fstab, 改变 hostname 等&lt;/li>
&lt;/ol>
&lt;h3 id="开关机">开关机&lt;/h3>
&lt;p>注册好的的物理机会配置好 IPMI, IPMI 相关的信息会记录在数据库，Baremetal Agent 通过 ipmitool 控制开关机&lt;/p>
&lt;h3 id="重装操作系统">重装操作系统&lt;/h3>
&lt;p>类似于安装操作系统，流程上会让安装了操作系统的物理机重新进入 yunionos 小系统，然后重新安装操作系统&lt;/p>
&lt;h3 id="远程访问">远程访问&lt;/h3>
&lt;p>Baremetal Agent 通过 ipmitool sol 接口提供串口控制界面&lt;/p>
&lt;h3 id="删除操作系统">删除操作系统&lt;/h3>
&lt;p>对正在运行操作系统的物理机重启进入 PXE 网络启动，进入 yunionos 小系统，调用 &lt;a href="https://github.com/yunionio/yunionos/blob/master/src/lib/mos/partdestroy.sh">/lib/mos/partdestory.sh&lt;/a> 销毁磁盘分区和相应的 raid 命令销毁 raid 配置&lt;/p></description></item><item><title>Docs: KVM 宿主机</title><link>https://www.cloudpods.org/v3.3/docs/howto/host/kvm/</link><pubDate>Fri, 19 Jul 2019 20:00:14 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/host/kvm/</guid><description>
&lt;p>OneCloud 原生提供基于 kvm 的私有云虚拟机管理功能，运行 kvm 虚拟机的机器叫做宿主机，这种宿主机也叫作 &amp;ldquo;计算节点&amp;rdquo;，上面会运行管理虚拟机、网络和存储的一系列服务，如何部署并上线宿主机请参考: &lt;a href="https://www.cloudpods.org/v3.3/setup/host/">安装部署/计算节点&lt;/a>。&lt;/p>
&lt;h2 id="宿主机操作">宿主机操作&lt;/h2>
&lt;h3 id="查询">查询&lt;/h3>
&lt;p>通过 &lt;code>host-list&lt;/code> 查询宿主机列表，&lt;code>host-show&lt;/code> 查询宿主机详情。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查询 kvm 这种类型的宿主机&lt;/span>
$ climc host-list --hypervisor kvm
&lt;span style="color:#8f5902;font-style:italic"># 查询被禁用的 kvm 宿主机&lt;/span>
$ climc host-list --hypervisor kvm --disabled
&lt;span style="color:#8f5902;font-style:italic"># 查询启用的 kvm 宿主机&lt;/span>
$ climc host-list --hypervisor kvm --enabled
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启用">启用&lt;/h3>
&lt;p>kvm 宿主机上线后，默认是禁用的状态，需要启用才能创建虚拟机。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 找到禁用的宿主机&lt;/span>
$ climc host-list --disabled
&lt;span style="color:#8f5902;font-style:italic"># 启用&lt;/span>
$ climc host-enable &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="禁用">禁用&lt;/h3>
&lt;p>如果完全不想让宿主机创建虚拟机，可以禁用它。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc host-disable &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 上传镜像</title><link>https://www.cloudpods.org/v3.3/docs/howto/image/upload/</link><pubDate>Fri, 19 Jul 2019 11:34:14 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/image/upload/</guid><description>
&lt;h2 id="获取镜像">获取镜像&lt;/h2>
&lt;p>上传镜像之前需要先获取镜像，途径有多种，比如从发行版官网下载用于云平台的镜像，或者自己制作。&lt;/p>
&lt;h3 id="发行版镜像">发行版镜像&lt;/h3>
&lt;p>根据自己对发行版的需要下载发行版镜像，常用的 Linux 发行版会提供云平台虚拟机使用的镜像，地址如下:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://cloud.centos.org/centos/7/images/">centos&lt;/a>: &lt;a href="http://cloud.centos.org/centos/7/images/">http://cloud.centos.org/centos/7/images/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud-images.ubuntu.com/">ubuntu&lt;/a>: &lt;a href="https://cloud-images.ubuntu.com/">https://cloud-images.ubuntu.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="制作镜像">制作镜像&lt;/h3>
&lt;p>参考: &lt;a href="../create/">制作镜像&lt;/a>&lt;/p>
&lt;h2 id="上传">上传&lt;/h2>
&lt;p>下载或者制作完镜像后，使用 &lt;code>climc image-upload&lt;/code> 上传到云平台的 glance 服务，下面以下载 CentOS 提供的 CentOS-7-x86_64-GenericCloud-1711 举例:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 下载 CentOS-7-x86_64-GenericCloud-1711.qcow2 &lt;/span>
$ wget http://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-1711.qcow2
&lt;span style="color:#8f5902;font-style:italic"># 上传镜像到云平台并名为 CentOS-7-x86_64-GenericCloud-1711.qcow2&lt;/span>
$ climc image-upload --format qcow2 --os-type Linux --os-arch x86_64 --standard CentOS-7-x86_64-GenericCloud-1711.qcow2 ./CentOS-7-x86_64-GenericCloud-1711.qcow2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上传时间长短取决于网络环境和镜像大小，上传完成后需要查询镜像的状态，当状态变为 &amp;lsquo;active&amp;rsquo; 时，就可以拿来使用了。( 更多的关于镜像的查询参考: &lt;a href="../query/">镜像查询&lt;/a> )&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc image-show CentOS-7-x86_64-GenericCloud-1711.qcow2 &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep status
&lt;span style="color:#000;font-weight:bold">|&lt;/span> status &lt;span style="color:#000;font-weight:bold">|&lt;/span> active &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="上传参数">上传参数&lt;/h2>
&lt;p>使用 &lt;code>climc help image-upload&lt;/code> 获取各个参数解释。&lt;/p></description></item><item><title>Docs: All in One 安装</title><link>https://www.cloudpods.org/v3.3/docs/quickstart/allinone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/v3.3/docs/quickstart/allinone/</guid><description>
&lt;h2 id="前提">前提&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
本章内容是通过部署工具快速搭建 OneCloud 服务，如果想了解部署的细节或者部署高可用环境请参考: &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/">安装部署&lt;/a> 。
&lt;/div>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;p>OneCloud 相关的组件运行在 kubernetes 之上。&lt;/p>
&lt;h3 id="服务器配置要求">服务器配置要求&lt;/h3>
&lt;ul>
&lt;li>操作系统: Centos 7.6&lt;/li>
&lt;li>最低配置要求: CPU 4核, 内存 8G, 存储 100G&lt;/li>
&lt;/ul>
&lt;p>以下为待部署机器的环境:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">IP&lt;/th>
&lt;th style="text-align:center">登录用户&lt;/th>
&lt;th style="text-align:center">操作系统&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">10.168.26.216&lt;/td>
&lt;td style="text-align:center">root&lt;/td>
&lt;td style="text-align:center">Centos 7.6&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>10.168.26.216 是本次测试环境 ip，请根据自己的环境做相应修改。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h3 id="onecloud相关软件依赖">OneCloud相关软件依赖&lt;/h3>
&lt;ul>
&lt;li>数据库: mariadb Ver 15.1 Distrib 5.5.56-MariaDB&lt;/li>
&lt;li>docker: ce-19.03.9&lt;/li>
&lt;li>kubernetes: v1.15.8&lt;/li>
&lt;/ul>
&lt;h3 id="本地环境配置要求">本地环境配置要求&lt;/h3>
&lt;p>本地环境即用户进行实际操作部署的环境。本次测试的本地环境为MAC操作系统的笔记本，也可在待部署机器上进行操作。&lt;/p>
&lt;ul>
&lt;li>ssh: 开启 ssh 免密登录&lt;/li>
&lt;li>本地环境安装部署 ansbile，Windows操作系统不支持安装 ansible&lt;/li>
&lt;/ul>
&lt;h4 id="配置-ssh-免密登录">配置 ssh 免密登录&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 生成本机的 ssh 秘钥 (如果本地已有 ~/.ssh/id_rsa.pub 则跳过此步骤)&lt;/span>
$ ssh-keygen
&lt;span style="color:#8f5902;font-style:italic"># 将生成的 ~/.ssh/id_rsa.pub 公钥拷贝到待部署机器&lt;/span>
$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@10.168.26.216
&lt;span style="color:#8f5902;font-style:italic"># 尝试免密登录待部署机器，应该不需要输入登录密码即可拿到部署机器的 hostname&lt;/span>
$ ssh root@10.168.26.216 &lt;span style="color:#4e9a06">&amp;#34;hostname&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="开始部署">开始部署&lt;/h2>
&lt;p>部署的工具是 &lt;a href="https://github.com/yunionio/ocboot">https://github.com/yunionio/ocboot&lt;/a> , 然后根据需要部署机器的配置， 利用 ansbile 远程登录到待部署的机器安装配置 onecloud 服务，以下操作都在本地环境上进行操作。操作步骤如下:&lt;/p>
&lt;h3 id="下载-ocboot">下载 ocboot&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 本地安装 ansible&lt;/span>
$ pip install ansible
&lt;span style="color:#8f5902;font-style:italic"># 下载 ocboot 工具到本地&lt;/span>
$ git clone -b release/3.3 https://github.com/yunionio/ocboot &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> ./ocboot
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编写部署配置">编写部署配置&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 编写 config-allinone.yml 文件&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;./config-allinone.yml
&lt;/span>&lt;span style="color:#4e9a06"># mariadb_node 表示需要部署 mariadb 服务的节点
&lt;/span>&lt;span style="color:#4e9a06">mariadb_node:
&lt;/span>&lt;span style="color:#4e9a06"> # 待部署节点 ip
&lt;/span>&lt;span style="color:#4e9a06"> hostname: 10.168.26.216
&lt;/span>&lt;span style="color:#4e9a06"> # 待部署节点登录用户
&lt;/span>&lt;span style="color:#4e9a06"> user: root
&lt;/span>&lt;span style="color:#4e9a06"> # mariadb 的用户
&lt;/span>&lt;span style="color:#4e9a06"> db_user: root
&lt;/span>&lt;span style="color:#4e9a06"> # mariadb 用户密码
&lt;/span>&lt;span style="color:#4e9a06"> db_password: your-sql-password
&lt;/span>&lt;span style="color:#4e9a06"># primary_master_node 表示运行 k8s 和 onecloud 服务的节点
&lt;/span>&lt;span style="color:#4e9a06">primary_master_node:
&lt;/span>&lt;span style="color:#4e9a06"> hostname: 10.168.26.216
&lt;/span>&lt;span style="color:#4e9a06"> user: root
&lt;/span>&lt;span style="color:#4e9a06"> # 数据库连接地址
&lt;/span>&lt;span style="color:#4e9a06"> db_host: 10.168.26.216
&lt;/span>&lt;span style="color:#4e9a06"> # 数据库用户
&lt;/span>&lt;span style="color:#4e9a06"> db_user: root
&lt;/span>&lt;span style="color:#4e9a06"> # 数据库密码
&lt;/span>&lt;span style="color:#4e9a06"> db_password: your-sql-password
&lt;/span>&lt;span style="color:#4e9a06"> # k8s 控制节点的 ip
&lt;/span>&lt;span style="color:#4e9a06"> controlplane_host: 10.168.26.216
&lt;/span>&lt;span style="color:#4e9a06"> # k8s 控制节点的端口
&lt;/span>&lt;span style="color:#4e9a06"> controlplane_port: &amp;#34;6443&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> # onecloud 登录用户
&lt;/span>&lt;span style="color:#4e9a06"> onecloud_user: admin
&lt;/span>&lt;span style="color:#4e9a06"> # onecloud 登录用户密码
&lt;/span>&lt;span style="color:#4e9a06"> onecloud_user_password: admin@123
&lt;/span>&lt;span style="color:#4e9a06"> # 该节点作为 OneCloud 私有云计算节点
&lt;/span>&lt;span style="color:#4e9a06"> as_host: true
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="开始部署-1">开始部署&lt;/h3>
&lt;p>当填写完 config-allinone.yml 部署配置文件后，便可以执行 ocboot 里面的 &lt;code>./run.py ./config-allinone.yml&lt;/code> 部署集群了。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 开始部署&lt;/span>
$ ./run.py ./config-allinone.yml
....
&lt;span style="color:#8f5902;font-style:italic"># 部署完成后会有如下输出，表示运行成功&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 浏览器打开 https://10.168.26.216&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 使用 admin/admin@123 用户密码登录就能访问前端界面&lt;/span>
Initialized successfully!
Web page: https://10.168.26.216
User: admin
Password: admin@123
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后用浏览器访问 https://10.168.26.216 ，用户名输入 &lt;code>admin&lt;/code>，密码输入 &lt;code>admin@123&lt;/code> 就会进入 OneCloud 的界面。&lt;/p>
&lt;p>&lt;img src="../images/index.png" alt="登录页">&lt;/p>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;h3 id="1-在-all-in-one-中找不到虚拟机界面">1. 在 All in One 中找不到虚拟机界面？&lt;/h3>
&lt;p>All in One 部署的节点会部署 OneCloud host 计算服务，作为宿主机，具有创建和管理私有云虚拟机的能力。没有虚拟机界面应该是 OneCloud 环境中没有启用宿主机。&lt;/p>
&lt;p>请到 &lt;code>管理后台&lt;/code> 界面，点击 &lt;code>主机/基础资源/宿主机&lt;/code> 查看宿主机列表，启用相应的宿主机，刷新界面就会出现虚拟机界面。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;p>如果要使用 OneCloud 私有云虚拟机，需要宿主机使用 OneCloud 编译的内核，可使用以下命令查看宿主机是否使用 OneCloud 内核(包含 yn 关键字)。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查看是否使用 yn 内核&lt;/span>
$ uname -a &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep yn
Linux office-controller 3.10.0-1062.4.3.el7.yn20191203.x86_64
&lt;span style="color:#8f5902;font-style:italic"># 如果内核不是带有 yn 关键字的版本，可能是第一次使用 ocboot 安装，重启即可进入 yn 内核&lt;/span>
$ reboot
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>&lt;img src="../images/host.png" alt="宿主机">&lt;/p>
&lt;h3 id="2-如何导入公有云或者其它私有云平台资源">2. 如何导入公有云或者其它私有云平台资源？&lt;/h3>
&lt;p>在 &lt;code>多云管理&lt;/code> 菜单，选择 &lt;code>云账号&lt;/code> 并新建，根据自己的需求填写对应云平台的认证信息，配置完云账号后 OneCloud 服务就会同步相应云平台的资源，同步完成后即可在前端查看。&lt;/p>
&lt;p>&lt;img src="../images/cloudaccount.png" alt="多云管理">&lt;/p>
&lt;h3 id="3-其它问题">3. 其它问题？&lt;/h3>
&lt;p>其它问题欢迎在 OneCloud github issues 界面提交: &lt;a href="https://github.com/yunionio/onecloud/issues">https://github.com/yunionio/onecloud/issues&lt;/a> , 我们会尽快回复。&lt;/p></description></item><item><title>Docs: MiniKube 安装</title><link>https://www.cloudpods.org/v3.3/docs/quickstart/minikube/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/v3.3/docs/quickstart/minikube/</guid><description>
&lt;h2 id="前提">前提&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
本章内容是方便快速体验OneCloud, 通过MiniKube快速搭建OneCloud服务，如果想了解部署的细节或者部署高可用环境请参考: &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/">安装部署&lt;/a> 。
&lt;/div>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;p>OneCloud 相关的组件运行在MiniKube之上，环境以及相关的软件依赖如下:&lt;/p>
&lt;ul>
&lt;li>操作系统: Centos 7.6&lt;/li>
&lt;li>最低配置要求: CPU 4核, 内存 8G, 存储 100G&lt;/li>
&lt;li>数据库: mariadb Ver 15.1 Distrib 5.5.56-MariaDB&lt;/li>
&lt;/ul>
&lt;p>安装MySQL开启远程访问&lt;/p>
&lt;pre>&lt;code># 此密码为上面设置的 MySQL root 密码，为了方便，只读账号也使用此密码
$ MYSQL_PASSWD='your-sql-passwd'
$ mysql -uroot -p$MYSQL_PASSWD -e &amp;quot;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '$MYSQL_PASSWD' WITH GRANT OPTION;FLUSH PRIVILEGES&amp;quot;
&lt;/code>&lt;/pre>&lt;h2 id="开始部署">开始部署&lt;/h2>
&lt;h3 id="启动minikube">启动minikube&lt;/h3>
&lt;p>下载minikue/kubectl, 并启动minikube集群, 具体请参考： &lt;a href="https://kubernetes.io/docs/tasks/tools/install-minikube/">https://kubernetes.io/docs/tasks/tools/install-minikube/&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">minikube config -p onecloud &lt;span style="color:#204a87">set&lt;/span> memory &lt;span style="color:#0000cf;font-weight:bold">8192&lt;/span>
minikube start --nodes &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> -p onecloud
minikube dashboard -p onecloud
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署local-path-storage">部署local-path-storage&lt;/h3>
&lt;p>参考：https://github.com/rancher/local-path-provisioner, 在minikube部署local-path-storage&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml -O local-path-storage.yaml
kubectl apply -f local-path-storage.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署onecloud-k8s-operator">部署onecloud k8s operator&lt;/h3>
&lt;p>onecloud k8s operator地址： &lt;a href="https://github.com/yunionio/onecloud-operator">https://github.com/yunionio/onecloud-operator&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget https://raw.githubusercontent.com/yunionio/onecloud-operator/master/manifests/onecloud-operator.yaml -O onecloud-operator.yaml
kubectl apply -f onecloud-operator.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署onecloud-集群">部署onecloud 集群&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget https://raw.githubusercontent.com/yunionio/onecloud-operator/master/manifests/example-onecloud-cluster.yaml -O onecloud-cluster.yaml
vim onecloud-cluster.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>修改onecloud-cluster.yaml mysql相关配额&lt;/li>
&lt;/ul>
&lt;pre>&lt;code> host: $MYSQL_HOST
port: $MYSQL_PORT
username: &amp;quot;$MYSQL_USERNAME&amp;quot;
password: &amp;quot;$MYSQL_PASSWD&amp;quot;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>其他集群配置请参考： &lt;a href="https://github.com/yunionio/onecloud-operator/blob/4c871ae1d3d6774a827834464c480287b7b8b433/pkg/apis/onecloud/v1alpha1/types.go#L97">OnecloudClusterSpec&lt;/a>::&lt;/li>
&lt;li>启动onecloud集群&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>kubectl apply -f onecloud-cluster.yaml
&lt;/code>&lt;/pre>&lt;p>打开K8s Dashboard确认相关服务正常启动完成&lt;/p>
&lt;h3 id="创建账号登录webui">创建账号登录WebUI&lt;/h3>
&lt;p>创建账号&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl &lt;span style="color:#204a87">exec&lt;/span> -n onecloud &lt;span style="color:#4e9a06">`&lt;/span>kubectl -n onecloud get pods &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep &lt;span style="color:#4e9a06">&amp;#34;example-onecloud-cluster-climc&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> cut -f1 -d&lt;span style="color:#4e9a06">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#4e9a06">`&lt;/span> -c climc -i -t -- /bin/bash -il
$ climc user-create demo --password demo123A --system-account --enabled
&lt;/code>&lt;/pre>&lt;/div>&lt;p>登陆webUI&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n onecloud port-forward &lt;span style="color:#4e9a06">`&lt;/span>kubectl -n onecloud get pods &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep &lt;span style="color:#4e9a06">&amp;#34;example-onecloud-cluster-web&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">|&lt;/span> cut -f1 -d&lt;span style="color:#4e9a06">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#4e9a06">`&lt;/span> 9999:443 --address&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>0.0.0.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>打开浏览器：https://localhost:9999&lt;/p>
&lt;h3 id="待解决的问题">待解决的问题&lt;/h3>
&lt;p>4类Pod启动失败，问题还在分析中，但不影响体验onecloud&lt;/p>
&lt;ul>
&lt;li>example-onecloud-cluster-notify&lt;/li>
&lt;li>example-onecloud-cluster-host-deployer&lt;/li>
&lt;li>example-onecloud-cluster-monitor&lt;/li>
&lt;li>example-onecloud-cluster-autoupdate&lt;/li>
&lt;/ul>
&lt;h3 id="集群清理">集群清理&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl delete -f onecloud-cluster.yaml
kubectl delete -f onecloud-operator.yaml
kubectl delete -f local-path-storage.yaml
minikube -p onecloud stop
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 组件概览</title><link>https://www.cloudpods.org/v3.3/docs/setup/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/v3.3/docs/setup/intro/</guid><description>
&lt;p>OneCloud 目前仅支持在 Centos 7 上运行，待部署组件/服务如下:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">服务组件&lt;/th>
&lt;th style="text-align:center">用途&lt;/th>
&lt;th style="text-align:center">安装方式&lt;/th>
&lt;th style="text-align:center">运行方式&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">mariadb&lt;/td>
&lt;td style="text-align:center">关系型数据库&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">systemd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">docker&lt;/td>
&lt;td style="text-align:center">容器运行时&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">systemd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">kubelet&lt;/td>
&lt;td style="text-align:center">管理 kubernetes pod&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">systemd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">keystone&lt;/td>
&lt;td style="text-align:center">认证服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">region&lt;/td>
&lt;td style="text-align:center">api 控制器&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">scheduler&lt;/td>
&lt;td style="text-align:center">调度服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">glance&lt;/td>
&lt;td style="text-align:center">镜像存储&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">webconsole&lt;/td>
&lt;td style="text-align:center">虚拟机访问界面&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">influxdb&lt;/td>
&lt;td style="text-align:center">监控数据库&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">host&lt;/td>
&lt;td style="text-align:center">管理虚拟机&lt;/td>
&lt;td style="text-align:center">k8s daemonset&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">sdnagent&lt;/td>
&lt;td style="text-align:center">管理虚拟机网络&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">systemd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">baremetal-agent&lt;/td>
&lt;td style="text-align:center">管理物理机&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">climc&lt;/td>
&lt;td style="text-align:center">命令行工具&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">shell&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ocadm&lt;/td>
&lt;td style="text-align:center">部署服务管理工具&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">shell&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中 host 和 baremetal-agent 可以根据需求选择性部署:&lt;/p>
&lt;ul>
&lt;li>管理 kvm 虚拟机: 部署 host 服务&lt;/li>
&lt;li>管理物理机: 部署 baremetal-agent 服务&lt;/li>
&lt;/ul></description></item><item><title>Docs: 部署 HA 环境</title><link>https://www.cloudpods.org/v3.3/docs/setup/controlplane-ha/</link><pubDate>Sat, 13 Apr 2019 13:01:57 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/setup/controlplane-ha/</guid><description>
&lt;p>在部署生产可用的 kubernetes 集群之前，需要先部署 LoadBalancer 环境，这里使用 &lt;strong>keepalived + haproxy&lt;/strong> 的方式实现负载均衡和高可用。&lt;/p>
&lt;h2 id="环境说明">环境说明&lt;/h2>
&lt;p>单独拿两个节点部署 keepalived 和 haproxy 作为后端 kubernetes 控制平面的负载均衡器，拓扑结构如下:&lt;/p>
&lt;p>&lt;img src="../images/k8s.png" alt="">&lt;/p>
&lt;p>两个节点上面分别部署 keepalived 和 haproxy 组成负载均衡集群，haproxy 的 backend 为后端的 kubernetes control plane node，vip(虚ip) 在这两个节点之间漂移形成高可用。&lt;/p>
&lt;p>另外 OneCloud 服务使用 Mariadb，如果没有专门的数据库集群，可以单独拿两个节点部署 Mariadb 高可用。参考 &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/db-ha">部署 DB HA 环境&lt;/a> 。&lt;/p>
&lt;h2 id="部署">部署&lt;/h2>
&lt;p>keepalived 的主要作用是为 haproxy 提供 vip，在2个 haproxy 实例之间提供主备，降低当其中一个haproxy失效的时对服务的影响。&lt;/p>
&lt;h3 id="部署配置-keepalived">部署配置 keepalived&lt;/h3>
&lt;p>设置相关的环境变量，根据不同的环境自行配置。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># keepalived vip 地址&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">K8SHA_VIP&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>10.168.222.18
&lt;span style="color:#8f5902;font-style:italic"># keepalived auth toke&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">K8SHA_KA_AUTH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>412f7dc3bfed32194d1600c483e10ad1d
&lt;span style="color:#8f5902;font-style:italic"># keepalived network interface&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">K8SHA_NETIF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>eth0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置 sysctl 选项&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;/etc/sysctl.conf
&lt;/span>&lt;span style="color:#4e9a06">net.ipv4.ip_forward = 1
&lt;/span>&lt;span style="color:#4e9a06">net.ipv4.ip_nonlocal_bind = 1
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ sysctl -p
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 keepalived&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum install -y keepalived
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加配置&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/keepalived/keepalived.conf
&lt;/span>&lt;span style="color:#4e9a06">! Configuration File for keepalived
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">global_defs {
&lt;/span>&lt;span style="color:#4e9a06"> router_id LVS_DEVEL
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">vrrp_script check_haproxy {
&lt;/span>&lt;span style="color:#4e9a06"> script &amp;#34;pidof haproxy&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> interval 3
&lt;/span>&lt;span style="color:#4e9a06"> weight -2
&lt;/span>&lt;span style="color:#4e9a06"> fall 10
&lt;/span>&lt;span style="color:#4e9a06"> rise 2
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">vrrp_instance VI_1 {
&lt;/span>&lt;span style="color:#4e9a06"> state MASTER
&lt;/span>&lt;span style="color:#4e9a06"> interface $K8SHA_NETIF
&lt;/span>&lt;span style="color:#4e9a06"> virtual_router_id 51
&lt;/span>&lt;span style="color:#4e9a06"> priority 250
&lt;/span>&lt;span style="color:#4e9a06"> advert_int 1
&lt;/span>&lt;span style="color:#4e9a06"> authentication {
&lt;/span>&lt;span style="color:#4e9a06"> auth_type PASS
&lt;/span>&lt;span style="color:#4e9a06"> auth_pass $K8SHA_KA_AUTH
&lt;/span>&lt;span style="color:#4e9a06"> }
&lt;/span>&lt;span style="color:#4e9a06"> virtual_ipaddress {
&lt;/span>&lt;span style="color:#4e9a06"> $K8SHA_VIP
&lt;/span>&lt;span style="color:#4e9a06"> }
&lt;/span>&lt;span style="color:#4e9a06"> track_script {
&lt;/span>&lt;span style="color:#4e9a06"> check_haproxy
&lt;/span>&lt;span style="color:#4e9a06"> }
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 keepalived&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now keepalived
$ ip addr show &lt;span style="color:#000">$K8SHA_NETIF&lt;/span>
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">1500&lt;/span> qdisc mq state UP qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
link/ether 00:22:ff:95:87:f7 brd ff:ff:ff:ff:ff:ff
inet 10.168.222.189/24 brd 10.168.222.255 scope global eth0
valid_lft forever preferred_lft forever
inet 10.168.222.18/32 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::222:ffff:fe95:87f7/64 scope link
valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署配置-haproxy">部署配置 haproxy&lt;/h3>
&lt;p>此处的 haproxy 为 apiserver 提供反向代理，haproxy 将所有请求轮询转发到每个master节点上。&lt;/p>
&lt;p>系统配置&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">K8S_MASTER0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>10.168.222.218
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">K8S_MASTER1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>10.168.222.197
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">K8S_MASTER2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>10.168.222.207
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 haproxy&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum install -y haproxy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置 haproxy&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/haproxy/haproxy.cfg
&lt;/span>&lt;span style="color:#4e9a06">#---------------------------------------------------------------------
&lt;/span>&lt;span style="color:#4e9a06"># Global settings
&lt;/span>&lt;span style="color:#4e9a06">#---------------------------------------------------------------------
&lt;/span>&lt;span style="color:#4e9a06">global
&lt;/span>&lt;span style="color:#4e9a06"> # to have these messages end up in /var/log/haproxy.log you will
&lt;/span>&lt;span style="color:#4e9a06"> # need to:
&lt;/span>&lt;span style="color:#4e9a06"> #
&lt;/span>&lt;span style="color:#4e9a06"> # 1) configure syslog to accept network log events. This is done
&lt;/span>&lt;span style="color:#4e9a06"> # by adding the &amp;#39;-r&amp;#39; option to the SYSLOGD_OPTIONS in
&lt;/span>&lt;span style="color:#4e9a06"> # /etc/sysconfig/syslog
&lt;/span>&lt;span style="color:#4e9a06"> #
&lt;/span>&lt;span style="color:#4e9a06"> # 2) configure local2 events to go to the /var/log/haproxy.log
&lt;/span>&lt;span style="color:#4e9a06"> # file. A line like the following can be added to
&lt;/span>&lt;span style="color:#4e9a06"> # /etc/sysconfig/syslog
&lt;/span>&lt;span style="color:#4e9a06"> #
&lt;/span>&lt;span style="color:#4e9a06"> # local2.* /var/log/haproxy.log
&lt;/span>&lt;span style="color:#4e9a06"> #
&lt;/span>&lt;span style="color:#4e9a06"> log 127.0.0.1 local2
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> chroot /var/lib/haproxy
&lt;/span>&lt;span style="color:#4e9a06"> pidfile /var/run/haproxy.pid
&lt;/span>&lt;span style="color:#4e9a06"> maxconn 4000
&lt;/span>&lt;span style="color:#4e9a06"> user haproxy
&lt;/span>&lt;span style="color:#4e9a06"> group haproxy
&lt;/span>&lt;span style="color:#4e9a06"> daemon
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> # turn on stats unix socket
&lt;/span>&lt;span style="color:#4e9a06"> stats socket /var/lib/haproxy/stats
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">#---------------------------------------------------------------------
&lt;/span>&lt;span style="color:#4e9a06"># common defaults that all the &amp;#39;listen&amp;#39; and &amp;#39;backend&amp;#39; sections will
&lt;/span>&lt;span style="color:#4e9a06"># use if not designated in their block
&lt;/span>&lt;span style="color:#4e9a06">#---------------------------------------------------------------------
&lt;/span>&lt;span style="color:#4e9a06">defaults
&lt;/span>&lt;span style="color:#4e9a06"> mode http
&lt;/span>&lt;span style="color:#4e9a06"> log global
&lt;/span>&lt;span style="color:#4e9a06"> option httplog
&lt;/span>&lt;span style="color:#4e9a06"> option dontlognull
&lt;/span>&lt;span style="color:#4e9a06"> option http-server-close
&lt;/span>&lt;span style="color:#4e9a06"> option forwardfor except 127.0.0.0/8
&lt;/span>&lt;span style="color:#4e9a06"> option redispatch
&lt;/span>&lt;span style="color:#4e9a06"> retries 3
&lt;/span>&lt;span style="color:#4e9a06"> timeout http-request 10s
&lt;/span>&lt;span style="color:#4e9a06"> timeout queue 1m
&lt;/span>&lt;span style="color:#4e9a06"> timeout connect 10s
&lt;/span>&lt;span style="color:#4e9a06"> timeout client 1m
&lt;/span>&lt;span style="color:#4e9a06"> timeout server 1m
&lt;/span>&lt;span style="color:#4e9a06"> timeout http-keep-alive 10s
&lt;/span>&lt;span style="color:#4e9a06"> timeout check 10s
&lt;/span>&lt;span style="color:#4e9a06"> maxconn 3000
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">#---------------------------------------------------------------------
&lt;/span>&lt;span style="color:#4e9a06"># kubernetes apiserver frontend which proxys to the backends
&lt;/span>&lt;span style="color:#4e9a06">#---------------------------------------------------------------------
&lt;/span>&lt;span style="color:#4e9a06">frontend kubernetes-apiserver
&lt;/span>&lt;span style="color:#4e9a06"> mode tcp
&lt;/span>&lt;span style="color:#4e9a06"> bind *:6443
&lt;/span>&lt;span style="color:#4e9a06"> option tcplog
&lt;/span>&lt;span style="color:#4e9a06"> default_backend kubernetes-apiserver
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">#---------------------------------------------------------------------
&lt;/span>&lt;span style="color:#4e9a06"># round robin balancing between the various backends
&lt;/span>&lt;span style="color:#4e9a06">#---------------------------------------------------------------------
&lt;/span>&lt;span style="color:#4e9a06">backend kubernetes-apiserver
&lt;/span>&lt;span style="color:#4e9a06"> mode tcp
&lt;/span>&lt;span style="color:#4e9a06"> balance roundrobin
&lt;/span>&lt;span style="color:#4e9a06"> server master-0 $K8S_MASTER0:6443 check
&lt;/span>&lt;span style="color:#4e9a06"> server master-1 $K8S_MASTER1:6443 check
&lt;/span>&lt;span style="color:#4e9a06"> server master-2 $K8S_MASTER2:6443 check
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">#---------------------------------------------------------------------
&lt;/span>&lt;span style="color:#4e9a06"># collection haproxy statistics message
&lt;/span>&lt;span style="color:#4e9a06">#---------------------------------------------------------------------
&lt;/span>&lt;span style="color:#4e9a06">listen stats
&lt;/span>&lt;span style="color:#4e9a06"> bind *:1080
&lt;/span>&lt;span style="color:#4e9a06"> stats auth admin:awesomePassword
&lt;/span>&lt;span style="color:#4e9a06"> stats refresh 5s
&lt;/span>&lt;span style="color:#4e9a06"> stats realm HAProxy\ Statistics
&lt;/span>&lt;span style="color:#4e9a06"> stats uri /admin?stats
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动并检测服务&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ systemctl &lt;span style="color:#204a87">enable&lt;/span> haproxy.service --now
$ systemctl status haproxy.service
$ netstat -tulnp &lt;span style="color:#000;font-weight:bold">|&lt;/span> egrep &lt;span style="color:#4e9a06">&amp;#39;6443|1080&amp;#39;&lt;/span>
tcp &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 0.0.0.0:6443 0.0.0.0:* LISTEN 10033/haproxy
tcp &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 0.0.0.0:1080 0.0.0.0:* LISTEN 10033/haproxy
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="部署-kubernetes-集群">部署 kubernetes 集群&lt;/h1>
&lt;p>参考 &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/controlplane">部署集群&lt;/a> 。&lt;/p></description></item><item><title>Docs: 开发贡献</title><link>https://www.cloudpods.org/v3.3/docs/contribute/contrib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/v3.3/docs/contribute/contrib/</guid><description>
&lt;h2 id="安装-go">安装 Go&lt;/h2>
&lt;p>Golang 版本要求 1.12 以上&lt;/p>
&lt;p>安装go环境参考: &lt;a href="https://golang.org/doc/install">Install doc&lt;/a>&lt;/p>
&lt;h2 id="安装-ceph-依赖">安装 ceph 依赖&lt;/h2>
&lt;p>On rpm based systems (dnf, yum, etc):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo rpm --import https://download.ceph.com/keys/release.asc
sudo yum install -y https://download.ceph.com/rpm-luminous/el7/noarch/ceph-release-1-1.el7.noarch.rpm
sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
sudo yum install -y libcephfs-devel librbd-devel librados-devel
&lt;/code>&lt;/pre>&lt;/div>&lt;p>On debian systems (apt):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">wget -q -O- &lt;span style="color:#4e9a06">&amp;#39;https://download.ceph.com/keys/release.asc&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> sudo apt-key add -
&lt;span style="color:#204a87">echo&lt;/span> deb https://download.ceph.com/debian-luminous/ &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>lsb_release -sc&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> main &lt;span style="color:#000;font-weight:bold">|&lt;/span> sudo tee /etc/apt/sources.list.d/ceph.list
apt-get update &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> apt-get install -y libcephfs-dev librbd-dev librados-dev
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编译-onecloud-组件">编译 onecloud 组件&lt;/h2>
&lt;h3 id="fork-仓库">Fork 仓库&lt;/h3>
&lt;p>访问 &lt;a href="https://github.com/yunionio/onecloud">https://github.com/yunionio/onecloud&lt;/a> ，将仓库 fork 到自己的 github 用户下。&lt;/p>
&lt;h3 id="clone-源码">Clone 源码&lt;/h3>
&lt;p>git clone 前确保 GOPATH 等环境变量已经设置好，clone 你自己 fork 的仓库&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ git clone https://github.com/&amp;lt;your_name&amp;gt;/onecloud &lt;span style="color:#000">$GOPATH&lt;/span>/src/yunion.io/x/onecloud
$ &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$GOPATH&lt;/span>/src/yunion.io/x/onecloud
$ git remote add upstream https://github.com/yunionio/onecloud
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="编译">编译&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 编译所有组件&lt;/span>
$ make
&lt;span style="color:#8f5902;font-style:italic"># cmd 目录下面存放着所有的组件:&lt;/span>
$ ls cmd
...
ansibleserver climc glance keystone qcloudcli ucloudcli
awscli cloudir host lbagent region webconsole
&lt;span style="color:#8f5902;font-style:italic"># 可以编译cmd下制定的组件，比如：编译 region 和 host 组件&lt;/span>
$ make cmd/region cmd/host
&lt;span style="color:#8f5902;font-style:italic"># 查看编译好的二进制文件&lt;/span>
$ ls _output/bin
region host
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="本地开发调试">本地开发调试&lt;/h2>
&lt;p>3.0 版本后我们的服务都已经容器化运行在 k8s 集群中，快速开发调试并不方便。
通过Telepresence 提供远程k8s上下文，可以在本地开发调试。&lt;/p>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>确保有一个已部署的onecloud k8s集群，参考&lt;a href="https://www.cloudpods.org/v3.3/docs/setup/">安装部署&lt;/a>。
这里介绍Centos7的本地环境安装，其他发行版可参考官方文档：&lt;a href="https://www.telepresence.io/reference/install">Installing Telepresence&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>不建议k8s集群的部署和开发在同一个环境，使用Telepresence会有端口冲突。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 安装依赖&lt;/span>
$ yum install -y python3 sshfs conntrack iptables torsocks sshuttle sudo yum-utils
&lt;span style="color:#8f5902;font-style:italic"># 安装 kubectl 用于连接 k8s 集群&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/yum.repos.d/kubernetes.repo
&lt;/span>&lt;span style="color:#4e9a06">[kubernetes]
&lt;/span>&lt;span style="color:#4e9a06">name=Kubernetes
&lt;/span>&lt;span style="color:#4e9a06">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64
&lt;/span>&lt;span style="color:#4e9a06">enabled=1
&lt;/span>&lt;span style="color:#4e9a06">gpgcheck=0
&lt;/span>&lt;span style="color:#4e9a06">repo_gpgcheck=0
&lt;/span>&lt;span style="color:#4e9a06">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ yum install -y kubectl-1.15.8-0
&lt;span style="color:#8f5902;font-style:italic"># 需要自行配置kubctl config&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 测试kubctl可以访问之前部署的k8s集群&lt;/span>
$ kubctl version
&lt;span style="color:#8f5902;font-style:italic"># 源码安装 telepresence 到 /usr/local/bin/telepresence&lt;/span>
$ git clone https://github.com/telepresenceio/telepresence
$ &lt;span style="color:#204a87">cd&lt;/span> telepresence
$ sudo env &lt;span style="color:#000">PREFIX&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/usr/local ./install.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用">使用&lt;/h3>
&lt;p>利用 telepresence 本地连通远端 k8s 的特性，我们就可以做到在本地编译运行 region，keystone 等服务，同时又能访问远端 k8s 其它服务的环境。&lt;/p>
&lt;p>比如以下是本地编译运行 region 服务的流程：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 切换到 onecloud 代码目录&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> &lt;span style="color:#000">$GOPATH&lt;/span>/src/yunion.io/x/onecloud
&lt;span style="color:#8f5902;font-style:italic"># 编译 region 服务&lt;/span>
$ make cmd/region
&lt;span style="color:#8f5902;font-style:italic"># 使用 telepresence 替换 k8s 里面的 default-region deployment&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 该命令在 k8s 集群中启动一个 deployment 替换掉原来的 default-regoin&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 然后把流量的访问导向本地&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 如果想要使用特定的 shell，比如 zsh，可以在后面加上&amp;#34;--run /bin/zsh&amp;#34;&lt;/span>
$ telepresence --swap-deployment default-region --namespace onecloud
&lt;/code>&lt;/pre>&lt;/div>&lt;p>到这里已经进入到 telepresence 隔离的 namespace 里面了，
$TELEPRESENCE_ROOT 这个目录 是通过 sshfs 挂载的远端 k8s pod 的文件系统。
接下来我们就可以在这个 namespace 里面运行 region 服务了：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 设置 max_user_namespaces&lt;/span>
$ cat /proc/sys/user/max_user_namespaces
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 如果 max_user_namespaces 为 0，需要设置下 user_namespaces&lt;/span>
$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">640&lt;/span> &amp;gt; /proc/sys/user/max_user_namespaces
&lt;span style="color:#8f5902;font-style:italic"># 启动一个新的 namespace , 但不共享 mount namespace，这样接下来的 mount bind 操作就不会影响到宿主机&lt;/span>
$ unshare --map-root-user --mount
&lt;span style="color:#8f5902;font-style:italic"># bind k8s /var/run/secrets&lt;/span>
$ mount --bind &lt;span style="color:#000">$TELEPRESENCE_ROOT&lt;/span>/var/run /var/run
$ ls /var/run/
secrets
&lt;span style="color:#8f5902;font-style:italic"># bind onecloud config&lt;/span>
$ mkdir /etc/yunion
$ mount --bind &lt;span style="color:#000">$TELEPRESENCE_ROOT&lt;/span>/etc/yunion /etc/yunion
$ ls /etc/yunion/
pki region.conf
&lt;span style="color:#8f5902;font-style:italic"># 启动 region 服务&lt;/span>
$ ./_output/bin/region --config /etc/yunion/region.conf
&lt;span style="color:#8f5902;font-style:italic"># 这个时候如果我们在外部调用 climc&lt;/span>
$ climc server-list
&lt;span style="color:#8f5902;font-style:italic"># 就会发现相关的请求已经被转发到本地开发机启动 region 服务了&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>更多用法，以及 telepresence 的原理请参考&lt;a href="https://www.telepresence.io/discussion/overview">官方文档&lt;/a>。&lt;/p>
&lt;h2 id="开发流程">开发流程&lt;/h2>
&lt;ul>
&lt;li>从 master checkout 出 feature 或者 bugfix 分支&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># checkout 新分支&lt;/span>
$ git fetch upstream --tags
$ git checkout -b feature/implement-x upstream/master
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在新的分支上进行开发&lt;/li>
&lt;li>开发完成后，进行提交PR前的准备操作&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git fetch upstream &lt;span style="color:#8f5902;font-style:italic"># 同步远程 upstream master 代码&lt;/span>
$ git rebase upstream/master &lt;span style="color:#8f5902;font-style:italic"># 有冲突则解决冲突&lt;/span>
$ git push origin feature/implement-x &lt;span style="color:#8f5902;font-style:italic"># push 分支到自己的 repo&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在GitHub的Web界面完成提交PR的流程&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/submitPR.png" alt="">&lt;/p>
&lt;ul>
&lt;li>提完 PR 后请求相关开发人员 review，并设置Labels来表明提交的代码属于哪一个模块或者哪几个模块&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/reviewer_label.png" alt="">&lt;/p>
&lt;ul>
&lt;li>或者通过添加评论的方式来完成上一步；评论 &amp;ldquo;/cc&amp;rdquo; 并 @ 相关人员完成设置reviewer，评论/area 并填写label完成设置Labels&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/robot_review_label.png" alt="">&lt;/p>
&lt;p>​ 所有Label都可以在issues——Labels下查询到，带area/前缀的Label均可以使用评论&amp;quot;/area&amp;quot;的形式添加&lt;/p>
&lt;ul>
&lt;li>如果是 bugfix 或者需要合并到之前 release 分支的 feature PR，需要额外使用脚本将此PR cherry-pick 到对应的 release 分支&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 自行下载安装 github 的 cli 工具：https://github.com/github/hub&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># OSX 使用: brew install hub&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># Debian: sudo apt install hub&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 二进制安装: https://github.com/github/hub/releases&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 设置github的用户名&lt;/span>
$ &lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">GITHUB_USER&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;your_username&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 使用脚本自动 cherry-pick PR 到 release 分支&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 比如现在有一个提交的PR的编号为8，要把它合并到 release/2.8.0&lt;/span>
$ ./scripts/cherry_pick_pull.sh upstream/release/2.8.0 &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># cherry pick 可能会出现冲突，冲突时开另外一个 terminal，解决好冲突，再输入 &amp;#39;y&amp;#39; 进行提交&lt;/span>
$ git add xxx &lt;span style="color:#8f5902;font-style:italic"># 解决完冲突后&lt;/span>
$ git am --continue
&lt;span style="color:#8f5902;font-style:italic"># 回到执行 cherry-pick 脚本的 terminal 输入 &amp;#39;y&amp;#39; 即可&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>去 upstream 的 &lt;a href="https://github.com/yunionio/onecloud/pulls">PR 页面&lt;/a>, 就能看到自动生成的 cherry-pick PR，上面操作的PR的标题前缀就应该为：&lt;code>Automated cherry pick of #8&lt;/code>，然后重复 PR review 流程合并到 release&lt;/p></description></item><item><title>Docs: 部署 DB HA 环境</title><link>https://www.cloudpods.org/v3.3/docs/setup/db-ha/</link><pubDate>Wed, 12 Feb 2020 12:55:46 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/setup/db-ha/</guid><description>
&lt;p>OneCloud 服务使用 Mariadb，这里使用 keepalived 和 Mariadb 的主主复制功能来实现 DB 的高可用。&lt;/p>
&lt;h2 id="部署">部署&lt;/h2>
&lt;p>keepalived 的主要作用是为 Mariadb 提供 vip，在2个 Mariadb 实例之间切换，不间断的提供服务。&lt;/p>
&lt;h3 id="部署配置-mariadb-主主复制">部署配置 Mariadb 主主复制&lt;/h3>
&lt;p>安装并启动 Mariadb&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum install -y mariadb-server
$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now mariadb
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行 Mariadb 安全配置向导，设置密码等&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ mysql_secure_installation
... ...
Change the root password? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Y/n&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> y
New password:
Re-enter new password:
Password updated successfully!
Reloading privilege tables..
... Success!
... ...
Remove anonymous users? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Y/n&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> y
... Success!
... ...
Disallow root login remotely? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Y/n&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> y
... Success!
... ...
Remove &lt;span style="color:#204a87">test&lt;/span> database and access to it? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Y/n&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> y
- Dropping &lt;span style="color:#204a87">test&lt;/span> database...
... Success!
- Removing privileges on &lt;span style="color:#204a87">test&lt;/span> database...
... Success! ... ...
Reload privilege tables now? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Y/n&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> y
... Success!
... ...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 Mariadb 配置文件，准备配置主主复制&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 主节点&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt; /etc/my.cnf
&lt;/span>&lt;span style="color:#4e9a06">[mysqld]
&lt;/span>&lt;span style="color:#4e9a06">datadir=/var/lib/mysql
&lt;/span>&lt;span style="color:#4e9a06">socket=/var/lib/mysql/mysql.sock
&lt;/span>&lt;span style="color:#4e9a06"># Disabling symbolic-links is recommended to prevent assorted security risks
&lt;/span>&lt;span style="color:#4e9a06">symbolic-links=0
&lt;/span>&lt;span style="color:#4e9a06"># Settings user and group are ignored when systemd is used.
&lt;/span>&lt;span style="color:#4e9a06"># If you need to run mysqld under a different user or group,
&lt;/span>&lt;span style="color:#4e9a06"># customize your systemd unit file for mariadb according to the
&lt;/span>&lt;span style="color:#4e9a06"># instructions in http://fedoraproject.org/wiki/Systemd
&lt;/span>&lt;span style="color:#4e9a06"># skip domain name resolve
&lt;/span>&lt;span style="color:#4e9a06">skip_name_resolve
&lt;/span>&lt;span style="color:#4e9a06"># auto delete binlog older than 30 days
&lt;/span>&lt;span style="color:#4e9a06">expire_logs_days=30
&lt;/span>&lt;span style="color:#4e9a06">innodb_file_per_table=ON
&lt;/span>&lt;span style="color:#4e9a06">max_connections = 300
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">server-id = 1
&lt;/span>&lt;span style="color:#4e9a06">auto_increment_offset = 1
&lt;/span>&lt;span style="color:#4e9a06">auto_increment_increment = 2
&lt;/span>&lt;span style="color:#4e9a06">log-bin = mysql-bin
&lt;/span>&lt;span style="color:#4e9a06">binlog-format = row
&lt;/span>&lt;span style="color:#4e9a06">log-slave-updates
&lt;/span>&lt;span style="color:#4e9a06">max_binlog_size = 1G
&lt;/span>&lt;span style="color:#4e9a06">replicate-ignore-db = information_schema
&lt;/span>&lt;span style="color:#4e9a06">replicate-ignore-db = performance_schema
&lt;/span>&lt;span style="color:#4e9a06">max_connections = 1000
&lt;/span>&lt;span style="color:#4e9a06">max_connect_errors = 0
&lt;/span>&lt;span style="color:#4e9a06">max_allowed_packet = 1G
&lt;/span>&lt;span style="color:#4e9a06">slave-net-timeout=10
&lt;/span>&lt;span style="color:#4e9a06">master-retry-count=0
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">slow_query_log = 1
&lt;/span>&lt;span style="color:#4e9a06">long_query_time = 2
&lt;/span>&lt;span style="color:#4e9a06">slow_query_log_file = /var/log/mariadb/slow-query.log
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">[mysql]
&lt;/span>&lt;span style="color:#4e9a06">no-auto-rehash
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">[mysqld_safe]
&lt;/span>&lt;span style="color:#4e9a06">log-error=/var/log/mariadb/mariadb.log
&lt;/span>&lt;span style="color:#4e9a06">pid-file=/var/run/mariadb/mariadb.pid
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06"># include all files from the config directory
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06">!includedir /etc/my.cnf.d
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 备节点&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt; /etc/my.cnf
&lt;/span>&lt;span style="color:#4e9a06">[mysqld]
&lt;/span>&lt;span style="color:#4e9a06">datadir=/var/lib/mysql
&lt;/span>&lt;span style="color:#4e9a06">socket=/var/lib/mysql/mysql.sock
&lt;/span>&lt;span style="color:#4e9a06"># Disabling symbolic-links is recommended to prevent assorted security risks
&lt;/span>&lt;span style="color:#4e9a06">symbolic-links=0
&lt;/span>&lt;span style="color:#4e9a06"># Settings user and group are ignored when systemd is used.
&lt;/span>&lt;span style="color:#4e9a06"># If you need to run mysqld under a different user or group,
&lt;/span>&lt;span style="color:#4e9a06"># customize your systemd unit file for mariadb according to the
&lt;/span>&lt;span style="color:#4e9a06"># instructions in http://fedoraproject.org/wiki/Systemd
&lt;/span>&lt;span style="color:#4e9a06"># skip domain name resolve
&lt;/span>&lt;span style="color:#4e9a06">skip_name_resolve
&lt;/span>&lt;span style="color:#4e9a06"># auto delete binlog older than 30 days
&lt;/span>&lt;span style="color:#4e9a06">expire_logs_days=30
&lt;/span>&lt;span style="color:#4e9a06">innodb_file_per_table=ON
&lt;/span>&lt;span style="color:#4e9a06">max_connections = 300
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">server-id = 2
&lt;/span>&lt;span style="color:#4e9a06">auto_increment_offset = 2
&lt;/span>&lt;span style="color:#4e9a06">auto_increment_increment = 2
&lt;/span>&lt;span style="color:#4e9a06">log-bin = mysql-bin
&lt;/span>&lt;span style="color:#4e9a06">binlog-format = row
&lt;/span>&lt;span style="color:#4e9a06">log-slave-updates
&lt;/span>&lt;span style="color:#4e9a06">max_binlog_size = 1G
&lt;/span>&lt;span style="color:#4e9a06">replicate-ignore-db = information_schema
&lt;/span>&lt;span style="color:#4e9a06">replicate-ignore-db = performance_schema
&lt;/span>&lt;span style="color:#4e9a06">max_connections = 1000
&lt;/span>&lt;span style="color:#4e9a06">max_connect_errors = 0
&lt;/span>&lt;span style="color:#4e9a06">max_allowed_packet = 1G
&lt;/span>&lt;span style="color:#4e9a06">slave-net-timeout=10
&lt;/span>&lt;span style="color:#4e9a06">master-retry-count=0
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">slow_query_log = 1
&lt;/span>&lt;span style="color:#4e9a06">long_query_time = 2
&lt;/span>&lt;span style="color:#4e9a06">slow_query_log_file = /var/log/mariadb/slow-query.log
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">[mysql]
&lt;/span>&lt;span style="color:#4e9a06">no-auto-rehash
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">[mysqld_safe]
&lt;/span>&lt;span style="color:#4e9a06">log-error=/var/log/mariadb/mariadb.log
&lt;/span>&lt;span style="color:#4e9a06">pid-file=/var/run/mariadb/mariadb.pid
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06"># include all files from the config directory
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06">!includedir /etc/my.cnf.d
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 重启服务&lt;/span>
$ systemctl restart mariadb
&lt;/code>&lt;/pre>&lt;/div>&lt;p>主节点创建只读账号，导出全部数据，导入备节点。记录binlog日志文件名和position。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 以下命令在主节点执行&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 此密码为上面设置的 Mariadb root 密码，为了方便，只读账号也使用此密码&lt;/span>
$ &lt;span style="color:#000">MYSQL_PASSWD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;your-sql-passwd&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 开启 Mariadb 的远程访问&lt;/span>
$ mysql -uroot -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#39; WITH GRANT OPTION;FLUSH PRIVILEGES&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 创建只读账号&lt;/span>
$ mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;GRANT REPLICATION SLAVE ON *.* TO repl@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;;FLUSH PRIVILEGES&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 示例是全新安装的 Mariadb ，还没有使用。如果是正在使用的数据库做主主复制，需要锁表后再导出数据&lt;/span>
$ mysql -uroot -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;SHOW PROCESSLIST&amp;#34;&lt;/span>
+----+------+-----------+------+---------+------+-------+------------------+----------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> Id &lt;span style="color:#000;font-weight:bold">|&lt;/span> User &lt;span style="color:#000;font-weight:bold">|&lt;/span> Host &lt;span style="color:#000;font-weight:bold">|&lt;/span> db &lt;span style="color:#000;font-weight:bold">|&lt;/span> Command &lt;span style="color:#000;font-weight:bold">|&lt;/span> Time &lt;span style="color:#000;font-weight:bold">|&lt;/span> State &lt;span style="color:#000;font-weight:bold">|&lt;/span> Info &lt;span style="color:#000;font-weight:bold">|&lt;/span> Progress &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+----+------+-----------+------+---------+------+-------+------------------+----------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> root &lt;span style="color:#000;font-weight:bold">|&lt;/span> localhost &lt;span style="color:#000;font-weight:bold">|&lt;/span> NULL &lt;span style="color:#000;font-weight:bold">|&lt;/span> Query &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> NULL &lt;span style="color:#000;font-weight:bold">|&lt;/span> SHOW PROCESSLIST &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0.000 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+----+------+-----------+------+---------+------+-------+------------------+----------+
&lt;span style="color:#8f5902;font-style:italic"># 记录binlog日志文件名和position&lt;/span>
$ mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;SHOW MASTER STATUS\G&amp;#34;&lt;/span>
*************************** 1. row ***************************
File: mysql-bin.000001
Position: &lt;span style="color:#0000cf;font-weight:bold">2023&lt;/span>
Binlog_Do_DB:
Binlog_Ignore_DB:
&lt;span style="color:#8f5902;font-style:italic"># 导出全部数据&lt;/span>
$ mysqldump --all-databases -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> &amp;gt; alldb.db
&lt;span style="color:#8f5902;font-style:italic"># 拷贝 alldb.db 到备节点&lt;/span>
$ scp alldb.db db2:/root/
&lt;span style="color:#8f5902;font-style:italic"># 以下命令在备节点执行&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 此密码为上面设置的 Mariadb root 密码&lt;/span>
$ &lt;span style="color:#000">MYSQL_PASSWD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;your-sql-passwd&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 导入主节点导出的数据&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> &amp;lt; alldb.db
&lt;span style="color:#8f5902;font-style:italic"># 重载权限&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;FLUSH PRIVILEGES&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 记录binlog日志文件名和position&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;SHOW MASTER STATUS\G&amp;#34;&lt;/span>
*************************** 1. row ***************************
File: mysql-bin.000001
Position: &lt;span style="color:#0000cf;font-weight:bold">509778&lt;/span>
Binlog_Do_DB:
Binlog_Ignore_DB:
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置主主复制&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 以下命令在主节点执行&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 修改MASTER_HOST为备节点IP，修改MASTER_LOG_FILE和MASTER_LOG_POS为上面备节点记录的信息&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;CHANGE MASTER TO MASTER_HOST=&amp;#39;192.168.199.99&amp;#39;,MASTER_USER=&amp;#39;repl&amp;#39;,MASTER_PASSWORD=&amp;#39;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;,MASTER_PORT=3306,MASTER_LOG_FILE=&amp;#39;mysql-bin.000001&amp;#39;,MASTER_LOG_POS=509778,MASTER_CONNECT_RETRY=2;START SLAVE&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 以下命令在备节点执行&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 修改MASTER_HOST为主节点IP，修改MASTER_LOG_FILE和MASTER_LOG_POS为上面主节点记录的信息&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;CHANGE MASTER TO MASTER_HOST=&amp;#39;192.168.199.98&amp;#39;,MASTER_USER=&amp;#39;repl&amp;#39;,MASTER_PASSWORD=&amp;#39;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;,MASTER_PORT=3306,MASTER_LOG_FILE=&amp;#39;mysql-bin.000001&amp;#39;,MASTER_LOG_POS=2023,MASTER_CONNECT_RETRY=2;START SLAVE&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 主备都执行，验证同步状态，都输出2个 Yes 表示正常&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;SHOW SLAVE STATUS\G&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep Running
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，DB 主主复制部署完成，可以测试在任一节点进行数据库操作，另一节点验证。不过对外提供服务还是需要通过 vip，不然发生切换还需要业务端切换 ip，下面配置 keepalived 对外提供服务。&lt;/p>
&lt;h3 id="部署配置-keepalived">部署配置 keepalived&lt;/h3>
&lt;p>设置相关的环境变量，根据不同的环境自行配置。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># keepalived vip 地址&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">DB_VIP&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>192.168.199.97
&lt;span style="color:#8f5902;font-style:italic"># keepalived auth toke&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">DBHA_KA_AUTH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>onecloud
&lt;span style="color:#8f5902;font-style:italic"># keepalived network interface&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">DB_NETIF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>eth0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置 sysctl 选项&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;/etc/sysctl.conf
&lt;/span>&lt;span style="color:#4e9a06">net.ipv4.ip_forward = 1
&lt;/span>&lt;span style="color:#4e9a06">net.ipv4.ip_nonlocal_bind = 1
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ sysctl -p
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 keepalived nc&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum install -y keepalived nc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加配置&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 请确保 virtual_router_id 不会和局域网内的其他 keepalived 集群冲突&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/keepalived/keepalived.conf
&lt;/span>&lt;span style="color:#4e9a06">global_defs {
&lt;/span>&lt;span style="color:#4e9a06"> router_id onecloud
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">vrrp_script chk_mysql {
&lt;/span>&lt;span style="color:#4e9a06"> script &amp;#34;/etc/keepalived/chk_mysql&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> interval 1
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">vrrp_instance VI_1 {
&lt;/span>&lt;span style="color:#4e9a06"> state MASTER
&lt;/span>&lt;span style="color:#4e9a06"> interface $DB_NETIF
&lt;/span>&lt;span style="color:#4e9a06"> virtual_router_id 99
&lt;/span>&lt;span style="color:#4e9a06"> priority 100
&lt;/span>&lt;span style="color:#4e9a06"> advert_int 1
&lt;/span>&lt;span style="color:#4e9a06"> nopreempt
&lt;/span>&lt;span style="color:#4e9a06"> authentication {
&lt;/span>&lt;span style="color:#4e9a06"> auth_type PASS
&lt;/span>&lt;span style="color:#4e9a06"> auth_pass $DBHA_KA_AUTH
&lt;/span>&lt;span style="color:#4e9a06"> }
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> track_script {
&lt;/span>&lt;span style="color:#4e9a06"> chk_mysql
&lt;/span>&lt;span style="color:#4e9a06"> }
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> virtual_ipaddress {
&lt;/span>&lt;span style="color:#4e9a06"> $DB_VIP
&lt;/span>&lt;span style="color:#4e9a06"> }
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt; /etc/keepalived/chk_mysql
&lt;/span>&lt;span style="color:#4e9a06">#!/bin/bash
&lt;/span>&lt;span style="color:#4e9a06">echo | nc 127.0.0.1 3306 &amp;amp;&amp;gt;/dev/null
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ chmod +x /etc/keepalived/chk_mysql
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 keepalived&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now keepalived
$ ip addr show &lt;span style="color:#000">$DB_NETIF&lt;/span>
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">1500&lt;/span> qdisc pfifo_fast state UP group default qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
link/ether 00:22:cf:40:1e:29 brd ff:ff:ff:ff:ff:ff
inet 192.168.199.99/24 brd 192.168.199.255 scope global dynamic eth0
valid_lft 100651906sec preferred_lft 100651906sec
inet 192.168.199.97/32 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::222:cfff:fe40:1e29/64 scope link
valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，DB 高可用部署完成，任一节点的 Mariadb 或 keepalived 服务异常，或者任一节点宕机，都不影响对外服务。&lt;/p></description></item><item><title>Docs: 服务组件介绍</title><link>https://www.cloudpods.org/v3.3/docs/contribute/services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/v3.3/docs/contribute/services/</guid><description>
&lt;h2 id="架构简介">架构简介&lt;/h2>
&lt;p>OneCloud 服务组件较多，接下来分别介绍每个组件的功能:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>服务组件&lt;/th>
&lt;th>功能用途&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>keystone&lt;/td>
&lt;td>认证权限管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>region&lt;/td>
&lt;td>多云资源控制器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scheduler&lt;/td>
&lt;td>资源调度器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>glance&lt;/td>
&lt;td>虚拟机镜像管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>host&lt;/td>
&lt;td>私有云虚拟机管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>baremetal&lt;/td>
&lt;td>私有云物理机管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>esxi-agent&lt;/td>
&lt;td>vmware esxi 实例管理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lb-agent&lt;/td>
&lt;td>私有云负载均衡&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>webconsole&lt;/td>
&lt;td>提供 vnc, ssh 访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>logger&lt;/td>
&lt;td>记录审计日志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>apigateway&lt;/td>
&lt;td>api 网关，能通过该服务访问后端所有 api&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>climc&lt;/td>
&lt;td>命令行管理工具&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>组件架构见下图，分为接入层，控制层和资源层三个主要部分。&lt;/p>
&lt;p>&lt;img src="../images/onecloud-services.png" alt="">&lt;/p>
&lt;h2 id="接入层">接入层&lt;/h2>
&lt;p>接入层实现云管平台的访问功能，允许用户通过如下3种方式访问云管平台的功能：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>API访问&lt;/strong>: 通过REST API访问云管平台功能，用户可以直接通过http接口访问云管平台的REST API，也可以使用云管平台提供的SDK。目前SDK支持Java，Python和Golang等三种语言。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>命令行访问&lt;/strong>: 通过云管平台提供的climc命令行工具访问云管平台功能，允许用户通过脚本调用climc，实现一些自动化运维功能。Climc使用Golang语言，基于云管平台的Golang SDK开发。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Web控制台访问&lt;/strong>: 通过Web UI访问云管平台的功能。允许用户通过主流web浏览器访问云管平台。Web控制台提供管理员使用的管理后台以及普通用户使用的普通功能页面，能够提供大部分的管理和使用功能。Web控制台基于Vue 2.0 JavaScript SPA框架实现。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="控制层">控制层&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>控制层实现云管平台的管理和控制功能。主要由API网关，认证服务，镜像服务，云控制器和调度器，以及 webconsole vnc, ssh 代理服务等组件构成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>API网关提供Web控制台对各个服务的统一REST API访问接口。实现Web控制台的登录验证，session 控制，以及对后端各个服务的API调用。API网关由Golang完全自主开发，完全无状态架构，具备水平扩展能力。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>认证服务提供平台的账户管理和认证体系，并提供基于项目的多租户支持，同时提供服务目录功能。认证服务支持多种认证源，允许和企业的LDAP／AD对接，允许用户以企业统一的账户体系登入系统。认证服务2.10之前版本基于OpenStack Keystone Pika版本，开发语言为Python。在开源版本基础上，我们修正了BUG，并做了若干改进。2.10之后版本采用golang语言开发。Keystone采用无状态架构，支持水平扩展，可以水平拆分实现服务高可用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>镜像服务提供云管平台各种主机资源的操作系统镜像的管理功能。提供镜像存储，元数据管理等功能。镜像服务1.x版本基于OpenStack Glance Folsom版本改进而来，开发语言为Python。在开源版本基础上，我们修正了BUG，并做了若干改进。2.x版本采用golang语言开发。Glance采用无状态架构，支持水平扩展，可以水平拆分实现服务高可用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>云控制器是整个云管平台的中枢，负责机房网络，宿主机，网络，存储，虚拟机等各类资源的元数据信息管理，以及对虚拟机，裸机等的自动化管理操作认证的调度，协调管理。云控制器内置基于REST API接口的分布式异步任务管理框架，实现对在计算节点进行的开关机，创建删除等耗时操作任务的管理协调工作。云控制器完全自主开发，云控制器采用无状态架构，可以水平扩展，通过水平拆分实现高可用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>调度器负责云管平台资源调度功能，是云管平台中资源获取决策的唯一执行者，根据用户对资源的要求，给出资源的最优提供者。调度器支持批量调度，调度性能优异，可扩展性好。调度器完全自主开发，基于Golang语言开发。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="资源层">资源层&lt;/h2>
&lt;ul>
&lt;li>资源层实现对KVM虚拟机，裸机，VMWare虚拟机等计算资源的管理和控制功能。云管平台目前主要支持对KVM虚拟机，裸机，VMWare虚拟机，常用私有云openstack, zstack 以及公有云阿里云，Azure，腾讯云，AWS等公有云资源的管理。&lt;/li>
&lt;/ul></description></item><item><title>Docs: 部署集群</title><link>https://www.cloudpods.org/v3.3/docs/setup/controlplane/</link><pubDate>Sat, 13 Apr 2019 13:01:57 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/setup/controlplane/</guid><description>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;p>OneCloud 相关的组件运行在 kubernetes 之上，环境以及相关的软件依赖如下:&lt;/p>
&lt;ul>
&lt;li>操作系统: Centos 7.6&lt;/li>
&lt;li>最低配置要求: CPU 4核, 内存 8G, 存储 150G&lt;/li>
&lt;li>数据库: mariadb (CentOS 7自带的版本：Ver 15.1 Distrib 5.5.56-MariaDB）&lt;/li>
&lt;li>docker: ce-19.03.9&lt;/li>
&lt;li>kubernetes: v1.15.8&lt;/li>
&lt;/ul>
&lt;p>需要能访问如下网址，如果企业有外网隔离规则，则需要打开相应白名单：&lt;/p>
&lt;ul>
&lt;li>CentOS YUM网络安装源&lt;/li>
&lt;li>&lt;a href="https://iso.yunion.cn/">https://iso.yunion.cn/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://registry.cn-beijing.aliyuncs.com">https://registry.cn-beijing.aliyuncs.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://meta.yunion.cn">https://meta.yunion.cn&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yunionmeta.oss-cn-beijing.aliyuncs.com">https://yunionmeta.oss-cn-beijing.aliyuncs.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="安装配置-mariadb">安装配置 mariadb&lt;/h3>
&lt;p>mariadb 作为服务数据持久化的数据库，可以部署在其它节点或者使用单独维护的。下面假设还没有部署 mariadb，在控制节点上安装设置 mariadb。&lt;/p>
&lt;p>为了方便运行维护，mariadb推荐打开两个参数设施：&lt;/p>
&lt;ul>
&lt;li>skip_name_resolve：取消域名解析&lt;/li>
&lt;li>expire_logs_days=30：设置binlog的超时时间为30天，超过30天的binglog自动删除&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#000">MYSQL_PASSWD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;your-sql-passwd&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 安装 mariadb&lt;/span>
$ yum install -y epel-release mariadb-server
$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now mariadb
$ mysqladmin -u root password &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/my.cnf
&lt;/span>&lt;span style="color:#4e9a06">[mysqld]
&lt;/span>&lt;span style="color:#4e9a06">datadir=/var/lib/mysql
&lt;/span>&lt;span style="color:#4e9a06">socket=/var/lib/mysql/mysql.sock
&lt;/span>&lt;span style="color:#4e9a06"># Disabling symbolic-links is recommended to prevent assorted security risks
&lt;/span>&lt;span style="color:#4e9a06">symbolic-links=0
&lt;/span>&lt;span style="color:#4e9a06"># Settings user and group are ignored when systemd is used.
&lt;/span>&lt;span style="color:#4e9a06"># If you need to run mysqld under a different user or group,
&lt;/span>&lt;span style="color:#4e9a06"># customize your systemd unit file for mariadb according to the
&lt;/span>&lt;span style="color:#4e9a06"># instructions in http://fedoraproject.org/wiki/Systemd
&lt;/span>&lt;span style="color:#4e9a06"># skip domain name resolve
&lt;/span>&lt;span style="color:#4e9a06">skip_name_resolve
&lt;/span>&lt;span style="color:#4e9a06"># auto delete binlog older than 30 days
&lt;/span>&lt;span style="color:#4e9a06">expire_logs_days=30
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">[mysqld_safe]
&lt;/span>&lt;span style="color:#4e9a06">log-error=/var/log/mariadb/mariadb.log
&lt;/span>&lt;span style="color:#4e9a06">pid-file=/var/run/mariadb/mariadb.pid
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06"># include all files from the config directory
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06">!includedir /etc/my.cnf.d
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ mysql -uroot -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;GRANT ALL ON *.* to &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#39; with grant option; FLUSH PRIVILEGES;&amp;#34;&lt;/span>
$ systemctl restart mariadb
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装配置-docker">安装配置 docker&lt;/h3>
&lt;p>安装 docker&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum install -y yum-utils bash-completion
&lt;span style="color:#8f5902;font-style:italic"># 添加 yunion onecloud rpm 源&lt;/span>
$ yum-config-manager --add-repo https://iso.yunion.cn/yumrepo-3.3/yunion.repo
$ yum install -y docker-ce-19.03.9 docker-ce-cli-19.03.9 containerd.io
&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置 docker&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ mkdir -p /etc/docker
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/docker/daemon.json
&lt;/span>&lt;span style="color:#4e9a06">{
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;bridge&amp;#34;: &amp;#34;none&amp;#34;,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;iptables&amp;#34;: false,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;exec-opts&amp;#34;:
&lt;/span>&lt;span style="color:#4e9a06"> [
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;native.cgroupdriver=systemd&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> ],
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;data-root&amp;#34;: &amp;#34;/opt/docker&amp;#34;,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;live-restore&amp;#34;: true,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;log-opts&amp;#34;:
&lt;/span>&lt;span style="color:#4e9a06"> {
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;max-size&amp;#34;: &amp;#34;100m&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> },
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;registry-mirrors&amp;#34;:
&lt;/span>&lt;span style="color:#4e9a06"> [
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;https://lje6zxpk.mirror.aliyuncs.com&amp;#34;,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;https://lms7sxqp.mirror.aliyuncs.com&amp;#34;,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;https://registry.docker-cn.com&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> ]
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 docker&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now docker
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-onecloud-依赖内核">安装 onecloud 依赖内核&lt;/h3>
&lt;p>这里需要安装我们编译的内核，这个内核是基于上游 Centos 3.10.0-1062 编译的，默认添加了 nbd 模块，nbd 模块用于镜像相关的操作。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 安装内核&lt;/span>
$ yum install -y &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kernel-3.10.0-1062.4.3.el7.yn20191203 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kernel-devel-3.10.0-1062.4.3.el7.yn20191203 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kernel-headers-3.10.0-1062.4.3.el7.yn20191203
&lt;span style="color:#8f5902;font-style:italic"># 重启系统进入内核&lt;/span>
$ reboot
&lt;span style="color:#8f5902;font-style:italic"># 重启完成后，查看当前节点内核信息&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 确保为 3.10.0-1062.4.3.el7.yn20191203.x86_64&lt;/span>
$ uname -r
3.10.0-1062.4.3.el7.yn20191203.x86_64
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装配置-kubelet">安装配置 kubelet&lt;/h3>
&lt;p>从 yunion onecloud rpm 的 yum 源安装 kubernetes 1.15.8，并设置 kubelet 开机自启动&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum install -y bridge-utils ipvsadm conntrack-tools &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> jq kubelet-1.15.8-0 kubectl-1.15.8-0 kubeadm-1.15.8-0
$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;source &amp;lt;(kubectl completion bash)&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">source&lt;/span> ~/.bashrc
$ &lt;span style="color:#204a87">source&lt;/span> /etc/profile
$ systemctl &lt;span style="color:#204a87">enable&lt;/span> kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完 kubernetes 相关的二进制后，还需要对系统做一些配置并启用 ipvs 作为 kube-proxy 内部的 service 负载均衡&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 禁用 swap&lt;/span>
$ swapoff -a
&lt;span style="color:#8f5902;font-style:italic"># 如果设置了自动挂载 swap，需要去 /etc/fstab 里面注释掉挂载 swap 那一行&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 关闭 selinux&lt;/span>
$ setenforce &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
$ sed -i &lt;span style="color:#4e9a06">&amp;#39;s/SELINUX=enforcing/SELINUX=disabled/&amp;#39;&lt;/span> /etc/selinux/config
&lt;span style="color:#8f5902;font-style:italic"># 禁用 firewalld&lt;/span>
$ systemctl stop firewalld
$ systemctl disable firewalld
&lt;span style="color:#8f5902;font-style:italic"># 禁用 NetworkManager&lt;/span>
$ systemctl stop NetworkManager
$ systemctl disable NetworkManager
&lt;span style="color:#8f5902;font-style:italic"># 做一些 sysctl 的配置, kubernetes 要求&lt;/span>
$ modprobe br_netfilter
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span>&lt;span style="color:#4e9a06">net.bridge.bridge-nf-call-iptables=1
&lt;/span>&lt;span style="color:#4e9a06">net.bridge.bridge-nf-call-ip6tables=1
&lt;/span>&lt;span style="color:#4e9a06">net.ipv4.ip_forward=1
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ sysctl -p
&lt;span style="color:#8f5902;font-style:italic"># 配置并开启 ipvs&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt; /etc/sysconfig/modules/ipvs.modules
&lt;/span>&lt;span style="color:#4e9a06">#!/bin/bash
&lt;/span>&lt;span style="color:#4e9a06">ipvs_modules=&amp;#34;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06">for kernel_module in \${ipvs_modules}; do
&lt;/span>&lt;span style="color:#4e9a06"> /sbin/modinfo -F filename \${kernel_module} &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;/span>&lt;span style="color:#4e9a06"> if [ $? -eq 0 ]; then
&lt;/span>&lt;span style="color:#4e9a06"> /sbin/modprobe \${kernel_module}
&lt;/span>&lt;span style="color:#4e9a06"> fi
&lt;/span>&lt;span style="color:#4e9a06">done
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ chmod &lt;span style="color:#0000cf;font-weight:bold">755&lt;/span> /etc/sysconfig/modules/ipvs.modules &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> bash /etc/sysconfig/modules/ipvs.modules &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> lsmod &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep ip_vs
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="部署集群">部署集群&lt;/h2>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>如果要部署高可用集群，请先搭建负载均衡集群，参考 &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/controlplane-ha">部署 HA 环境&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h3 id="安装部署工具">安装部署工具&lt;/h3>
&lt;p>先安装部署工具 ocadm 和云平台的命令行工具 climc:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 安装 climc 云平台命令行工具 和 ocadm 部署工具&lt;/span>
$ yum install -y yunion-climc yunion-ocadm
&lt;span style="color:#8f5902;font-style:italic"># climc 在 /opt/yunion/bin 目录下，根据自己的需要加到 bash 或者 zsh 配置文件里面&lt;/span>
$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;export PATH=$PATH:/opt/yunion/bin&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">source&lt;/span> ~/.bashrc
&lt;span style="color:#8f5902;font-style:italic"># 安装必要的服务，并启动和设置为开机自启&lt;/span>
$ yum install -y yunion-executor-server &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> systemctl &lt;span style="color:#204a87">enable&lt;/span> --now yunion-executor
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署-kubernetes-集群">部署 kubernetes 集群&lt;/h3>
&lt;p>接下来会现在当前节点启动 v1.15.8 的 kubernetes 服务，然后部署 OneCloud 控制节点相关的服务到 kubernetes 集群。&lt;/p>
&lt;p>拉取必要的 docker 镜像&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ocadm config images pull
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 ocadm 部署 kubernetes 集群&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>如果要进行高可用部署，并已经搭建好了负载均衡集群，需要在 &lt;code>ocadm init&lt;/code> 命令加上 &lt;code>--control-plane-endpoint &amp;lt;vip&amp;gt;:6443&lt;/code> 参数，告诉 kubernetes 集群前端的 LoadBalancer vip，之后生成的配置就会都用这个 vip 当做控制节点的入口。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 假设 mariadb 部署在本地，如果是使用已有的数据库，请改变对应的 ip&lt;/span>
$ &lt;span style="color:#000">MYSQL_HOST&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>ip route get &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $NF;exit}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 如果是高可用部署，记得在设置 EXTRA_OPT=&amp;#39; --control-plane-endpoint 10.168.222.18:6443&amp;#39;&lt;/span>
$ &lt;span style="color:#000">EXTRA_OPT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>
$ &lt;span style="color:#8f5902;font-style:italic">#EXTRA_OPT=&amp;#39; --control-plane-endpoint 10.168.222.18:6443&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 开始部署 kubernetes 以及 onecloud 必要的控制服务，稍等 3 分钟左右，kubernetes 集群会部署完成&lt;/span>
$ ocadm init --mysql-host &lt;span style="color:#000">$MYSQL_HOST&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --mysql-user root --mysql-password &lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> &lt;span style="color:#000">$EXTRA_OPT&lt;/span>
...
Your Kubernetes and Onecloud control-plane has initialized successfully!
...
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>kubernetes 高可用部署需要 3 个节点，主要是 etcd 需要至少 3 个节点组成高可用集群。如果是高可用部署，请在另外两个节点执行 &lt;code>ocadm join --control-plane &amp;lt;vip&amp;gt;:6443&lt;/code> 部署控制服务，join 的另外两个节点会自动和当前的控制节点组成高可用集群。参考: &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/components/#%E5%8A%A0%E5%85%A5-controlplane">加入控制节点&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;p>kubernetes 集群部署完成后，通过以下命令来确保相关的 pod (容器) 都已经启动, 变成 running 的状态。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ mkdir -p &lt;span style="color:#000">$HOME&lt;/span>/.kube
$ sudo cp -i /etc/kubernetes/admin.conf &lt;span style="color:#000">$HOME&lt;/span>/.kube/config
$ sudo chown &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>id -u&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>:&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>id -g&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#000">$HOME&lt;/span>/.kube/config
$ kubectl get pods --all-namespaces
NAMESPACE NAME READY STATUS RESTARTS AGE
kube-system calico-kube-controllers-648bb4447c-57gjb 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
kube-system calico-node-j89jg 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
kube-system coredns-69845f69f6-f6wnv 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
kube-system coredns-69845f69f6-sct6n 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
kube-system etcd-lzx-ocadm-test2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h
kube-system kube-apiserver-lzx-ocadm-test2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h
kube-system kube-controller-manager-lzx-ocadm-test2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h
kube-system kube-proxy-2fwgf 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
kube-system kube-scheduler-lzx-ocadm-test2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h
kube-system traefik-ingress-controller-qwkfb 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
local-path-storage local-path-provisioner-5978cff7b7-7h8df 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
onecloud onecloud-operator-6d4bddb8c4-tkjkh 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 3h37m
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-onecloud-集群">创建 onecloud 集群&lt;/h3>
&lt;p>当 kubernetes 集群部署完成后，就可以通过 &lt;code>ocadm cluster create&lt;/code> 创建 onecloud 集群，该集群由 onecloud namespace 里面 &lt;strong>onecloud-operator&lt;/strong> deployment 自动部署和维护。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 创建集群&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 如果要部署企业版的组件可以在 cluster create 的时候加上 --use-ee 参数&lt;/span>
$ ocadm cluster create --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完 &lt;code>ocadm cluster create --wait&lt;/code> 命令后，&lt;strong>onecloud-operator&lt;/strong> 会自动创建各个服务组件对应的 pod，等待一段该命令执行完毕， 就可以通过访问 &amp;lsquo;https://本机IP:443&amp;rsquo; 登入前端界面。&lt;/p>
&lt;h3 id="创建登录用户">创建登录用户&lt;/h3>
&lt;p>当控制节点部署完成后，需要创建一个用于前端登录的用户。云平台的管理员认证信息由 &lt;code>ocadm cluster rcadmin&lt;/code> 命令可以得到 , 这些认证信息在使用 climc 控制云平台资源时会用到。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 获取连接 onecloud 集群的环境变量&lt;/span>
$ ocadm cluster rcadmin
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_AUTH_URL&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://10.168.222.218:30357/v3
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_USERNAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>sysadmin
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_PASSWORD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>3hV3qAhvxck84srk
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_PROJECT_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>system
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">YUNION_INSECURE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_REGION_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>region0
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_ENDPOINT_TYPE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>publicURL
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>如果是高可用部署，这些 endpoint 的 public url 会是 vip，如果要在 kubernetes 集群外访问需要到 haproxy 节点上添加对应的 frontend 和 backend，其中frontend的端口对应 endpoint 里面的端口，backend 对应 3 个 controlplane node 的 ip 和对应端口。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;p>创建用户&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 初始化连接集群的管理员认证信息&lt;/span>
$ &lt;span style="color:#204a87">source&lt;/span> &amp;lt;&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ocadm cluster rcadmin&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 设置想要创建的用户名和密码&lt;/span>
$ &lt;span style="color:#000">OC_USERNAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>demo
$ &lt;span style="color:#000">OC_PASSWORD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>demo@123
&lt;span style="color:#8f5902;font-style:italic"># 创建指定的用户&lt;/span>
$ climc user-create --password &lt;span style="color:#000">$OC_PASSWORD&lt;/span> --enabled &lt;span style="color:#000">$OC_USERNAME&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 将用户加入 system 项目并赋予 admin 角色&lt;/span>
$ climc project-add-user system &lt;span style="color:#000">$OC_USERNAME&lt;/span> admin
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="访问前端">访问前端&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 获取本机 IP&lt;/span>
$ ip route get &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $NF;exit}&amp;#39;&lt;/span>
10.168.222.218
&lt;span style="color:#8f5902;font-style:italic"># 测试连通性&lt;/span>
$ curl -k https://10.168.222.218
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用浏览器访问 &amp;lsquo;https://本机IP&amp;rsquo; 会跳转到 web 界面，使用 &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/controlplane/#%E5%88%9B%E5%BB%BA%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7">创建登录用户&lt;/a> 里面指定的用户名和密码登录后，界面如下:&lt;/p>
&lt;p>&lt;img src="../images/web-login.png" alt="登录页">&lt;/p>
&lt;p>&lt;img src="../images/web-dashboard.png" alt="首页">&lt;/p>
&lt;h3 id="删除环境">删除环境&lt;/h3>
&lt;p>如果安装过程中失败，或者想清理环境，可执行以下命令删除 kubernetes 集群。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ocadm reset --force
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="后续">后续&lt;/h2>
&lt;p>如果没有意外，现在应该已经部署好了 onecloud on kubernetes 的集群，以下是一些后续的环节说明，可以根据自己的需要来进行额外的操作。&lt;/p>
&lt;h3 id="添加计算节点">添加计算节点&lt;/h3>
&lt;p>当控制节点搭建完成后，可以参考 &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/host/">计算节点&lt;/a> 一节的内容，添加计算节点，组建一套私有云集群。&lt;/p>
&lt;h3 id="控制节点作为计算节点">控制节点作为计算节点&lt;/h3>
&lt;p>默认情况下 &lt;code>ocadm init&lt;/code> 创建的节点是控制节点，不会运行 onecloud 计算节点的服务。如果需要把控制节点也作为计算节点，需要执行以下步骤:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>安装计算节点需要的依赖，参考 &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/host/#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96">&amp;ldquo;计算节点/安装依赖&amp;rdquo;&lt;/a>，这里主要是要安装我们的内核和运行虚拟机的 qemu 等软件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在控制节点启用该节点作为计算节点，命令如下:&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 用 kubectl get nodes 拿到当前的节点名称&lt;/span>
$ kubectl get nodes
NAME STATUS ROLES AGE
controller01 Ready master 116d
controller02 Ready master 40d
node01 Ready &amp;lt;none&amp;gt; 25d
&lt;span style="color:#8f5902;font-style:italic"># 假设我要把 controller01 和 controller02 作为计算节点&lt;/span>
$ ocadm node enable-host-agent &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --node controller01 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --node controller02
&lt;span style="color:#8f5902;font-style:italic"># 等待并查看运行在 controller01/02 上的计算节点服务&lt;/span>
$ kubectl get pods -n onecloud -o wide &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep host
default-host-7b5cr 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">218&lt;/span> 18h 192.168.222.4 controller01
default-host-ctx5s 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">218&lt;/span> 18h 192.168.222.5 controller02
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="升级回滚组件版本">升级/回滚组件版本&lt;/h3>
&lt;p>&lt;code>ocadm init&lt;/code> 的时候使用 &lt;code>--onecloud-version&lt;/code> 选项设置了组件的版本，可以使用 &lt;code>ocadm cluster update&lt;/code> 命令升级组件到指定的版本，保持更新。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查看现在 onecloud cluster 的版本&lt;/span>
$ kubectl get oc -n onecloud default -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{.spec.version}&amp;#39;&lt;/span>
v3.0.0-20200112.0
&lt;span style="color:#8f5902;font-style:italic"># 升级到 v3.0.0-20200113.0&lt;/span>
$ ocadm cluster update --version v3.0.0-20200113.0 --wait
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 后端服务框架</title><link>https://www.cloudpods.org/v3.3/docs/contribute/framework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/v3.3/docs/contribute/framework/</guid><description>
&lt;p>介绍云平台后端服务所用的框架和相关库的使用方法，建议先阅读 &lt;a href="https://www.cloudpods.org/v3.3/docs/contribute/services/">&amp;ldquo;开发相关/服务组件介绍&amp;rdquo;&lt;/a> 了解各个服务大概的功能。&lt;/p>
&lt;h2 id="后端服务框架">后端服务框架&lt;/h2>
&lt;p>keystone, region, glance 等后端服务，都是用的同一套后端服务框架，这个框架是我们自己定义实现的，核心模块如下:&lt;/p>
&lt;p>&lt;img src="../images/service_framework.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>REST API: 负责解析客户端发送的 CRUD http 请求，将不同的请求对应到 Model Dispatcher 模块。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Model Dispatcher: 将客户端的请求分发到对应资源的业务操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Model: 定义云平台各种资源，会进行数据库读写相关操作，如果具体业务需要进行耗时操作，会通过 Task 机制来执行耗时任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Task: 后台处理异步耗时任务的模块，会通过更新 Model 的状态来更新任务的执行结果。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="onecloud-代码结构">onecloud 代码结构&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/onecloud/tree/master/build">build&lt;/a>: 打包rpm脚本&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/onecloud/tree/master/cmd">cmd&lt;/a>: 可执行binary入口程序&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/onecloud/tree/master/pkg">pkg&lt;/a>: 库
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/onecloud/tree/master/pkg/appsrv">appsrv&lt;/a>: 通用http服务框架&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/onecloud/tree/master/pkg/cloudcommon">cloudcommon&lt;/a>: 云平台服务框架，基于appsrv扩展
&lt;ul>
&lt;li>&lt;a href="https://github.com/yunionio/onecloud/tree/master/pkg/cloudcommon/options">cloudcommon/options&lt;/a>: 通用options&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/onecloud/tree/master/pkg/cloudcommon/app">cloudcommon/app&lt;/a>: 通用服务初始化代码&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/onecloud/tree/master/pkg/cloudcommon/db">cloudcommon/db&lt;/a>: Model dispatcher和Models的基础实现&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/onecloud/tree/master/pkg/cloudcommon/db/lockman">cloudcommon/db/lockman&lt;/a>: 锁实现&lt;/li>
&lt;li>&lt;a href="https://github.com/yunionio/onecloud/tree/master/pkg/cloudcommon/db/taskman">cloudcommon/db/taskman&lt;/a>: 异步任务框架&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="认证部分">认证部分&lt;/h2>
&lt;p>&lt;img src="../images/auth_framework.png" alt="">&lt;/p>
&lt;ul>
&lt;li>客户端向服务发起请求前，需要从keystone获得token&lt;/li>
&lt;li>客户端通过携带用户名密码调用keystone的/v3/auth/tokens接口获得token&lt;/li>
&lt;li>客户端向服务发起的每次API请求都会在HTTP头携带该token，比如: X-Auth-Token: {token}&lt;/li>
&lt;li>后端服务向keystone验证该token，获得用户的身份信息，执行后续API的流程&lt;/li>
&lt;li>每个服务都有一个keystone注册的服务用户账号（user/password)，并且以admin角色加入system项目&lt;/li>
&lt;li>服务启动后，会向keystone发起认证，获得admin token&lt;/li>
&lt;li>用户通过API访问服务时，将在header携带token&lt;/li>
&lt;li>使用这个admin token访问keystone的token验证接口，验证这个token，获得用户的身份信息&lt;/li>
&lt;/ul>
&lt;h2 id="model-dispatcher">Model Dispatcher&lt;/h2>
&lt;p>把 REST API 和 Model 的方法进行一一映射&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>REST 请求&lt;/th>
&lt;th>Model 方法&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GET /&amp;lt;resources&amp;gt;&lt;/td>
&lt;td>AllowListItems&lt;/td>
&lt;td>List的权限判断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>ListItemFilter&lt;/td>
&lt;td>过滤&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>GetCustomizeColumns&lt;/td>
&lt;td>获得扩展字段的信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET /&amp;lt;resources&amp;gt;/&amp;lt;res_id&amp;gt;&lt;/td>
&lt;td>AllowGetDetails&lt;/td>
&lt;td>Get 的权限判断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>GetExtraDetails&lt;/td>
&lt;td>获取扩展字段的信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GET /&amp;lt;resources&amp;gt;/&amp;lt;res_id&amp;gt;/&amp;lt;spec&amp;gt;&lt;/td>
&lt;td>AllowGetDetails&amp;lt;Spec&amp;gt;&lt;/td>
&lt;td>获取资源特定属性的权限判断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>GetDetails&amp;lt;Spec&amp;gt;&lt;/td>
&lt;td>获取资源特定属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST /&amp;lt;resources&amp;gt;&lt;/td>
&lt;td>AllowCreateItem&lt;/td>
&lt;td>创建操作的鉴权&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>ValidateCreateData&lt;/td>
&lt;td>校验和处理创建的数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>CustomizeCreate&lt;/td>
&lt;td>自定义的创建操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>PostCreate&lt;/td>
&lt;td>创建后的hook&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>OnCreateComplete&lt;/td>
&lt;td>创建完成的hook&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>POST /&amp;lt;resources&amp;gt;/&amp;lt;res_id&amp;gt;/&amp;lt;action&amp;gt;&lt;/td>
&lt;td>AllowPerformAction&amp;lt;Action&amp;gt;&lt;/td>
&lt;td>某个资源执行特定操作的鉴权判断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>Perform&amp;lt;Action&amp;gt;&lt;/td>
&lt;td>某个资源执行特定操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PUT /&amp;lt;resources&amp;gt;/&amp;lt;res_id&amp;gt;&lt;/td>
&lt;td>AllowUpdateItem&lt;/td>
&lt;td>对指定资源更新操作的鉴权&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>ValidateUpdateData&lt;/td>
&lt;td>校验和处理更新操作的数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>PreUpdate&lt;/td>
&lt;td>自定义的创建操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>PostUpdate&lt;/td>
&lt;td>创建后的hook&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>DELETE /&amp;lt;resources&amp;gt;/&amp;lt;res_id&amp;gt;&lt;/td>
&lt;td>AllowDeleteItem&lt;/td>
&lt;td>删除指定资源的鉴权&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>CustomizeDelete&lt;/td>
&lt;td>自定义的删除操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>PreDelete&lt;/td>
&lt;td>删除前的hook&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>Delete&lt;/td>
&lt;td>执行删除操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>PostDelete&lt;/td>
&lt;td>删除后的hook&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>具体 restful 请求的绑定函数在: &lt;a href="https://github.com/yunionio/onecloud/blob/master/pkg/appsrv/dispatcher/dispatcher.go#L33">pkg/appsrv/dispatcher/dispatcher.go&lt;/a> 文件中的 &lt;strong>AddModelDispatcher&lt;/strong> 函数。&lt;/p>
&lt;h2 id="数据库-orm-模型">数据库 ORM 模型&lt;/h2>
&lt;p>代码位于 &lt;a href="https://github.com/yunionio/onecloud/tree/master/pkg/cloudcommon/db">cloudcommon/db&lt;/a>&lt;/p>
&lt;ul>
&lt;li>接口
&lt;ul>
&lt;li>IModelManager: 对应资源在数据库里面的表&lt;/li>
&lt;li>IModel: 对应资源在数据库里面的单条数据&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据结构
&lt;ul>
&lt;li>SResourceBase: 基础资源
&lt;ul>
&lt;li>SStandaloneResourceBase: 基础设施的物理资源，没有具体ownerId的资源，如zone, host
&lt;ul>
&lt;li>SVirtualResourceBase: 虚拟资源，如虚拟机（guest)
&lt;ul>
&lt;li>SSharableVirtualResourceBase: 虚拟的可以共享的虚拟资源，如disk, network
&lt;ul>
&lt;li>SAdminSharableVirtualInfoBase: 管理配置用的可共享虚拟资源，如security group&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>SJointResourceBase: 联合数据类型，如虚拟网卡是虚拟机和网络的联合，虚拟磁盘挂在：虚拟机和虚拟磁盘的联合&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="举例">举例&lt;/h3>
&lt;p>用虚拟机的 model 来举例，代码在: &lt;a href="https://github.com/yunionio/onecloud/blob/master/pkg/compute/models/guests.go">pkg/compute/models/guests.go&lt;/a>。&lt;/p>
&lt;p>GuestManager 对应数据库里面的 guests_tbl，该对象嵌套 db.SVirtualResourceBaseManager 表示是虚拟资源的 Manager，这样会默认实现 db.IModelManager 接口，然后根据业务需要重写一些方法会比较方便。&lt;/p>
&lt;p>SGuest 对应 guests_tbl 数据库里面的每一行数据，由 GuestManager 管理，嵌套 db.SVirtualResourceBase 结构，默认就会有虚拟资源所需要的表结构，然后再定义一些虚拟机独有的属性比如 VcpuCount 表示 cpu 核数，VmemSize 表示内存大小。 在代码抽象后表示虚拟机实例，该对象会绑定对虚拟机具体的业务操作实现函数。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;yunion.io/x/onecloud/pkg/cloudcommon/db&amp;#34;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">SGuestManager&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SVirtualResourceBaseManager&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">GuestManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">SGuestManager&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">init&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">GuestManager&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">SGuestManager&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">SVirtualResourceBaseManager&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewVirtualResourceBaseManager&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;guests_tbl&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;server&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;servers&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000;font-weight:bold">),&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">GuestManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetVirtualObject&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">GuestManager&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">GuestManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetAlias&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;guest&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;guests&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">SGuest&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SVirtualResourceBase&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SExternalizedResourceBase&lt;/span>
&lt;span style="color:#000">SBillingResourceBase&lt;/span>
&lt;span style="color:#000">VcpuCount&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#4e9a06">`nullable:&amp;#34;false&amp;#34; default:&amp;#34;1&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(TINYINT, nullable=False, default=1)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">VmemSize&lt;/span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#4e9a06">`nullable:&amp;#34;false&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;required&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(Integer, nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">BootOrder&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;8&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; default:&amp;#34;cdn&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(8, charset=&amp;#39;ascii&amp;#39;), nullable=True, default=&amp;#39;cdn&amp;#39;)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">DisableDelete&lt;/span> &lt;span style="color:#000">tristate&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TriState&lt;/span> &lt;span style="color:#4e9a06">`nullable:&amp;#34;false&amp;#34; default:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(Boolean, nullable=False, default=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ShutdownBehavior&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;16&amp;#34; charset:&amp;#34;ascii&amp;#34; default:&amp;#34;stop&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(16, charset=&amp;#39;ascii&amp;#39;), default=SHUTDOWN_STOP)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">KeypairId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">HostId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;admin&amp;#34; get:&amp;#34;admin&amp;#34; index:&amp;#34;true&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">BackupHostId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; get:&amp;#34;user&amp;#34;`&lt;/span>
&lt;span style="color:#000">Vga&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Vdi&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Machine&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">Bios&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">OsType&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; update:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">FlavorId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">SecgrpId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; get:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">AdminSecgrpId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; get:&amp;#34;admin&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(36, charset=&amp;#39;ascii&amp;#39;), nullable=True)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">Hypervisor&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;16&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;false&amp;#34; default:&amp;#34;kvm&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;required&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(16, charset=&amp;#39;ascii&amp;#39;), nullable=False, default=HYPERVISOR_DEFAULT)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">InstanceType&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;64&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34; create:&amp;#34;optional&amp;#34;`&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="数据库锁">数据库锁&lt;/h2>
&lt;p>代码位于 cloudcommon/db/lockman:&lt;/p>
&lt;ul>
&lt;li>LockClass/ReleaseClass: 锁住一类实例，一般创建资源时候需要锁&lt;/li>
&lt;li>LockObject/ReleaseObject: 锁住一个实例，一般修改资源实例是需要锁&lt;/li>
&lt;li>LockRawObject/RelaseRawObject: 通用的锁&lt;/li>
&lt;/ul>
&lt;h3 id="举例-1">举例&lt;/h3>
&lt;p>&lt;a href="https://github.com/yunionio/onecloud/blob/master/pkg/cloudcommon/db/db_dispatcher.go#L900">pkg/cloudcommon/db/db_dispatcher.go&lt;/a> 里面的 DoCreate 函数会创建对应 Model 的对象并插入数据到数据库，这个时候就需要加锁。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">DoCreate&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">manager&lt;/span> &lt;span style="color:#000">IModelManager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TokenCredential&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">query&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ownerId&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IIdentityProvider&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">IModel&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">lockman&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">LockClass&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">manager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">GetLockClassKey&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">manager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ownerId&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">defer&lt;/span> &lt;span style="color:#000">lockman&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ReleaseClass&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">manager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">GetLockClassKey&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">manager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ownerId&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">doCreateItem&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">manager&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ownerId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="worker队列管理">worker队列管理&lt;/h2>
&lt;p>为了避免不可预期的并发度，所有异步执行的代码都应该在worker内执行，以便于管理并发度。&lt;/p>
&lt;p>代码位于 appsrv/workers.go&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#000">workerman&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">appsrv&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewWorkerManager&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">name&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">parallel_cnt&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">…&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">workerman&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Run&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">…&lt;/span>&lt;span style="color:#000;font-weight:bold">},&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="task-机制">Task 机制&lt;/h2>
&lt;p>云平台的异步耗时任务会放在 Task 机制里面去执行，比如创建虚拟机操作，用户提交了请求，region 控制器校验参数合格后，会记录数据到数据库，然后马上返回客户端对应的虚拟机记录，与此同时，会开始执行创建虚拟机的 task，这个 task 会立即在后台执行，会通过更新虚拟机 SGuest model 的状态和记录操作日志来表示执行的成功或失败。&lt;/p>
&lt;p>task 也是记录在数据库 tasks_tbl 里面的记录，对应的定义在: &lt;a href="https://github.com/yunionio/onecloud/blob/master/pkg/cloudcommon/db/taskman/tasks.go">pkg/cloudcommon/db/taskman/tasks.go&lt;/a> 里面，数据结构如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">STaskManager&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SResourceBaseManager&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">TaskManager&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">STaskManager&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000">init&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">TaskManager&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">STaskManager&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">SResourceBaseManager&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewResourceBaseManager&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">STask&lt;/span>&lt;span style="color:#000;font-weight:bold">{},&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;tasks_tbl&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;task&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;tasks&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">TaskManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetVirtualObject&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">TaskManager&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">type&lt;/span> &lt;span style="color:#000">STask&lt;/span> &lt;span style="color:#204a87;font-weight:bold">struct&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SResourceBase&lt;/span>
&lt;span style="color:#000">Id&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;36&amp;#34; charset:&amp;#34;ascii&amp;#34; primary:&amp;#34;true&amp;#34; list:&amp;#34;user&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">36&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">charset&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#000">ascii&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">primary_key&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">default&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">get_uuid&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">ObjName&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;128&amp;#34; charset:&amp;#34;utf8&amp;#34; nullable:&amp;#34;false&amp;#34; list
&lt;/span>&lt;span style="color:#4e9a06">:&amp;#34;user&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(128, charset=&amp;#39;utf8&amp;#39;), nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">ObjId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;128&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;false&amp;#34; lis
&lt;/span>&lt;span style="color:#4e9a06">t:&amp;#34;user&amp;#34; index:&amp;#34;true&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(ID_LENGTH, charset=&amp;#39;ascii&amp;#39;), nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">TaskName&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;64&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;false&amp;#34; list
&lt;/span>&lt;span style="color:#4e9a06">:&amp;#34;user&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(64, charset=&amp;#39;ascii&amp;#39;), nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">UserCred&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TokenCredential&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;1024&amp;#34; charset:&amp;#34;utf8&amp;#34; nullable:&amp;#34;false&amp;#34; get
&lt;/span>&lt;span style="color:#4e9a06">:&amp;#34;user&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(1024, charset=&amp;#39;ascii&amp;#39;), nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// OwnerCred string `width:&amp;#34;512&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;true&amp;#34;` // Column(VARCHAR
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">512&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">charset&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#000">ascii&lt;/span>&lt;span style="color:#a40000">&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">nullable&lt;/span>&lt;span style="color:#000;font-weight:bold">=&lt;/span>&lt;span style="color:#000">True&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">Params&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONDict&lt;/span> &lt;span style="color:#4e9a06">`charset:&amp;#34;utf8&amp;#34; length:&amp;#34;medium&amp;#34; nullable:&amp;#34;false&amp;#34; get:&amp;#34;us
&lt;/span>&lt;span style="color:#4e9a06">er&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(MEDIUMTEXT(charset=&amp;#39;ascii&amp;#39;), nullable=False)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">Stage&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span> &lt;span style="color:#4e9a06">`width:&amp;#34;64&amp;#34; charset:&amp;#34;ascii&amp;#34; nullable:&amp;#34;false&amp;#34; default:&amp;#34;on_init&amp;#34; list:&amp;#34;u
&lt;/span>&lt;span style="color:#4e9a06">ser&amp;#34;`&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Column(VARCHAR(64, charset=&amp;#39;ascii&amp;#39;), nullable=False, default=&amp;#39;on_init&amp;#39;)
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#000">taskObject&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IStandaloneModel&lt;/span> &lt;span style="color:#4e9a06">`ignore:&amp;#34;true&amp;#34;`&lt;/span>
&lt;span style="color:#000">taskObjects&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IStandaloneModel&lt;/span> &lt;span style="color:#4e9a06">`ignore:&amp;#34;true&amp;#34;`&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Id: STask 里面的 Id 是该 task 记录的 Id&lt;/li>
&lt;li>ObjId: 对应资源对象的 Id，用于记录执行该 task 的对应操作的资源，比如某台虚拟机、磁盘的 Id&lt;/li>
&lt;li>UserCred: 存储执行 task 的用户信息&lt;/li>
&lt;li>Params: 执行 task 的参数&lt;/li>
&lt;li>TaskName: 对应 task 的名称&lt;/li>
&lt;li>Stage: task 执行的阶段，默认为 OnInit&lt;/li>
&lt;/ul>
&lt;h3 id="举例-2">举例&lt;/h3>
&lt;p>以虚拟机关机这个操作来举例:&lt;/p>
&lt;ul>
&lt;li>客户端发起 POST /servers/&amp;lt;server_id&amp;gt;/stop 请求后，通过服务框架会执行 &lt;code>func (self *SGuest) PerformStop&lt;/code> 函数，代码片段如下(位于: &lt;a href="https://github.com/yunionio/onecloud/blob/2003c44264f1a244f32fd0584e7ce0d23df78705/pkg/compute/models/guest_actions.go#L2357">pkg/compute/models/guest_actions.go&lt;/a>):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">PerformStop&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TokenCredential&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">query&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// XXX if is force, force stop guest
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">var&lt;/span> &lt;span style="color:#000">isForce&lt;/span> &lt;span style="color:#000;font-weight:bold">=&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">QueryBoolean&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;is_force&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">isForce&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">||&lt;/span> &lt;span style="color:#000">utils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IsInStringArray&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Status&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[]&lt;/span>&lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">VM_RUNNING&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">VM_STOP_FAILED&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">StartGuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">isForce&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">httperrors&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewInvalidStatusError&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Cannot stop server in status %s&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Status&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>SGuest 会执行 self.StartGuestStopTask 函数，该函数会去调用虚拟机不同的 Driver 执行关机操作&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#8f5902;font-style:italic">// pkg/compute/models/guest_actions.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">StartGuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TokenCredential&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">isForce&lt;/span> &lt;span style="color:#204a87;font-weight:bold">bool&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">parentTaskId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">StartGuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">parentTaskId&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#8f5902;font-style:italic">// pkg/compute/guestdrivers/virtualization.go
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;yunion.io/x/onecloud/pkg/cloudcommon/db/taskman&amp;#34;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">SVirtualizedGuestDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">StartGuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span> &lt;span style="color:#000">mcclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TokenCredential&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">params&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONDict&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">parentTaskId&lt;/span> &lt;span style="color:#204a87;font-weight:bold">string&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">error&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">taskman&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">TaskManager&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewTask&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;GuestStopTask&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">params&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">parentTaskId&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">err&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">task&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ScheduleRun&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;strong>taskman.TaskManager.NewTask(ctx, &amp;ldquo;GuestStopTask&amp;rdquo;, &amp;hellip;)&lt;/strong> 这里面的 GuestStopTask 对应 &lt;a href="https://github.com/yunionio/onecloud/blob/master/pkg/compute/tasks/guest_stop_task.go">pkg/compute/tasks/guest_stop_task.go&lt;/a> 里面的 GuestStopTask，是通过 taskman 里面维护的一个 map 查找的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>task.ScheduleRun(nil)&lt;/strong> 会开始执行对应的 Task，默认会从 task 的默认 Stage OnInit 函数开始执行，所以通过 task 机制就会执行到 GuestStopTask.OnInit 函数。OnInit 函数最终会调用对应虚拟机的 driver 执行 RequestStopOnHost 函数并更新设置自己的 Stage 为 OnMasterStopTaskComplete。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对于虚拟机来说 RequestStopOnHost 函数会请求虚拟机所在的 host agent 关闭虚拟机，关机成功后会回调 region task 框架，该框架会根据 taskId 从数据库 load 回来 GuestStopTask，接着它设置的 Stage OnMasterStopTaskComplete 执行。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>这里失败会自动调用 OnGuestStopTaskCompleteFailed 函数，所以编写对应 task stage 函数时如果写 &amp;lt;OnSometingComplete&amp;gt; 函数时，必须也同时写 &amp;lt;OnSometingCompleteFailed&amp;gt; 函数来处理失败情况。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;ul>
&lt;li>如果成功关机，OnMasterStopTaskComplete 调用 OnGuestStopTaskComplete 函数，该函数会把虚拟机的状态设置为 ready，并记录一条关机操作日志；如果失败会调用 OnGuestStopTaskCompleteFailed 函数，该函数会虚拟机状态设置为关机失败，并记录失败的原因。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-golang" data-lang="golang">&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">OnInit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obj&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IStandaloneModel&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">obj&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OpsLog&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">LogEvent&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ACT_STOPPING&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UserCred&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">stopGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">stopGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">host&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetHost&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">host&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnGuestStopTaskCompleteFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">NewString&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;no associated host&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">!&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IsSubtask&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetStatus&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UserCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">VM_STOPPING&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetStage&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;OnMasterStopTaskComplete&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">nil&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">err&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">GetDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">().&lt;/span>&lt;span style="color:#000">RequestStopOnHost&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">host&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">OnMasterStopTaskComplete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnGuestStopTaskComplete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">OnMasterStopTaskCompleteFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">obj&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">IStandaloneModel&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">:=&lt;/span> &lt;span style="color:#000">obj&lt;/span>&lt;span style="color:#000;font-weight:bold">.(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OnGuestStopTaskCompleteFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">OnGuestStopTaskComplete&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetStatus&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UserCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">api&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">VM_READY&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#000">logclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddActionLogWithStartable&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">logclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ACT_VM_STOP&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Us&lt;/span>
&lt;span style="color:#000">erCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">func&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">GuestStopTask&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000">OnGuestStopTaskCompleteFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span> &lt;span style="color:#000">context&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Context&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">models&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SGuest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span> &lt;span style="color:#000">jsonutils&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">JSONObject&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">......&lt;/span>
&lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">OpsLog&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">LogEvent&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">db&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ACT_STOP_FAIL&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UserCred&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">SetStageFailed&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">ctx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;span style="color:#000">logclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">AddActionLogWithStartable&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">guest&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">logclient&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">ACT_VM_STOP&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">reason&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">String&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#000">self&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">UserCred&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="如何增加一个新的服务">如何增加一个新的服务&lt;/h2>
&lt;ul>
&lt;li>在keystone注册一个服务启用用的账户&lt;/li>
&lt;li>在keystone注册service和endpoint&lt;/li>
&lt;li>参考 onecloud/pkg/logger实现服务代码&lt;/li>
&lt;li>为服务准备一个配置文件，包含以下基础信息&lt;/li>
&lt;/ul>
&lt;p>假设服务名为 svc，用户和密码为 svcuser, svcuserpassword，服务监听地址为: http://localhost:8866, region 为 LocalTest，对应操作如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 创建 service&lt;/span>
$ climc service-create --enabled svc svc
&lt;span style="color:#8f5902;font-style:italic"># 创建 endpoint，对应的 service 为 svc&lt;/span>
$ climc endpoint-create svc LocalTest internal http://localhost:8866
&lt;span style="color:#8f5902;font-style:italic"># 创建 user&lt;/span>
$ climc user-create --password svcuserpassword --enabled svcuser
&lt;span style="color:#8f5902;font-style:italic"># 把 user 加入 system 项目&lt;/span>
$ climc project-add-user system svcuser admin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置信息如下&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#204a87;font-weight:bold">region&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">LocalTest&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8866&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">auth_url&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">https://&amp;lt;keystone_url&amp;gt;:35357/v3&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">admin_user&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">svcuser&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">admin_password&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">svcuserpassword&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">admin_tenant_name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">system&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 添加 K8S 节点</title><link>https://www.cloudpods.org/v3.3/docs/setup/components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/v3.3/docs/setup/components/</guid><description>
&lt;p>部署完集群后，整个 kubernetes 集群只有一个节点，onecloud 相关服务都运行在了该节点上，为了服务的高可用，我们可以继续添加节点到 kubernetes 集群。&lt;/p>
&lt;h3 id="环境准备">环境准备&lt;/h3>
&lt;p>参考 &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/controlplane/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-docker">&amp;ldquo;部署集群/环境准备&amp;rdquo;&lt;/a> 的流程，安装好 docker 和 kubelet。&lt;/p>
&lt;h3 id="获取加入集群-token">获取加入集群 token&lt;/h3>
&lt;p>然后在控制节点使用 ocadm 拿到加入集群的 token，在待部署节点使用 ocadm 加入集群，操作如下:&lt;/p>
&lt;p>在&lt;strong>控制节点&lt;/strong>获取加入节点的 token&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ocadm token list &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep bootstrap
4s4meb.xvgk2bwpmbospn3s 23h 2019-07-10T15:41:10+08:00 authentication,signing The default bootstrap token generated by &lt;span style="color:#4e9a06">&amp;#39;ocadm init&amp;#39;&lt;/span>. system:bootstrappers:kubeadm:default-node-token
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>如果 token 过期了，可以在管理节点使用 &lt;code>ocadm token create&lt;/code> 创建新的 token 。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h3 id="加入节点">加入节点&lt;/h3>
&lt;p>加入已有 kubernetes 集群的节点有两种角色，&amp;lsquo;controlplane&amp;rsquo; 和 &amp;lsquo;node&amp;rsquo;。&lt;/p>
&lt;p>controlplane 角色的节点会运行 kube-apiserver、kube-controller-manager、kube-scheduler 和 etcd，加入 controlplane 节点的好处是让 kubernetes 控制相关服务和 etcd 变为高可用。&lt;/p>
&lt;p>node 角色的节点只会运行 kubelet，运行负载容器。&lt;/p>
&lt;h4 id="加入-controlplane">加入 controlplane&lt;/h4>
&lt;p>加入控制节点需要从已有的 kubernetes 集群下载证书，证书使用 certificate key 加密，通过以下方法获取 certificate-key&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ocadm init phase upload-certs
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>upload-certs&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Storing the certificates in Secret &lt;span style="color:#4e9a06">&amp;#34;kubeadm-certs&amp;#34;&lt;/span> in the &lt;span style="color:#4e9a06">&amp;#34;kube-system&amp;#34;&lt;/span> Namespace
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>upload-certs&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Using certificate key:
afa5e18bacb3f50b424cbf815fce6d1bd916fe91b58ba467053dc6b460198c55
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 这里的 10.168.222.18 是控制节点的 ip，如果是高可用部署则为负载均衡器的 vip，请根据你的环境修改&lt;/span>
$ ocadm join --control-plane 10.168.222.18:6443 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --token 4s4meb.xvgk2bwpmbospn3s &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --certificate-key afa5e18bacb3f50b424cbf815fce6d1bd916fe91b58ba467053dc6b460198c55 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --discovery-token-unsafe-skip-ca-verification
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="加入-node">加入 node&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 这里的 10.168.222.18 是控制节点的 ip，如果是高可用部署则为负载均衡器的 vip, 请根据你的环境修改&lt;/span>
$ ocadm join 10.168.222.18:6443 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --token 4s4meb.xvgk2bwpmbospn3s &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --discovery-token-unsafe-skip-ca-verification
...
This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.
Run &lt;span style="color:#4e9a06">&amp;#39;kubectl get nodes&amp;#39;&lt;/span> on the control-plane to see this node join the cluster.
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 操作相关</title><link>https://www.cloudpods.org/v3.3/docs/howto/baremetal/operator/</link><pubDate>Fri, 19 Jul 2019 20:25:05 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/baremetal/operator/</guid><description>
&lt;h3 id="查询物理机">查询物理机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># list baremetal 记录&lt;/span>
climc host-list --baremetal &lt;span style="color:#204a87">true&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># list 已经安装系统的物理机&lt;/span>
climc host-list --baremetal &lt;span style="color:#204a87">true&lt;/span> --occupied
&lt;span style="color:#8f5902;font-style:italic"># list 未安装系统的物理机&lt;/span>
climc host-list --baremetal &lt;span style="color:#204a87">true&lt;/span> --empty
&lt;span style="color:#8f5902;font-style:italic"># 查询物理机详情，包括硬件信息，机房信息&lt;/span>
climc host-show &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="注册物理机">注册物理机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc host-create &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="重新准备物理机">重新准备物理机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc host-prepare &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取物理机登录信息">获取物理机登录信息&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc host-logininfo &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="获取串口登录控制台">获取串口登录控制台&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc webconsole-baremetal &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="开关机">开/关机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc host-start/host-stop &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="进入退出维护模式">进入/退出维护模式&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc host-maintenance/host-unmaintenance &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除物理机">删除物理机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc host-delete &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="转换回收宿主机">转换/回收宿主机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc host-convert-hypervisor
climc host-undo-convert &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="裸金属服务器相关">裸金属服务器相关&lt;/h2>
&lt;h3 id="安装操作系统">安装操作系统&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc server-create &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --hypervisor baremetal &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 指定 server 的类型为 baremetal&lt;/span>
--ncpu &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 创建到 24 核 cpu 的物理机&lt;/span>
--raid-config &lt;span style="color:#4e9a06">&amp;#39;raid1:2:MegaRaid&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 第1块盘，使用 MegaRaid 控制器上的(0-1)号两块物理盘做 raid1&lt;/span>
--raid-config &lt;span style="color:#4e9a06">&amp;#39;none:1&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 第2块盘，使用 MegaRaid 控制器上的(2)号物理盘，不做 raid&lt;/span>
--raid-config &lt;span style="color:#4e9a06">&amp;#39;raid10:4:MegaRaid&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 第3快盘, 使用 MegaRaid 控制器上的(3-6)号四块物理盘做raid10&lt;/span>
--disk CentOS-7.5.qcow2:100g &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 系统盘使用 CentOS-7.5.qcow2 镜像作为操作系统，大小为 100g，使用第1块 raid1 的盘&lt;/span>
--disk &lt;span style="color:#4e9a06">&amp;#39;autoextend:ext4:/opt&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 分区挂载到 /opt, 使用第1块 raid1 的盘，文件系统为 ext4, 大小为(第一块盘总大小 - 该盘其他分区的大小(100g))&lt;/span>
--disk &lt;span style="color:#4e9a06">&amp;#39;autoextend:xfs:/data-nonraid&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 分区挂载到 /data-nonraid, 使用第2块没做 raid 的盘, 文件系统为 xfs，使用所有空间&lt;/span>
--disk &lt;span style="color:#4e9a06">&amp;#39;autoextend:ext4:/data-raid10&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 分区挂载到 /data-raid10, 使用第3块 raid10 的盘，文件系统为 ext4, 使用所有空间&lt;/span>
&amp;lt;server_name&amp;gt; &lt;span style="color:#4e9a06">\ &lt;/span>&lt;span style="color:#8f5902;font-style:italic"># 裸金属服务器名称&lt;/span>
64g &lt;span style="color:#8f5902;font-style:italic"># 创建到 64g 内存大小的物理机&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="raid-配置和分区">raid 配置和分区&lt;/h4>
&lt;p>调用 server-create 接口时通过 &amp;lsquo;&amp;ndash;raid-config&amp;rsquo; 传递参数来配置 raid，每个 raid-config 对应到操作系统可见的磁盘设备(/dev/sdx)。&lt;/p>
&lt;p>&amp;lsquo;&amp;ndash;disk&amp;rsquo; 参数对应不同磁盘上的分区，分区对应到磁盘的逻辑为: 分区按照顺序创建到第1块磁盘上，当 disk 设置 autoextend 参数后，表示接下来的 disk 分区会创建到下一个磁盘，以此类推。&lt;/p>
&lt;ul>
&lt;li>raid 配置 API 参数:&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Type&lt;/th>
&lt;th>value&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>type(磁盘类型)&lt;/td>
&lt;td>string&lt;/td>
&lt;td>rotate(机械盘), ssd(固态盘), hybrid(未知)&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>conf (raid)&lt;/td>
&lt;td>string&lt;/td>
&lt;td>none, raid0, raid1, raid5, raid10&lt;/td>
&lt;td>做raid几或者不做&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>count (磁盘数量)&lt;/td>
&lt;td>int&lt;/td>
&lt;td>e.g. 0, 2, 4&lt;/td>
&lt;td>小于等于物理机实际的盘数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>range (磁盘范围)&lt;/td>
&lt;td>[]int&lt;/td>
&lt;td>e.g. [0,1,2,3], [4,7], [5,6]&lt;/td>
&lt;td>物理磁盘在控制器上的索引号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>splits (切割物理盘)&lt;/td>
&lt;td>string&lt;/td>
&lt;td>(30%,20%,), (300g,100g,)&lt;/td>
&lt;td>做好 raid 的物理盘再切割为多块物理盘&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>adapter (控制器号)&lt;/td>
&lt;td>int&lt;/td>
&lt;td>0, 1&lt;/td>
&lt;td>对应driver的 Adapter 控制器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>driver (控制器名称)&lt;/td>
&lt;td>string&lt;/td>
&lt;td>MegaRaid,HPSARaid,Mpt2SAS,MarvelRaid,Linux,PCIE&lt;/td>
&lt;td>1台物理机上有多个控制器时用于选择盘&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strip (设置raid strip 大小)&lt;/td>
&lt;td>*int&lt;/td>
&lt;td>e.g. 64*1024&lt;/td>
&lt;td>设置strip size, 可选&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ra&lt;/td>
&lt;td>*bool&lt;/td>
&lt;td>&lt;/td>
&lt;td>设置读模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wt&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>设置写模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cachedbadbbu&lt;/td>
&lt;td>*bool&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>direct&lt;/td>
&lt;td>*bool&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>
&lt;p>命令行格式:&lt;/p>
&lt;p>&amp;lsquo;(none,raid0,raid1,raid5,raid10):%d:(MegaRaid|HPSARaid|Mpt2SAS|MarvelRaid|Linux|PCIE):(rotate|ssd|hybrid):[0-n]:strip%dk:adapter%d:ra:nora:wt:wb:direct:cachedbadbbu:nocachedbadbbu&amp;rsquo;&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="查询裸金属服务器">查询裸金属服务器&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc server-list --hypervisor baremetal
climc server-show &amp;lt;server_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="重装操作系统">重装操作系统&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc server-rebuild --image &amp;lt;image_id&amp;gt; &amp;lt;server_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="开关机-1">开/关机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc server-start &amp;lt;server_id&amp;gt;
climc server-stop &amp;lt;server_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除裸金属服务器">删除裸金属服务器&lt;/h3>
&lt;p>删除 server 裸金属服务器会销毁物理机上的操作系统和 raid 配置，对应的 baremetal 重新进入未分配状态&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc server-delete &amp;lt;server_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 查询镜像</title><link>https://www.cloudpods.org/v3.3/docs/howto/image/query/</link><pubDate>Fri, 19 Jul 2019 11:34:38 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/image/query/</guid><description>
&lt;h2 id="列表">列表&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查询所有镜像列表&lt;/span>
$ climc image-list
&lt;span style="color:#8f5902;font-style:italic"># 查询所有缓存的镜像列表&lt;/span>
$ climc cached-image-list
&lt;span style="color:#8f5902;font-style:italic"># 查询包含 ubuntu 关键字的镜像&lt;/span>
$ climc image-list --search ubuntu
&lt;span style="color:#8f5902;font-style:italic"># 查询公有云包含 centos 关键字的缓存&lt;/span>
$ climc cached-image-list --search centos --public-cloud
&lt;span style="color:#8f5902;font-style:italic"># image-list 支持的查询条件&lt;/span>
$ climc &lt;span style="color:#204a87">help&lt;/span> image-list
&lt;span style="color:#8f5902;font-style:italic"># cached-image-list 支持的查询条件&lt;/span>
$ climc &lt;span style="color:#204a87">help&lt;/span> cached-image-list
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="详情">详情&lt;/h2>
&lt;p>根据 image-list 可以获取镜像的列表，第1、2列包含镜像的 id 和 name，通过 id 或 name 可以获取镜像的详情。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查询名称包含 CentOS 的镜像&lt;/span>
$ climc image-list --search centos
+--------------------------------------+-----------------------------------------+-------------+-----------+-----------+-----------+-------------+----------+---------+--------+----------------------------------+----------------------------------+--------+----------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Disk_format &lt;span style="color:#000;font-weight:bold">|&lt;/span> Size &lt;span style="color:#000;font-weight:bold">|&lt;/span> Is_public &lt;span style="color:#000;font-weight:bold">|&lt;/span> Protected &lt;span style="color:#000;font-weight:bold">|&lt;/span> Is_Standard &lt;span style="color:#000;font-weight:bold">|&lt;/span> Min_disk &lt;span style="color:#000;font-weight:bold">|&lt;/span> Min_ram &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> Checksum &lt;span style="color:#000;font-weight:bold">|&lt;/span> Tenant_Id &lt;span style="color:#000;font-weight:bold">|&lt;/span> Tenant &lt;span style="color:#000;font-weight:bold">|&lt;/span> is_guest_image &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-----------------------------------------+-------------+-----------+-----------+-----------+-------------+----------+---------+--------+----------------------------------+----------------------------------+--------+----------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> abf0fd6e-ec40-44ef-8fa2-cfb7187ea656 &lt;span style="color:#000;font-weight:bold">|&lt;/span> CentOS-7-x86_64-GenericCloud-1711.qcow2 &lt;span style="color:#000;font-weight:bold">|&lt;/span> qcow2 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">876740608&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8192&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> active &lt;span style="color:#000;font-weight:bold">|&lt;/span> 317ecf7d1128e0e53cb285b8704dc3d3 &lt;span style="color:#000;font-weight:bold">|&lt;/span> d53ea650bfe144da8ee8f3fba417b904 &lt;span style="color:#000;font-weight:bold">|&lt;/span> system &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-----------------------------------------+-------------+-----------+-----------+-----------+-------------+----------+---------+--------+----------------------------------+----------------------------------+--------+----------------+
*** Total: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Pages: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Limit: &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> Offset: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Page: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> ***
&lt;span style="color:#8f5902;font-style:italic"># 查看 CentOS-7-x86_64-GenericCloud-1711.qcow2 的详情&lt;/span>
$ climc image-show CentOS-7-x86_64-GenericCloud-1711.qcow2
+--------------------+-------------------------------------------------------------------------------------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> Field &lt;span style="color:#000;font-weight:bold">|&lt;/span> Value &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------+-------------------------------------------------------------------------------------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> can_delete &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> can_update &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> checksum &lt;span style="color:#000;font-weight:bold">|&lt;/span> 317ecf7d1128e0e53cb285b8704dc3d3 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> created_at &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-06-16T09:17:57.000000Z &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> delete_fail_reason &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;error&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;class&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;ForbiddenError&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;code&amp;#34;&lt;/span>:403,&lt;span style="color:#4e9a06">&amp;#34;data&amp;#34;&lt;/span>:&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;id&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;image is protected&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;details&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;image is protected&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}}&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> disk_format &lt;span style="color:#000;font-weight:bold">|&lt;/span> qcow2 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> domain_id &lt;span style="color:#000;font-weight:bold">|&lt;/span> default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> fast_hash &lt;span style="color:#000;font-weight:bold">|&lt;/span> 4c53ba2c464213ddc2a77c9b4c5ad3b7 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> id &lt;span style="color:#000;font-weight:bold">|&lt;/span> abf0fd6e-ec40-44ef-8fa2-cfb7187ea656 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> is_data &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> is_emulated &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> is_guest_image &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> is_public &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> is_standard &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> is_system &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> min_disk &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8192&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> min_ram &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> name &lt;span style="color:#000;font-weight:bold">|&lt;/span> CentOS-7-x86_64-GenericCloud-1711.qcow2 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> oss_checksum &lt;span style="color:#000;font-weight:bold">|&lt;/span> 317ecf7d1128e0e53cb285b8704dc3d3 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> owner &lt;span style="color:#000;font-weight:bold">|&lt;/span> d53ea650bfe144da8ee8f3fba417b904 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> pending_deleted &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> project_domain &lt;span style="color:#000;font-weight:bold">|&lt;/span> Default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> project_src &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">local&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> properties &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;os_arch&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;x86_64&amp;#34;&lt;/span>,&lt;span style="color:#4e9a06">&amp;#34;os_type&amp;#34;&lt;/span>:&lt;span style="color:#4e9a06">&amp;#34;Linux&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> protected &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> public_scope &lt;span style="color:#000;font-weight:bold">|&lt;/span> system &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> size &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">876740608&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> status &lt;span style="color:#000;font-weight:bold">|&lt;/span> active &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> tenant &lt;span style="color:#000;font-weight:bold">|&lt;/span> system &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> tenant_id &lt;span style="color:#000;font-weight:bold">|&lt;/span> d53ea650bfe144da8ee8f3fba417b904 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> update_version &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> updated_at &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-06-16T09:19:24.000000Z &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------+-------------------------------------------------------------------------------------------------------------------+
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 制作镜像</title><link>https://www.cloudpods.org/v3.3/docs/howto/image/create/</link><pubDate>Fri, 19 Jul 2019 11:12:40 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/image/create/</guid><description>
&lt;p>你可能需要自己定制发行版的镜像，用于给不同的业务使用。本文介绍如何制作镜像。&lt;/p>
&lt;p>可以通过下载发行版操作系统的 iso , 然后本地启动虚拟机，将 iso 安装到虚拟机的磁盘，然后保存该磁盘，这个磁盘就可以作为镜像上传到 glance，但是这种方法人工参与的步骤太多，容易出错。&lt;/p>
&lt;p>推荐使用 &lt;a href="https://www.packer.io/intro/getting-started/install.html">packer&lt;/a> 这个工具来自动化制作镜像，详细操作可以参考对应的文档 &lt;a href="https://www.packer.io/docs/index.html">https://www.packer.io/docs/index.html&lt;/a> 。&lt;/p>
&lt;p>&lt;a href="https://github.com/yunionio/service-images">https://github.com/yunionio/service-images&lt;/a> 仓库包含了一些我们使用 packer 制作镜像的配置，可以参考使用。&lt;/p></description></item><item><title>Docs: 添加计算节点</title><link>https://www.cloudpods.org/v3.3/docs/setup/host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/v3.3/docs/setup/host/</guid><description>
&lt;p>如果需要构建内部私有云，就需要部署计算节点(宿主机)。计算节点主要负责虚拟机、网络和存储的管理，需要安装的组件如下:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">组件&lt;/th>
&lt;th style="text-align:center">用途&lt;/th>
&lt;th style="text-align:center">安装方式&lt;/th>
&lt;th style="text-align:center">运行方式&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">host&lt;/td>
&lt;td style="text-align:center">管理 kvm 虚拟机和存储&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">docker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">host-deployer&lt;/td>
&lt;td style="text-align:center">虚拟机部署服务&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">docker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">sdnagent&lt;/td>
&lt;td style="text-align:center">管理虚拟机网络和安全组&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">docker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">openvswitch&lt;/td>
&lt;td style="text-align:center">虚拟机网络端口和流表配置&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">systemd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">qemu&lt;/td>
&lt;td style="text-align:center">运行虚拟机&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">kernel&lt;/td>
&lt;td style="text-align:center">onecloud 提供的内核&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="环境">环境&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>操作系统: Centos 7.x&lt;/p>
&lt;/li>
&lt;li>
&lt;p>硬件要求:&lt;/p>
&lt;ul>
&lt;li>Virtualization: CPU 要支持虚拟化，用于虚拟机 KVM 加速&lt;/li>
&lt;li>打开 iommu，VT-d: 用于 GPU 透传(不用GPU可以不开)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>网络:&lt;/p>
&lt;ul>
&lt;li>当前可用的网段: 虚拟机可以直接使用和计算节点所在的扁平网段，需要预先划分保留对应端给云平台虚拟机使用，防止被其它设备占用，最后 IP 冲突&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>备注:&lt;/p>
&lt;ul>
&lt;li>如果是以测试为目的，可以拿一台虚拟机部署计算节点的服务，但可能无法使用 KVM 加速和 GPU 透传&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="安装依赖">安装依赖&lt;/h2>
&lt;p>计算节点所需的依赖以 rpm 的方式安装&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 添加 yum 源&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/yum.repos.d/yunion.repo
&lt;/span>&lt;span style="color:#4e9a06">[yunion]
&lt;/span>&lt;span style="color:#4e9a06">name=Packages for Yunion Multi-Cloud Platform
&lt;/span>&lt;span style="color:#4e9a06">baseurl=https://iso.yunion.cn/yumrepo-3.3
&lt;/span>&lt;span style="color:#4e9a06">sslverify=0
&lt;/span>&lt;span style="color:#4e9a06">failovermethod=priority
&lt;/span>&lt;span style="color:#4e9a06">enabled=1
&lt;/span>&lt;span style="color:#4e9a06">gpgcheck=0
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 禁用防火墙和selinux&lt;/span>
$ systemctl disable firewalld
$ sed -i &lt;span style="color:#4e9a06">&amp;#39;s/SELINUX=enforcing/SELINUX=disabled/g&amp;#39;&lt;/span> /etc/selinux/config
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 rpm 包&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum --disablerepo&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;*&amp;#39;&lt;/span> --enablerepo&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;yunion*&amp;#39;&lt;/span> install -y &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> epel-release libaio jq libusb lvm2 nc ntp fetchclient fuse fuse-devel fuse-libs &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> oniguruma pciutils spice spice-protocol sysstat tcpdump usbredir &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> yunion-qemu-2.12.1 yunion-executor-server &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kernel-3.10.0-1062.4.3.el7.yn20191203 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kernel-devel-3.10.0-1062.4.3.el7.yn20191203 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kernel-headers-3.10.0-1062.4.3.el7.yn20191203 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kmod-openvswitch &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> openvswitch net-tools
$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now yunion-executor
&lt;span style="color:#8f5902;font-style:italic"># 安装完成后需要重启进入我们的内核&lt;/span>
$ reboot
&lt;span style="color:#8f5902;font-style:italic"># 重启完成后，查看当前节点内核信息，确保为 yn 内核&lt;/span>
$ uname -r
3.10.0-1062.4.3.el7.yn20191203.x86_64
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-docker-和-kubelet">安装 docker 和 kubelet&lt;/h3>
&lt;p>参考 &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/controlplane/#%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE-docker">&amp;ldquo;部署集群/环境准备&amp;rdquo;&lt;/a> 的流程，安装好 docker 和 kubelet。&lt;/p>
&lt;h2 id="控制节点操作">控制节点操作&lt;/h2>
&lt;p>以下操作在控制节点进行。&lt;/p>
&lt;h3 id="创建计算节点所在的网段">创建计算节点所在的网段&lt;/h3>
&lt;p>我的环境&lt;strong>计算节点&lt;/strong>的 ip 为 10.168.222.140，就创建一个对应的 &lt;strong>计算节点(host)网段&lt;/strong>。&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
需要根据自己的计算节点环境创建对应的网段，如果不创建该网段，计算节点就没法注册进来。
&lt;/div>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查看当前环境的 zone&lt;/span>
$ climc zone-list
+--------------------------------------+-------+--------+----------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> Cloudregion_ID &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-------+--------+----------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> f73a2120-1206-45fa-8d43-de374ab0f494 &lt;span style="color:#000;font-weight:bold">|&lt;/span> zone0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">enable&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-------+--------+----------------+
&lt;span style="color:#8f5902;font-style:italic"># 在 zone0 里面创建一个 wire bcast0，该资源抽象计算节点所在的二层广播域信息&lt;/span>
$ climc wire-create zone0 bcast0 &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 在 wire bcast0 之上创建一个计算节点的网络，计算节点的 host 服务注册会用到，如果 host 注册时没有在云平台找到对应的网络，将会注册失败&lt;/span>
$ climc network-create --gateway 10.168.222.1 --server-type baremetal bcast0 adm0 10.168.222.140 10.168.222.140 &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="计算节点host操作">计算节点(host)操作&lt;/h2>
&lt;p>以下操作在计算节点进行，计算节点也叫 host，私有云计算节点上面会运行 host 服务来管理 kvm 虚拟机。&lt;/p>
&lt;h3 id="配置-host-服务">配置 host 服务&lt;/h3>
&lt;p>参考 &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/components/#%E8%8E%B7%E5%8F%96%E5%8A%A0%E5%85%A5%E9%9B%86%E7%BE%A4-token">&amp;ldquo;添加节点/获取加入集群token&amp;rdquo;&lt;/a> 的流程获取join所需的信息&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 使用 ocadm join 来创建一台计算节点&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 可选参数 --host-networks: 配置host服务的网络，比如: &amp;#39;eth0/br0/10.168.222.140&amp;#39;, eth0是物理网卡，br0是网桥名称，10.168.222.140是宿主机的ip&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 获取计算节点 IP&lt;/span>
$ &lt;span style="color:#000">host_addr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>ip route get &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $NF;exit}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#000">$host_addr&lt;/span>
10.168.222.140
&lt;span style="color:#8f5902;font-style:italic"># 可选参数 --host-local-image-path: 配置host服务磁盘的存储路径，比如: &amp;#39;/opt/cloud/workspace/disks&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 注意：容器部署的host服务只会挂载/opt/cloud目录&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 如果有其他挂载点需要bind mount到/opt/cloud下，可在fstab中添加一行如&amp;#39;/src /opt/cloud/dst none defaults,bind 0 0&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 可选参数 --host-hostname: 配置宿主机的hostname, 比如: &amp;#39;node1&amp;#39;&lt;/span>
$ ./ocadm join &lt;span style="color:#000">$api_server_addr&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --enable-host-agent &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --token &lt;span style="color:#000">$token&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --discovery-token-unsafe-skip-ca-verification
&lt;span style="color:#8f5902;font-style:italic"># 然后等待宿主机上的host pod和host-deployer pod为running状态&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="控制节点启用-host">控制节点启用 host&lt;/h2>
&lt;p>回到控制节点，启用刚才上报的计算节点，只有启用的宿主机才能运行虚拟机。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 使用 climc 查看注册的 host 列表&lt;/span>
$ climc host-list
+--------------------------------------+-------------------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-------------------------+--------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Access_mac &lt;span style="color:#000;font-weight:bold">|&lt;/span> Access_ip &lt;span style="color:#000;font-weight:bold">|&lt;/span> Manager_URI &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> enabled &lt;span style="color:#000;font-weight:bold">|&lt;/span> host_status &lt;span style="color:#000;font-weight:bold">|&lt;/span> mem_size &lt;span style="color:#000;font-weight:bold">|&lt;/span> cpu_count &lt;span style="color:#000;font-weight:bold">|&lt;/span> node_count &lt;span style="color:#000;font-weight:bold">|&lt;/span> sn &lt;span style="color:#000;font-weight:bold">|&lt;/span> storage_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> host_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> version &lt;span style="color:#000;font-weight:bold">|&lt;/span> storage_size &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-------------------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-------------------------+--------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> 3830870e-a499-459d-89df-bb6979b5e1ff &lt;span style="color:#000;font-weight:bold">|&lt;/span> lzx-allinone-standalone &lt;span style="color:#000;font-weight:bold">|&lt;/span> 00:22:39:4c:6c:e9 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 10.168.222.140 &lt;span style="color:#000;font-weight:bold">|&lt;/span> http://10.168.222.140:8885 &lt;span style="color:#000;font-weight:bold">|&lt;/span> running &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> online &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8192&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> Not Specified &lt;span style="color:#000;font-weight:bold">|&lt;/span> rotate &lt;span style="color:#000;font-weight:bold">|&lt;/span> hypervisor &lt;span style="color:#000;font-weight:bold">|&lt;/span> master&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>7ab047419092301&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50141&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-------------------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-------------------------+--------------+
*** Total: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Pages: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Limit: &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> Offset: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Page: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> ***
&lt;span style="color:#8f5902;font-style:italic"># 启动 host&lt;/span>
$ climc host-enable lzx-allinone-standalone
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建虚拟机测试">创建虚拟机测试&lt;/h2>
&lt;h3 id="上传-cirrors-测试镜像">上传 cirrors 测试镜像&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 下载 cirros 测试镜像&lt;/span>
$ wget https://iso.yunion.cn/yumrepo-2.10/images/cirros-0.4.0-x86_64-disk.qcow2
&lt;span style="color:#8f5902;font-style:italic"># 将镜像上传到 glance&lt;/span>
$ climc image-upload --format qcow2 --os-type Linux --min-disk &lt;span style="color:#0000cf;font-weight:bold">10240&lt;/span> cirros-0.4.0-x86_64-disk.qcow2 ./cirros-0.4.0-x86_64-disk.qcow2
&lt;span style="color:#8f5902;font-style:italic"># 查看上传的镜像&lt;/span>
$ climc image-list
+--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Disk_format &lt;span style="color:#000;font-weight:bold">|&lt;/span> Size &lt;span style="color:#000;font-weight:bold">|&lt;/span> Is_public &lt;span style="color:#000;font-weight:bold">|&lt;/span> Min_disk &lt;span style="color:#000;font-weight:bold">|&lt;/span> Min_ram &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> Checksum &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> 63f6f2af-4db2-4e30-85f5-0ad3baa27bd9 &lt;span style="color:#000;font-weight:bold">|&lt;/span> cirros-0.4.0-x86_64-disk.qcow2 &lt;span style="color:#000;font-weight:bold">|&lt;/span> qcow2 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">22806528&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30720&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> active &lt;span style="color:#000;font-weight:bold">|&lt;/span> 76dc07d1a730a92d0db7fb2d3c305ecd &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+
&lt;span style="color:#8f5902;font-style:italic"># 如果使用虚拟机作为计算节点，存储可能不大，可以把镜像的默认大小30g调整到10g&lt;/span>
$ climc image-update --min-disk &lt;span style="color:#0000cf;font-weight:bold">10240&lt;/span> cirros-0.4.0-x86_64-disk.qcow2
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建测试网络">创建测试网络&lt;/h3>
&lt;p>下面是随机创建了一个主机间不可达的网络用于测试，如果有划分好的扁平二层可用网络，可以直接拿来给虚拟机使用。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc network-create --gateway 10.20.30.1 --server-type guest bcast0 vnet0 10.20.30.2 10.20.30.254 &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>
$ climc network-public vnet0
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建虚拟机">创建虚拟机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 创建虚拟机 testvm01，512M内存, 1个CPU, 系统盘 10g, 第二块磁盘 5g 格式化为 ext4 并挂载到 /opt 的虚拟机&lt;/span>
$ climc server-create --auto-start --allow-delete &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --disk cirros-0.4.0-x86_64-disk.qcow2:10g --disk 5g:ext4:/opt &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --net vnet0 --ncpu &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> --mem-spec 512M testvm01
&lt;span style="color:#8f5902;font-style:italic"># 查看创建的虚拟机，1分钟后应该会变为 running 状态&lt;/span>
$ climc server-list --details
+--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-------------------------+--------+-----------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Billing_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> IPs &lt;span style="color:#000;font-weight:bold">|&lt;/span> Disk &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> vcpu_count &lt;span style="color:#000;font-weight:bold">|&lt;/span> vmem_size &lt;span style="color:#000;font-weight:bold">|&lt;/span> Secgroup &lt;span style="color:#000;font-weight:bold">|&lt;/span> Created_at &lt;span style="color:#000;font-weight:bold">|&lt;/span> Hypervisor &lt;span style="color:#000;font-weight:bold">|&lt;/span> os_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> Host &lt;span style="color:#000;font-weight:bold">|&lt;/span> Tenant &lt;span style="color:#000;font-weight:bold">|&lt;/span> is_system &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-------------------------+--------+-----------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> bcda7d18-decc-4b5f-8654-2d201a84d1fb &lt;span style="color:#000;font-weight:bold">|&lt;/span> testvm01 &lt;span style="color:#000;font-weight:bold">|&lt;/span> postpaid &lt;span style="color:#000;font-weight:bold">|&lt;/span> 10.20.30.254 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">35840&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> running &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">512&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> Default &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2019-09-23T05:08:49.000000Z &lt;span style="color:#000;font-weight:bold">|&lt;/span> kvm &lt;span style="color:#000;font-weight:bold">|&lt;/span> Linux &lt;span style="color:#000;font-weight:bold">|&lt;/span> lzx-allinone-standalone &lt;span style="color:#000;font-weight:bold">|&lt;/span> system &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-------------------------+--------+-----------+
*** Total: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Pages: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Limit: &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> Offset: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Page: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> ***
&lt;span style="color:#8f5902;font-style:italic"># 获取虚拟机登录信息&lt;/span>
$ climc server-logininfo testvm01
+-----------+------------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> Field &lt;span style="color:#000;font-weight:bold">|&lt;/span> Value &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+-----------+------------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> login_key &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000">49wqh5OWGW3jSr1A8RfrMoH69iRRECzaMZITBA&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> password &lt;span style="color:#000;font-weight:bold">|&lt;/span> zS27FwwUFr96 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> updated &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2019-09-23T05:11:29.306403Z &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> username &lt;span style="color:#000;font-weight:bold">|&lt;/span> root &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+-----------+------------------------------------------+
&lt;span style="color:#8f5902;font-style:italic"># 在计算节点联通测试网络(如果你是直接用的二层网络，应该能直接 ping 通虚拟机的 ip 了，不需要做这一步)&lt;/span>
$ ip address add 10.20.30.1/24 dev br0
&lt;span style="color:#8f5902;font-style:italic"># 用之前 server-logininfo 命令获取的用户名密码，直接登录到虚拟机里面&lt;/span>
$ ssh root@10.20.30.254
PING 10.20.30.254 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>10.20.30.254&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 56&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>84&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> bytes of data.
&lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> bytes from 10.20.30.254: &lt;span style="color:#000">icmp_seq&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000">ttl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1.31 ms
&lt;span style="color:#8f5902;font-style:italic"># 如果网络不通，也可以通过 vnc 的方式打开虚拟机的 tty 登录界面，操作如下&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 打开 vnc 链接，用浏览器打开下面的链接&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 打开 vnc 链接时会出现不安全认证，导致 websocket 无法握手，需要在浏览器信任 webconsole server 对应的 endpoint&lt;/span>
$ climc endpoint-list --details &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep webconsole &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep public
&lt;span style="color:#000;font-weight:bold">|&lt;/span> 3da1e476aa7b4ff68e206754aed72d8f &lt;span style="color:#000;font-weight:bold">|&lt;/span> region0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 16120e8f3eec46dc86c59b3e426b0502 &lt;span style="color:#000;font-weight:bold">|&lt;/span> webconsole &lt;span style="color:#000;font-weight:bold">|&lt;/span> webconsole &lt;span style="color:#000;font-weight:bold">|&lt;/span> https://10.168.222.218:8899 &lt;span style="color:#000;font-weight:bold">|&lt;/span> public &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 然后用浏览器访问下 https://10.168.222.218:8899 , 信任该链接即可&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 在通过 webconsole-server 命令获取 vnc web 界面的链接地址，然后用浏览器打开该地址&lt;/span>
$ climc webconsole-server testvm01
https://console.yunion.cn/web-console?access_token&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>FI-VXQSAonhzfSnxVTKCCbwHinp7swlRkmi-4p6s-4OfZpg6TG9YhWuwbHEUA1D7XoKu_w%3D%3D&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">api_server&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https%3A%2F%2F10.168.222.216%3A8899&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>65xB2kaE&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">protocol&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>vnc
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 物理机管理服务</title><link>https://www.cloudpods.org/v3.3/docs/setup/baremetal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/v3.3/docs/setup/baremetal/</guid><description>
&lt;p>启用 baremetal-agent 之前需要部署 onecloud 集群，详见 &lt;a href="https://www.cloudpods.org/v3.3/docs/setup/controlplane">&amp;ldquo;安装部署/部署集群&amp;rdquo;&lt;/a>&lt;/p>
&lt;p>待集群准备完毕后指定 node 来部署 baremetal-agent 服务&lt;/p>
&lt;h2 id="启用-baremetal-agent">启用 baremetal-agent&lt;/h2>
&lt;p>在通过 pxe 引导流程中，baremetal-agent 只会处理来自 dhcp relay 服务器的请求, 所以你需要事先在交换机配置 dhcp relay 或者使用 onecloud host 服务的 dhcp relay 功能。&lt;/p>
&lt;h3 id="如何配置-host-服务-启用-dhcp-relay">如何配置 host 服务 启用 dhcp relay&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 登录到已经部署好计算节点的服务器上修改 /etc/yunion/host.conf，添加 dhcp_relay 配置项：&lt;/span>
dhcp_relay:
- 10.168.222.198 &lt;span style="color:#8f5902;font-style:italic"># baremetal agent dhcp服务监听地址&lt;/span>
- &lt;span style="color:#0000cf;font-weight:bold">67&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># baremetal agent dhcp服务监听端口&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 然后重启host服务&lt;/span>
$ kubectl get pods -n onecloud -o wide &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep host
default-host-p6d8h 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 78m 10.168.222.189 k8s-dev1 &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
default-host-xdc7x 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 78m 10.168.222.150 k8s-dev2 &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 找到对应的 pod 删除等待 host 服务自动重启&lt;/span>
$ kubectl delete pods -n onecloud default-host-xdc7x
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启用-baremetal-agent-1">启用 baremetal-agent&lt;/h3>
&lt;p>然后选择 node 启用 baremetal-agent。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># $listen_interface 指的是 baremetal-agent 监听的网卡名称&lt;/span>
$ ocadm baremetal &lt;span style="color:#204a87">enable&lt;/span> --node &lt;span style="color:#000">$node_name&lt;/span> --listen-interface &lt;span style="color:#000">$listen_interface&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 观察 baremetal agent pod 状态查看是否启动成功&lt;/span>
$ watch &lt;span style="color:#4e9a06">&amp;#34;kubectl get pods -n onecloud | grep baremetal&amp;#34;&lt;/span>
default-baremetal-agent-7c84996c9b-hhllw 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 3m10s
&lt;span style="color:#8f5902;font-style:italic"># 启动成功确认 baremetal-agent 注册到控制节点&lt;/span>
$ climc agent-list
+--------------------------------------+--------------------------+----------------+-----------------------------+---------+------------+------------------------------------------+--------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Access_ip &lt;span style="color:#000;font-weight:bold">|&lt;/span> Manager_URI &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> agent_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> version &lt;span style="color:#000;font-weight:bold">|&lt;/span> zone_id &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+--------------------------+----------------+-----------------------------+---------+------------+------------------------------------------+--------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> f3c2c671-c41d-4f30-8d04-e022b49bb9b5 &lt;span style="color:#000;font-weight:bold">|&lt;/span> baremetal-10.168.222.150 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 10.168.222.150 &lt;span style="color:#000;font-weight:bold">|&lt;/span> https://10.168.222.150:8879 &lt;span style="color:#000;font-weight:bold">|&lt;/span> enabled &lt;span style="color:#000;font-weight:bold">|&lt;/span> baremetal &lt;span style="color:#000;font-weight:bold">|&lt;/span> remotes/origin/master&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>5e415506120011509&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> 6230b485-2e54-480e-8284-33360b8202a8 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+--------------------------+----------------+-----------------------------+---------+------------+------------------------------------------+--------------------------------------+
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署完成后可以参考 &lt;a href="https://www.cloudpods.org/v3.3/docs/howto/baremetal">&amp;ldquo;操作管理/物理机&amp;rdquo;&lt;/a> 来进行对物理机的注册管理&lt;/p>
&lt;h2 id="禁用-baremetal-agent">禁用 baremetal-agent&lt;/h2>
&lt;p>可以在启用 baremetal-agent 的节点中选择节点禁止 baremetal-agent 调度到该节点。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ocadm baremetal disable --node &lt;span style="color:#000">$node_name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 切换到企业版</title><link>https://www.cloudpods.org/v3.3/docs/setup/ce-ee-switch/</link><pubDate>Wed, 12 Feb 2020 12:55:46 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/setup/ce-ee-switch/</guid><description>
&lt;p>默认情况下部署好的版本是 &lt;strong>开源版本(CE: Community Edition)&lt;/strong>，可以使用 &lt;code>ocadm cluster update&lt;/code> 命令切换成 &lt;strong>企业版本(EE: Enterprise Edition)&lt;/strong>。&lt;/p>
&lt;h2 id="切换操作">切换操作&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 切换到企业版&lt;/span>
$ ocadm cluster update --use-ee --wait
&lt;span style="color:#8f5902;font-style:italic"># 切换到开源版的 web 前端&lt;/span>
$ ocadm cluster update --use-ce --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ocadm cluster update --use-ee/--use-ce&lt;/code> 命令会更新替换当前的 default-web deployment，执行该命令后等到新的 pod 启动后，重新刷新前端页面，即可进入(开源版/企业版)前端。&lt;/p>
&lt;h2 id="常见问题">常见问题&lt;/h2>
&lt;h3 id="访问前端出现错误">访问前端出现错误&lt;/h3>
&lt;p>&lt;strong>问题原因&lt;/strong>: 开源与企业版本的前端分别依赖不同的 default-web configmap，直接切换过去会导致 default-web configmap 没有更新，会造成企业版本使用开源版本 configmap 的问题。&lt;/p>
&lt;p>&lt;strong>解决办法&lt;/strong>: 在控制节点上删除 web 服务的 nginx configmap 配置文件，并重启 web 服务即可。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 删除 default-web 的 configmap 文件&lt;/span>
$ kubectl delete configmap -n onecloud default-web
&lt;span style="color:#8f5902;font-style:italic"># 重启 default-web 服务&lt;/span>
$ kubectl rollout restart deployment -n onecloud default-web
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 登录云主机</title><link>https://www.cloudpods.org/v3.3/docs/howto/server/connect/</link><pubDate>Fri, 19 Jul 2019 17:38:36 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/server/connect/</guid><description>
&lt;p>创建好主机后，登录的方式大概分为以下几种：&lt;/p>
&lt;ul>
&lt;li>ssh: linux 通用，要求主机网络可达;&lt;/li>
&lt;li>rdp: windows 远程桌面，要求主机网络可达；&lt;/li>
&lt;li>vnc: vnc 链接，对主机网络没有要求，只要能链接云平台 vnc proxy 即可;&lt;/li>
&lt;li>ipmi sol: 只对装有 BMC 的物理机可用;&lt;/li>
&lt;/ul>
&lt;p>针对以上的链接方式，我们提供以下接口链接云主机：&lt;/p>
&lt;h3 id="vnc-链接">vnc 链接&lt;/h3>
&lt;p>&lt;code>climc webconsole-server&lt;/code> 命令提供通过 vnc 的方式链接虚拟机，该方式对裸金属服务器不可用。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc webconsole-server &amp;lt;server_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ssh-链接">ssh 链接&lt;/h3>
&lt;p>查询 server 的 ip&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 可通过 server-list --search --details 的方式找到主机的 ip&lt;/span>
$ climc server-list --search &amp;lt;server_name&amp;gt; --details
&lt;span style="color:#8f5902;font-style:italic"># 或者通过 server-show &amp;lt;server_id&amp;gt; 的方式得到 ip&lt;/span>
$ climc server-show &amp;lt;server_name&amp;gt; &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep ip
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ips &lt;span style="color:#000;font-weight:bold">|&lt;/span> 10.168.222.226 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查询 server 的登录信息&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc server-logininfo &amp;lt;server_name&amp;gt;
+----------+-----------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> Field &lt;span style="color:#000;font-weight:bold">|&lt;/span> Value &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+----------+-----------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> password &lt;span style="color:#000;font-weight:bold">|&lt;/span> @2aWXB6AmCbV &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> updated &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2019-07-03T10:00:20.801716Z &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> username &lt;span style="color:#000;font-weight:bold">|&lt;/span> root &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+----------+-----------------------------+
&lt;/code>&lt;/pre>&lt;/div>&lt;p>ssh 登录&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ssh root@10.168.222.226
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 webconsole 登录&lt;/p>
&lt;pre>&lt;code>$ climc webconsole-ssh 10.168.222.226
https://console.yunion.cn/web-console?access_token=y7bjpBwtvJHLHpwOUMzNVvsYiAgY1vskIuVwB-aINfH4mm8MsZqwxKSfHqm2pCvY6O8bBA%3D%3D&amp;amp;api_server=https%3A%2F%2Foffice.yunion.io&amp;amp;protocol=tty
&lt;/code>&lt;/pre>&lt;p>在浏览器打开 webconsole 放回的 url ，就会到对应虚拟机的登录界面&lt;/p>
&lt;p>&lt;img src="../images/webssh.png" alt="">&lt;/p></description></item><item><title>Docs: 其他操作</title><link>https://www.cloudpods.org/v3.3/docs/howto/server/others/</link><pubDate>Fri, 19 Jul 2019 17:32:09 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/server/others/</guid><description>
&lt;h3 id="开关机">开关机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 开机&lt;/span>
$ climc server-start &amp;lt;server_id&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 关机&lt;/span>
$ climc server-stop &amp;lt;server_id&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 强制关机&lt;/span>
$ climc server-stop --is-force &amp;lt;server_id&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 重启&lt;/span>
$ climc server-restart &amp;lt;server_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="删除">删除&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 删除至回收站&lt;/span>
$ climc server-delete &amp;lt;server_id&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 彻底删除&lt;/span>
$ climc server-delete -f &amp;lt;server_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="重装密码">重装密码&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc server-deploy --reset-password --password &amp;lt;your_password&amp;gt; &amp;lt;server_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>TODO&lt;/p></description></item><item><title>Docs: libvirt管理虚机导入</title><link>https://www.cloudpods.org/v3.3/docs/howto/server/import/</link><pubDate>Tue, 26 Nov 2019 16:57:43 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/server/import/</guid><description>
&lt;p>支持将libvirt管理的虚拟机导入到OneCloud&lt;/p>
&lt;h2 id="注意事项">注意事项&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>首先需要在libvirt管理的宿主机上安装我们的计算节点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装好计算节点后需要添加的虚拟机的网络到控制节点&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确保libvirt服务关闭&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="相关操作">相关操作&lt;/h2>
&lt;ul>
&lt;li>准备好需要导入虚拟机的信息文件&lt;code>servers.yaml&lt;/code>， 格式如下:&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>hosts:
- host_ip: 10.168.222.137
xml_file_path: /etc/libvirt/qemu
monitor_path: /var/lib/libvirt/qemu
servers:
- mac: 52:54:00:4A:19:AF
ip: 10.168.222.53
- mac: 52:54:00:4A:19:CC
ip: 10.168.222.54
- host_ip: 10.168.222.130
xml_file_path: /etc/libvirt/qemu
monitor_path: /var/lib/libvirt/qemu
servers:
- mac: 53:54:00:4A:19:EC
ip: 11.168.222.50
- mac: 53:54:00:4A:19:EE
ip: 11.168.222.51
&lt;/code>&lt;/pre>&lt;pre>&lt;code>- `host_ip` 是要导入的宿主机的ip
- `xml_file_path`是libvirt存储虚拟机xml文件的路径，
- `monitor_path`是libvirt存储虚拟机monitor socket文件的路径，
- `servers`是需要导入的虚拟机，里面描述了虚拟机的ip和mac对应关系
&lt;/code>&lt;/pre>
&lt;hr>
&lt;ul>
&lt;li>执行 climc servers-import-from-libvirt 开始导入&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#8f5902;font-style:italic"># 导入前确认libvirt服务关闭&lt;/span>
$ climc servers-import-from-libvirt servers.yaml
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: GPU相关</title><link>https://www.cloudpods.org/v3.3/docs/howto/server/gpu/</link><pubDate>Fri, 19 Jul 2019 18:32:40 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/server/gpu/</guid><description>
&lt;p>目前仅支持 OneCloud kvm 虚拟机使用 GPU，使用的 PCI Passthrough 的方式将宿主机上的 Nvidia/AMD GPU 透传给虚拟机使用。&lt;/p>
&lt;h2 id="相关操作">相关操作&lt;/h2>
&lt;h3 id="创建-gpu-云主机">创建 GPU 云主机&lt;/h3>
&lt;ul>
&lt;li>查询 gpu 列表&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc isolated-device-list --gpu
+--------------------------------------+----------+---------------------+---------+------------------+--------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Dev_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> Model &lt;span style="color:#000;font-weight:bold">|&lt;/span> Addr &lt;span style="color:#000;font-weight:bold">|&lt;/span> Vendor_device_id &lt;span style="color:#000;font-weight:bold">|&lt;/span> Host_id &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+----------+---------------------+---------+------------------+--------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> 273f4f72-06b6-49aa-8456-4beceec44997 &lt;span style="color:#000;font-weight:bold">|&lt;/span> GPU-HPC &lt;span style="color:#000;font-weight:bold">|&lt;/span> GeForce GTX &lt;span style="color:#0000cf;font-weight:bold">1050&lt;/span> Ti &lt;span style="color:#000;font-weight:bold">|&lt;/span> 41:00.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 10de:1c82 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 3bce9607-2597-469f-8d9b-977345456739 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> a77333e9-08d9-45c6-87eb-a7d8d902c5f5 &lt;span style="color:#000;font-weight:bold">|&lt;/span> GPU-HPC &lt;span style="color:#000;font-weight:bold">|&lt;/span> Quadro FX &lt;span style="color:#0000cf;font-weight:bold">580&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> 05:00.0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 10de:0659 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 3bce9607-2597-469f-8d9b-977345456739 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+----------+---------------------+---------+------------------+--------------------------------------+
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建 server&lt;/li>
&lt;/ul>
&lt;p>server-create 中的 &lt;code>--isolated-device&lt;/code> 参数指定透传的设备到云主机，可以重复使用多次，透传多个 gpu 到云主机，但要求透传到同一云主机的 gpu 必须在同一宿主机。其余创建参数和创建普通云主机是一样的。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc server-create --hypervisor kvm --isolated-device 273f4f72-06b6-49aa-8456-4beceec44997 ...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="查询-gpu-云主机">查询 GPU 云主机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc server-list --gpu
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="关联-gpu">关联 GPU&lt;/h3>
&lt;p>如果云主机所在的宿主机有可用的 gpu，在主机关机的情况下，可以通过 &lt;code>server-attach-isolated-device&lt;/code> 命令将 gpu 和云主机关联起来，下次主机启动后就可以使用该 gpu 。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc server-attach-isolated-device &amp;lt;server_id&amp;gt; &amp;lt;device_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="卸载-gpu">卸载 GPU&lt;/h3>
&lt;p>如果云主机关联了 gpu，可以通过 &lt;code>server-detach-isolated-device&lt;/code> 卸载主机的某一 gpu。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc server-detach-isolated-device &amp;lt;server_id&amp;gt; &amp;lt;device_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 迁移相关</title><link>https://www.cloudpods.org/v3.3/docs/howto/server/migrate/</link><pubDate>Fri, 19 Jul 2019 18:58:33 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/server/migrate/</guid><description>
&lt;p>TODO&lt;/p></description></item><item><title>Docs: 主备机</title><link>https://www.cloudpods.org/v3.3/docs/howto/server/backup/</link><pubDate>Fri, 19 Jul 2019 18:57:43 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/server/backup/</guid><description>
&lt;p>TODO&lt;/p></description></item><item><title>Docs: 其他操作</title><link>https://www.cloudpods.org/v3.3/docs/howto/image/operation/</link><pubDate>Fri, 19 Jul 2019 17:29:09 +0800</pubDate><guid>https://www.cloudpods.org/v3.3/docs/howto/image/operation/</guid><description>
&lt;h2 id="导入镜像">导入镜像&lt;/h2>
&lt;p>云平台的 glance 镜像服务支持从外部 url 导入镜像，对应 climc 的子命令为 &lt;code>image-import&lt;/code>　。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 导入 https://iso.yunion.cn/yumrepo-3.2/images/cirros-0.4.0-x86_64-disk.qcow2 镜像&lt;/span>
$ climc image-import --format qcow2 --os-type Linux cirros-test.qcow2 https://iso.yunion.cn/yumrepo-3.2/images/cirros-0.4.0-x86_64-disk.qcow2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>image-list&lt;/code> 或 &lt;code>image-show&lt;/code> 查询导入镜像的状态，变为 active 时表明可以使用。&lt;/p>
&lt;h2 id="下载镜像">下载镜像&lt;/h2>
&lt;p>如果需要将云平台的镜像导出到本地，就需要用 &lt;code>climc image-download&lt;/code> 把 glance 存的镜像下载下来。&lt;/p>
&lt;p>参考 &lt;a href="../query/">查询镜像&lt;/a> 查询你想要下载的镜像，获取镜像 id 或 name。&lt;/p>
&lt;p>下载镜像:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># OUTPUT 指定镜像的保存路径和文件名称，如/root/test.qcow2&lt;/span>
$ climc image-download &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--output OUTPUT&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &amp;lt;image_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除镜像">删除镜像&lt;/h2>
&lt;p>镜像默认启用了删除保护，当镜像确定不用了，需要先通过&lt;code>climc image-update&lt;/code>禁用删除保护，再通过 &lt;code>climc image-delete&lt;/code> 删除镜像。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">
&lt;span style="color:#8f5902;font-style:italic"># 禁用镜像删除保护&lt;/span>
$ climc image-update --unprotected &amp;lt;image_id&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 删除镜像&lt;/span>
$ climc image-delete &amp;lt;image_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 升级相关</title><link>https://www.cloudpods.org/v3.3/docs/setup/upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/v3.3/docs/setup/upgrade/</guid><description>
&lt;p>本文介绍从 v3.2.x 升级到 v3.3.x 的步骤以及注意事项。&lt;/p>
&lt;p>版本升级建议从相邻的版本升级，比如从 v3.0.x 升级到 v3.2.x 需要以下的步骤：&lt;/p>
&lt;ol>
&lt;li>v3.0.x =&amp;gt; v3.1.x&lt;/li>
&lt;li>v3.1.x =&amp;gt; v3.2.x&lt;/li>
&lt;/ol>
&lt;p>直接跨多个版本升级可能会出现问题，建议参考以下的内容选择升级步骤:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://opensource.yunion.cn/v3.2/docs/setup/upgrade">v3.1.x 升级到 v3.2.x&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>总体来说，升级的步骤如下:&lt;/p>
&lt;ol>
&lt;li>更新 rpm 源，升级 ocadm&lt;/li>
&lt;li>使用 ocadm 升级 OneCloud 服务&lt;/li>
&lt;/ol>
&lt;h2 id="查看当前版本">查看当前版本&lt;/h2>
&lt;p>可以使用 kubectl 查看当前集群的版本&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 使用 kubectl 获得当前集群的版本为 v3.2.3&lt;/span>
$ kubectl -n onecloud get onecloudclusters default -o&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{.spec.version}&amp;#39;&lt;/span>
v3.2.3
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="更新-rpm-repo">更新 rpm repo&lt;/h2>
&lt;p>ocadm 和 climc 这些命令行工具是以 yum rpm 包的方式安装，所以升级之前需要先更新这两个工具，然后再使用 ocadm 升级 OneCloud 服务。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 修改 baseurl，把 3.2 改成 3.3&lt;/span>
$ sed -i &lt;span style="color:#4e9a06">&amp;#39;s|baseurl.*|baseurl=https://iso.yunion.cn/3.3|g&amp;#39;&lt;/span> /etc/yum.repos.d/yunion.repo
&lt;span style="color:#8f5902;font-style:italic"># 更新 yunion-ocadm, yunion-climc&lt;/span>
$ yum clean all
$ yum install -y yunion-ocadm yunion-climc
&lt;span style="color:#8f5902;font-style:italic"># 查看 ocadm 版本&lt;/span>
$ ocadm version -o short
tags/v3.3.0&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>bece1be20080211&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="更新-onecloud-服务">更新 OneCloud 服务&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 使用 ocadm 更新 onecloud operator 以及相关服务到 v3.3.0 版本&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 该步骤会因为拉取 docker 镜像等待较长时间，请耐心等待&lt;/span>
$ ocadm cluster update --operator-version v3.3.0 --version v3.3.0 --wait
&lt;span style="color:#8f5902;font-style:italic"># 另外可以在升级的过程中使用 kubectl 查看对应 pods 的升级情况&lt;/span>
$ kubectl get pods -n onecloud --watch
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>