<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloudpods –
多云管理平台安装</title><link>https://www.cloudpods.org/zh/docs/quickstart/cmp/</link><description>Recent content in 多云管理平台安装 on Cloudpods</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://www.cloudpods.org/zh/docs/quickstart/cmp/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Ocboot 安装</title><link>https://www.cloudpods.org/zh/docs/quickstart/cmp/allinone-multicloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/quickstart/cmp/allinone-multicloud/</guid><description>
&lt;h2 id="前提">前提&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
本章内容是通过部署工具快速搭建 Cloudpods 服务，如果想在生产环境部署高可用集群请参考: &lt;a href="../../../setup/ha-ce/">高可用安装&lt;/a> 。
&lt;/div>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;h3 id="机器配置要求">机器配置要求&lt;/h3>
&lt;ul>
&lt;li>操作系统: 根据 CPU 架构不同，支持的发行版也不一样，目前支持的发行版情况如下：
&lt;ul>
&lt;li>&lt;a href="http://isoredirect.centos.org/centos/7/isos">CentOS 7.6~7.9 Minimal&lt;/a>: 支持 x86_64 和 arm64&lt;/li>
&lt;li>&lt;a href="https://www.debian.org/distrib/">Debian 10/11&lt;/a>: 支持 x86_64 和 arm64&lt;/li>
&lt;li>&lt;a href="https://releases.ubuntu.com/jammy/">Ubuntu 22.04&lt;/a>: 仅支持 x86_64&lt;/li>
&lt;li>&lt;a href="https://www.kylinos.cn/scheme/server/1.html">银河麒麟V10 SP2/SP3&lt;/a>: 支持 x86_64 和 arm64&lt;/li>
&lt;li>&lt;a href="https://www.chinauos.com/">统信 UOS kongzi&lt;/a>: 支持 x86_64 和 arm64&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>操作系统需要是干净的版本，因为部署工具会重头搭建指定版本的 kubernetes 集群，所以确保系统没有安装 kubernetes, docker 等容器管理工具，否则会出现冲突导致安装异常&lt;/li>
&lt;li>最低配置要求: CPU 4核, 内存 8GiB, 存储 100GiB&lt;/li>
&lt;li>虚拟机和服务使用的存储路径都在 &lt;strong>/opt&lt;/strong> 目录下，所以理想环境下建议单独给 &lt;strong>/opt&lt;/strong> 目录设置挂载点
&lt;ul>
&lt;li>比如把 /dev/sdb1 单独分区做 ext4 然后通过 /etc/fstab 挂载到 /opt 目录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="安装ansible和git">安装ansible和git&lt;/h2>
&lt;p>首先需要安装ansible和git，ansible版本要求最低2.9.27，其中2.11.12测试较多。&lt;/p>
&lt;ul class="nav nav-tabs" id="ocboot_install" role="tablist">&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link active" href="#ocboot_install-0" role="tab" aria-controls="ocboot_install-0" aria-selected="true">CentOS 7&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#ocboot_install-1" role="tab" aria-controls="ocboot_install-1">Kylin V10&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#ocboot_install-2" role="tab" aria-controls="ocboot_install-2">Debian 10/11&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#ocboot_install-3" role="tab" aria-controls="ocboot_install-3">其它操作系统&lt;/a>&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="ocboot_install">&lt;div id="ocboot_install-0" class="tab-pane show active" role="tabpanel" aria-labelledby="ocboot_install-0">
&lt;p>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 本地安装 ansible 和 git&lt;/span>
$ yum install -y epel-release git python3-pip
$ python3 -m pip install --upgrade pip setuptools wheel
$ python3 -m pip install --upgrade ansible
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="ocboot_install-1" class="tab-pane" role="tabpanel" aria-labelledby="ocboot_install-1">
&lt;p>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 本地安装 ansible 和 git&lt;/span>
$ yum install -y git python3-pip
$ python3 -m pip install --upgrade pip setuptools wheel
$ python3 -m pip install --upgrade ansible
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="ocboot_install-2" class="tab-pane" role="tabpanel" aria-labelledby="ocboot_install-2">
&lt;p>&lt;p>如果提示&lt;code>locale&lt;/code>相关的报错，请先执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> ! grep -q &lt;span style="color:#4e9a06">&amp;#39;^en_US.UTF-8&amp;#39;&lt;/span> /etc/locale.gen&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;en_US.UTF-8 UTF-8&amp;#39;&lt;/span> &amp;gt;&amp;gt; /etc/locale.gen
locale-gen
&lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;LANG=&amp;#34;en_US.UTF-8&amp;#34;&amp;#39;&lt;/span> &amp;gt;&amp;gt; /etc/default/locale
&lt;span style="color:#204a87">source&lt;/span> /etc/default/locale
&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 本地安装 ansible 和 git&lt;/span>
$ apt install -y git python3-pip
$ python3 -m pip install --upgrade pip setuptools wheel
$ python3 -m pip install --upgrade ansible
&lt;/code>&lt;/pre>&lt;/div>&lt;p>备注：已知在&lt;code>debian 11&lt;/code>环境，如果&lt;code>/proc/cmdline&lt;/code>里找不到启动选项 &lt;code>systemd.unified_cgroup_hierarchy=0&lt;/code>，ocboot会自动配置相关的&lt;code>GRUB&lt;/code>选项，重建启动参数，并重启操作系统，以便 &lt;code>k8s&lt;/code> 能够正常启动。&lt;/p>
&lt;/div>
&lt;div id="ocboot_install-3" class="tab-pane" role="tabpanel" aria-labelledby="ocboot_install-3">
&lt;p>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 本地安装 ansible&lt;/span>
$ python3 -m pip install --upgrade pip setuptools wheel
$ python3 -m pip install --upgrade ansible
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;/div>
&lt;h2 id="安装cloudpods">安装Cloudpods&lt;/h2>
&lt;p>部署的工具在 &lt;a href="https://github.com/yunionio/ocboot">https://github.com/yunionio/ocboot&lt;/a>，需要把该工具使用 &lt;code>git clone&lt;/code> 下来，然后运行 &lt;code>run.py&lt;/code> 脚本部署服务。操作步骤如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 下载 ocboot 工具到本地&lt;/span>
$ git clone -b release/3.10 https://github.com/yunionio/ocboot &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> ./ocboot
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行 run.py 部署服务。其中 &lt;strong>&amp;lt;host_ip&amp;gt;&lt;/strong> 为部署节点的 IP 地址，该参数为可选项。如果不指定则选择默认路由出去的那张网卡部署服务。如果你的节点有多张网卡，可以通过指定 &lt;strong>&amp;lt;host_ip&amp;gt;&lt;/strong> 选择对应网卡监听服务。&lt;/p>
&lt;ul class="nav nav-tabs" id="ocboot_install_region" role="tablist">&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link active" href="#ocboot_install_region-0" role="tab" aria-controls="ocboot_install_region-0" aria-selected="true">中国大陆&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#ocboot_install_region-1" role="tab" aria-controls="ocboot_install_region-1">其他地区&lt;/a>&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="ocboot_install_region">&lt;div id="ocboot_install_region-0" class="tab-pane show active" role="tabpanel" aria-labelledby="ocboot_install_region-0">
&lt;p>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 直接部署，会从 registry.cn-beijing.aliyuncs.com 拉取容器镜像&lt;/span>
$ ./run.py cmp &amp;lt;host_ip&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 如果遇到 pip 安装包下载过慢的问题，可以用 -m 参数指定 pip 源&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 比如下面使用: https://mirrors.aliyun.com/pypi/simple/ 源&lt;/span>
$ ./run.py -m https://mirrors.aliyun.com/pypi/simple/ cmp &amp;lt;host_ip&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="ocboot_install_region-1" class="tab-pane" role="tabpanel" aria-labelledby="ocboot_install_region-1">
&lt;p>&lt;p>对于某些网络环境，registry.cn-beijing.aliyuncs.com 访问缓慢或不可达，在版本 &lt;code>v3.9.5&lt;/code>之后（含），可指定镜像源：&lt;a href="http://docker.io">docker.io&lt;/a> 来安装。命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#000">IMAGE_REPOSITORY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>docker.io/yunion ./run.py cmp &amp;lt;host_ip&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种方式其实是自动在当前目录生成一个名为config-allinone-current.yaml的配置文件，基于该配置文件的参数来执行部署。&lt;/p>
&lt;/div>&lt;/div>
&lt;h2 id="部署完成">部署完成&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">....
&lt;span style="color:#8f5902;font-style:italic"># 部署完成后会有如下输出，表示运行成功&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 浏览器打开 https://10.168.26.216 ，该 ip 为之前设置 &amp;lt;host_ip&amp;gt;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 使用 admin/admin@123 用户密码登录就能访问前端界面&lt;/span>
Initialized successfully!
Web page: https://10.168.26.216
User: admin
Password: admin@123
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后用浏览器访问 https://10.168.26.216 ，用户名输入 &lt;code>admin&lt;/code>，密码输入 &lt;code>admin@123&lt;/code> 就会进入 Cloudpods 的界面。&lt;/p>
&lt;p>&lt;img src="../../images/index.png" alt="登录页">&lt;/p>
&lt;h2 id="开始使用cloudpods">开始使用Cloudpods&lt;/h2>
&lt;h3 id="导入公有云或者其它私有云平台资源">导入公有云或者其它私有云平台资源&lt;/h3>
&lt;p>Cloudpods 多云管理平台可以统一纳管其他云平台的资源。&lt;/p>
&lt;p>在 &lt;code>多云管理&lt;/code> 菜单，选择 &lt;code>云账号&lt;/code> 并新建，根据自己的需求填写对应云平台的认证信息，配置完云账号后 Cloudpods 服务就会同步相应云平台的资源，同步完成后即可在前端查看。&lt;/p>
&lt;p>&lt;img src="../../images/cloudaccount.png" alt="多云管理">&lt;/p>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;h3 id="1-如何重装">1. 如何重装&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>执行 &lt;code>kubeadm reset -f&lt;/code> 删除 kubernetes 集群&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重新运行 ocboot 的脚本&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="2-其它问题">2. 其它问题？&lt;/h3>
&lt;p>其它问题欢迎在 Cloudpods github issues 界面提交: &lt;a href="https://github.com/yunionio/cloudpods/issues">https://github.com/yunionio/cloudpods/issues&lt;/a> , 我们会尽快回复。&lt;/p></description></item><item><title>Docs: Docker Compose 安装</title><link>https://www.cloudpods.org/zh/docs/quickstart/cmp/docker-compose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/quickstart/cmp/docker-compose/</guid><description>
&lt;h2 id="前提">前提&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;p>该方案通过 Docker Compose 部署 Cloudpods 多云管理版本，该方式部署的是 All in One 环境，即所有的多云管理服务都使用容器运行在一个节点。&lt;/p>
&lt;p>该部署方法仅适用于多云管理功能的使用，比如管理公有云(aws, 阿里云, 腾讯云等)或者其它私有云(zstack, openstack 等)，无法使用内置私有云相关功能(因为内置私有云需要节点上面安装配置 qemu, openvswitch 等各种虚拟化软件)。&lt;/p>
&lt;p>另外 VMWare 目前也无法使用 Docker Compose 的方式管理，因为目前对 VMWare 的磁盘管理依赖依赖内核 nbd 模块，该模块无法在 docker compose 里面加载。如果是需要对 VMWare 管理，请使用 &lt;a href="../../cmp/allinone-multicloud">Ocboot 安装&lt;/a> 的方式部署。&lt;/p>
&lt;p>如果需要使用内置私有云，请使用 &lt;a href="../../../quickstart/allinone-virt">私有云安装&lt;/a> 的方式部署。&lt;/p>
&lt;/div>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;h3 id="机器配置要求">机器配置要求&lt;/h3>
&lt;ul>
&lt;li>最低配置要求: CPU 4核, 内存 8GiB, 存储 100GiB&lt;/li>
&lt;li>docker 版本: ce-23.0.2
&lt;ul>
&lt;li>docker 建议安装最新的 ce 版本，新版本已经包含 docker-compose 插件&lt;/li>
&lt;li>docker 需要开启容器网络以及 iptables&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="安装配置-docker">安装配置 docker&lt;/h3>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
如果您的环境已经安装了新版本的 docker ，可以跳过改步骤。
&lt;/div>
&lt;p>下面以 CentOS 7 安装 docker 举例，如果是其他发行版请自行参考官方文档安装：&lt;a href="https://docs.docker.com/engine/install/">Install Docker Engine&lt;/a> 。&lt;/p>
&lt;p>国内用户安装 docker-ce 可以使用 aliyun 的仓库，步骤如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 安装必要的一些系统工具&lt;/span>
$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2
&lt;span style="color:#8f5902;font-style:italic"># 添加软件源信息&lt;/span>
$ sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;span style="color:#8f5902;font-style:italic"># 更新并安装 docker-ce 以及 compose 插件&lt;/span>
$ sudo yum makecache fast
$ sudo yum -y install docker-ce docker-ce-cli docker-compose-plugin
&lt;span style="color:#8f5902;font-style:italic"># 开启 docker 服务&lt;/span>
$ sudo systemctl &lt;span style="color:#204a87">enable&lt;/span> --now docker
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行-cloudpods-cmp">运行 Cloudpods CMP&lt;/h2>
&lt;p>Docker Compose 环境准备好后，就可以使用 &lt;a href="https://github.com/yunionio/ocboot">https://github.com/yunionio/ocboot&lt;/a> 里面的 docker-compose.yml 配置文件启动服务了，步骤如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 下载 ocboot 工具到本地&lt;/span>
$ git clone -b release/3.10 https://github.com/yunionio/ocboot &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> ./ocboot
&lt;span style="color:#8f5902;font-style:italic"># 进入 compose 目录&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> compose
$ ls -alh docker-compose.yml
&lt;span style="color:#8f5902;font-style:italic"># 运行服务&lt;/span>
$ docker compose up
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等服务启动完成后，就可以登陆 &lt;em>https://&amp;lt;本机ip&amp;gt;&lt;/em> 访问前端服务，默认登陆用户密码为：admin 和 admin@123 。&lt;/p>
&lt;h2 id="操作说明">操作说明&lt;/h2>
&lt;h3 id="1-服务放到后台运行">1. 服务放到后台运行&lt;/h3>
&lt;p>可以使用 &amp;lsquo;-d/&amp;ndash;detach&amp;rsquo; 参数把所有服务放到后台运行，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 所有服务放到后台运行&lt;/span>
$ docker compose up -d
&lt;span style="color:#8f5902;font-style:italic"># 服务放到后台后，可以通过 logs 自命令查看输出日志&lt;/span>
$ docker compose logs -f
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-登陆-climc-命令行容器">2. 登陆 climc 命令行容器&lt;/h3>
&lt;p>如果要使用命令行工具对平台做操作，可以使用下面的方法进入容器：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker &lt;span style="color:#204a87">exec&lt;/span> -ti compose-climc-1 bash
Welcome to Cloud Shell :-&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> You may execute climc and other &lt;span style="color:#204a87">command&lt;/span> tools in this shell.
Please &lt;span style="color:#204a87">exec&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;climc&amp;#39;&lt;/span> to get started
&lt;span style="color:#8f5902;font-style:italic"># source 认证信息&lt;/span>
bash-5.1# &lt;span style="color:#204a87">source&lt;/span> /etc/yunion/rcadmin
bash-5.1# climc user-list
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-查看服务配置和持久化数据">3. 查看服务配置和持久化数据&lt;/h3>
&lt;p>所有服务的持久化数据都是存储在 &lt;em>ocboot/compose/data&lt;/em> 目录下面的，所有配置都是自动生成的，一般不需要手动修改，下面对各个目录做说明：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ tree data
data
├── etc
│   ├── nginx
│   │   └── conf.d
│   │   └── default.conf &lt;span style="color:#8f5902;font-style:italic"># 前端 nginx 配置&lt;/span>
│   └── yunion
│   ├── *.conf &lt;span style="color:#8f5902;font-style:italic"># cloudpods 各个服务配置&lt;/span>
│   ├── pki &lt;span style="color:#8f5902;font-style:italic"># 证书目录&lt;/span>
│   ├── rcadmin &lt;span style="color:#8f5902;font-style:italic"># 命令行认证信息&lt;/span>
├── opt
│   └── cloud
│   └── workspace
│   └── data
│   └── glance &lt;span style="color:#8f5902;font-style:italic"># 镜像服务存储的镜像目录&lt;/span>
└── var
└── lib
├── influxdb &lt;span style="color:#8f5902;font-style:italic"># influxdb 持久化数据目录&lt;/span>
└── mysql &lt;span style="color:#8f5902;font-style:italic"># mysql 数据库持久化数据目录&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-删除所有容器">4. 删除所有容器&lt;/h3>
&lt;p>所有服务的持久化数据都是存储在 &lt;em>ocboot/compose/data&lt;/em> 目录下面的，删除容器不会丢失数据，下次直接用 &lt;em>docker compose up&lt;/em> 重启即可，操作如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 删除服务&lt;/span>
$ docker compose down
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="常见问题">常见问题&lt;/h2>
&lt;h3 id="1-docker-服务没有打开-iptables-和-bridge-导致容器网路无法创建">1. docker 服务没有打开 iptables 和 bridge 导致容器网路无法创建&lt;/h3>
&lt;p>默认情况下，启动 docker 服务是默认打开 iptables 的，如果在 &lt;em>/etc/docker/daemon.json&lt;/em> 里面设置了 &amp;ldquo;bridge: none&amp;rdquo; 和 &amp;ldquo;iptables: false&amp;rdquo; 则无法使用 docker compose 功能。&lt;/p>
&lt;p>在运行 docker compose 之前请确保打开了 bridge 和 iptables 功能。&lt;/p>
&lt;h3 id="2-docker-composeyml-包含了很多服务是怎么生成的">2. docker-compose.yml 包含了很多服务，是怎么生成的？&lt;/h3>
&lt;p>Cloudpods CMP 多云管理版本包含了很多服务，如果一个一个手写 compose 的配置会非常复杂，所以在 ocboot 里面有个 &lt;em>generate-compose.py&lt;/em> 的脚本，负责生成 docker-compose.yml 文件，可以使用下面命令生成 compose 配置文件：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ python3 generate-compose.py &amp;gt; compose/docker-compose.yml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-如何升级服务">3. 如何升级服务?&lt;/h3>
&lt;p>通过 docker compose 升级很方便，只用更新 docker-compose.yml 配置文件。&lt;/p>
&lt;p>比如 &lt;em>ocboot/compose/docker-compose.yml&lt;/em> 更新了，就可以通过 git pull 最新的代码，然后重新启动就可以了，步骤如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 使用 git pull 更新&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> ocboot
$ git pull
&lt;span style="color:#8f5902;font-style:italic"># 重启 compose 服务&lt;/span>
$ &lt;span style="color:#204a87">cd&lt;/span> compose
$ docker compose down
$ docker compose up -d
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Kubernetes Helm 安装</title><link>https://www.cloudpods.org/zh/docs/quickstart/cmp/k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/quickstart/cmp/k8s/</guid><description>
&lt;h2 id="前提">前提&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;p>该方案通过 Helm 在已有的 Kubernetes 集群上自动部署 Cloudpods 多云管理版本。&lt;/p>
&lt;p>该部署方法可能会因为不同 Kubernetes 发行版的 CSI，CNI 和 Ingress controller 配置不同出现兼容性错误，如果部署失败，又想快速体验产品功能，建议还是使用 &lt;a href="../../cmp/allinone-multicloud">Ocboot 安装&lt;/a> 的方式部署。&lt;/p>
&lt;p>另外 VMWare 目前也无法使用 Docker Compose 的方式管理，因为目前对 VMWare 的磁盘管理依赖依赖内核 nbd 模块，该模块无法在 docker compose 里面加载。如果是需要对 VMWare 管理，请使用 &lt;a href="../../cmp/allinone-multicloud">Ocboot 安装&lt;/a> 的方式部署。&lt;/p>
&lt;p>已经验证过的Kubernetes发行版本包括：&lt;/p>
&lt;ul>
&lt;li>阿里云 ACK&lt;/li>
&lt;li>腾讯云 TKE&lt;/li>
&lt;li>Azure AKS&lt;/li>
&lt;li>AWS ECS&lt;/li>
&lt;/ul>
&lt;p>该部署方法仅适用于多云管理功能的使用，比如管理公有云(aws, 阿里云, 腾讯云等)或者其它私有云(zstack, openstack 等)，无法使用内置私有云相关功能(因为内置私有云需要节点上面安装配置 qemu, openvswitch 等各种虚拟化软件) 。&lt;/p>
&lt;/div>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;p>Cloudpods 相关的组件运行在 Kubernetes 之上，环境以及相关的软件依赖如下:&lt;/p>
&lt;ul>
&lt;li>Kubernetes 集群配置要求:
&lt;ul>
&lt;li>Kubernetes 版本: 1.15 ~ 1.24&lt;/li>
&lt;li>系统配置：至少 CPU 4核, 内存 8G, 节点存储 100G&lt;/li>
&lt;li>节点需要能够访问公网&lt;/li>
&lt;li>提供 ingress controller&lt;/li>
&lt;li>内部 coredns 解析&lt;/li>
&lt;li>支持 Helm，安装 helm 工具请参考 &lt;a href="https://helm.sh/docs/intro/install/">https://helm.sh/docs/intro/install/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>提供 Mysql 数据库(可选): 可以选择使用连接的数据库是在部署在 Kubernetes 集群内还是使用外部的，生产环境建议使用外部单独管理的 Mysql (如果公有云RDS服务)&lt;/li>
&lt;/ul>
&lt;h2 id="部署">部署&lt;/h2>
&lt;h3 id="clone-chart">clone chart&lt;/h3>
&lt;p>Cloudpods Helm Chart 位于 &lt;a href="https://github.com/yunionio/ocboot">https://github.com/yunionio/ocboot&lt;/a> 仓库，使用以下命令下载到本地：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/yunionio/ocboot
$ &lt;span style="color:#204a87">cd&lt;/span> charts/cloudpods
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;p>接下来会使用 helm 安装 cloudpods chart，在使用 &lt;code>helm install&lt;/code> 的时候必须指定 &lt;code>--namespace onecloud&lt;/code>，不能使用其他的 namespace。&lt;/p>
&lt;p>原因是 operator 服务还不支持把平台的服务部署到其他 namespace ，这个后续会改进。&lt;/p>
&lt;/div>
&lt;h3 id="测试环境安装">测试环境安装&lt;/h3>
&lt;p>测试环境安装方法如下，该方法会在 Kubernetes 集群里部署 mysql ，local-path-provisioner CSI 依赖插件，不需要连接集群之外的 mysql 。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 注意这里的 `--namespace onecloud` 不能改成其他的，必须是 onecloud&lt;/span>
$ helm install --name-template default --namespace onecloud --debug . -f values-dev.yaml --create-namespace
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生产环境安装">生产环境安装&lt;/h3>
&lt;p>之前部署的方法仅限测试使用，因为依赖少，安装快，但如果用于生产环境，请根据需求修改 ./values-prod.yaml 里面的参数，然后使用该文件创建 Helm Release 。&lt;/p>
&lt;p>建议需要修改的地方如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">&lt;span style="color:#a40000">--- a/charts/cloudpods/values-prod.yaml
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#00a000">+++ b/charts/cloudpods/values-prod.yaml
&lt;/span>&lt;span style="color:#00a000">&lt;/span> localPathCSI:
&lt;span style="color:#00a000">+ # 根据 k8s 集群的 CSI 部署情况，选择是否要部署默认的 local-path CSI
&lt;/span>&lt;span style="color:#00a000">+ # 如果 k8s 集群已经有稳定的 CSI ，就可以设置这个值为 false ，不部署该组件
&lt;/span>&lt;span style="color:#00a000">&lt;/span> enabled: true
helperPod:
image: registry.cn-beijing.aliyuncs.com/yunionio/busybox:1.35.0
&lt;span style="color:#800080;font-weight:bold">@@ -60,11 +62,16 @@ localPathCSI:
&lt;/span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>
cluster:
mysql:
&lt;span style="color:#00a000">+ # 外部 mysql 地址
&lt;/span>&lt;span style="color:#00a000">&lt;/span> host: 1.2.3.4
&lt;span style="color:#00a000">+ # 外部 mysql 端口
&lt;/span>&lt;span style="color:#00a000">&lt;/span> port: 3306
&lt;span style="color:#00a000">+ # 外部 mysql 用户，需要用具备 root 权限的用户，因为 cloudpods operator 会为其他服务创建数据库用户
&lt;/span>&lt;span style="color:#00a000">&lt;/span> user: root
&lt;span style="color:#00a000">+ # 外部 mysql 密码
&lt;/span>&lt;span style="color:#00a000">&lt;/span> password: your-db-password
statefulset:
&lt;span style="color:#00a000">+ # 生产环境部署这里需要设置成 false ，不然会在 k8s 集群里面部署一个 mysql ，然后连接使用这个 statefulset mysql
&lt;/span>&lt;span style="color:#00a000">&lt;/span> enabled: false
image:
repository: &amp;#34;registry.cn-beijing.aliyuncs.com/yunionio/mysql&amp;#34;
&lt;span style="color:#800080;font-weight:bold">@@ -91,15 +98,20 @@ cluster:
&lt;/span>&lt;span style="color:#800080;font-weight:bold">&lt;/span> # imageRepository defines default image registry
imageRepository: registry.cn-beijing.aliyuncs.com/yunion
# publicEndpoint is upstream ingress virtual ip address or DNS domain
&lt;span style="color:#00a000">+ # 集群外部可访问的域名或者 ip 地址
&lt;/span>&lt;span style="color:#00a000">&lt;/span> publicEndpoint: foo.bar.com
# edition choose from:
# - ce: community edition
# - ee: enterprise edition
&lt;span style="color:#00a000">+ # 选择部署 ce(开源) 版本
&lt;/span>&lt;span style="color:#00a000">&lt;/span> edition: ce
# storageClass for stateful component
&lt;span style="color:#00a000">+ # 有状态服务使用的 storageClass，如果不设置就会使用 local-path CSI
&lt;/span>&lt;span style="color:#00a000">+ # 这个可根据 k8s 集群情况自行调节
&lt;/span>&lt;span style="color:#00a000">&lt;/span> storageClass: &amp;#34;&amp;#34;
ansibleserver:
service:
&lt;span style="color:#00a000">+ # 指定服务暴露的 nodePort，如果和集群已有服务冲突，可以修改
&lt;/span>&lt;span style="color:#00a000">&lt;/span> nodePort: 30890
apiGateway:
apiService:
&lt;span style="color:#800080;font-weight:bold">@@ -193,6 +205,7 @@ cluster:
&lt;/span>&lt;span style="color:#800080;font-weight:bold">&lt;/span> service:
nodePort: 30889
&lt;span style="color:#00a000">+# 设置 ingress
&lt;/span>&lt;span style="color:#00a000">&lt;/span> ingress:
enabled: true
&lt;span style="color:#00a000">+ # 设置 ingress 的 className，比如集群里面使用 nginx-ingress-controller
&lt;/span>&lt;span style="color:#00a000">+ # 这里的 className 就写 nginx
&lt;/span>&lt;span style="color:#00a000">+ # className: nginx
&lt;/span>&lt;span style="color:#00a000">&lt;/span> className: &amp;#34;&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改完 values-prod.yaml 文件后，用以下命令部署：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 注意这里的 `--namespace onecloud` 不能改成其他的，必须是 onecloud&lt;/span>
$ helm install --name-template default --namespace onecloud . -f values-prod.yaml --create-namespace
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="查看部署服务状态">查看部署服务状态&lt;/h2>
&lt;p>使用 helm install 安装完 cloudpods chart 后，使用以下命令查看部署的 pod 状态。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 正常运行情况下，在 onecloud namespace 下会有这些 pod&lt;/span>
$ kubectl get pods -n onecloud
NAME READY STATUS RESTARTS AGE
default-cloudpods-ansibleserver-779bcbc875-nzj6k 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 140m
default-cloudpods-apigateway-7877c64f5c-vljrs 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 140m
default-cloudpods-climc-6f4bf8c474-nj276 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-cloudevent-79c894bbfc-zdqcs 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-cloudid-67c7894db7-86czj 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-cloudmon-5cd9866bdf-c27fc 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 68m
default-cloudpods-cloudproxy-6679d94fc7-gm5tx 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-devtool-6db6f4d454-ldw69 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-esxi-agent-7bcc56987b-lgpnf 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-etcd-q8j5c29tm2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 145m
default-cloudpods-glance-7547c455d5-fnzqq 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 140m
default-cloudpods-influxdb-c9947bdc8-x8xth 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-keystone-6cc64bdcc7-xhh7m 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 145m
default-cloudpods-kubeserver-5544d59c98-l9d74 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 140m
default-cloudpods-logger-8f56cd9b5-f9kbp 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-monitor-746985b5cf-l8sqm 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-notify-dd566cfd6-hxzr4 10/10 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-operator-7478b6c64b-wbg26 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 72m
default-cloudpods-region-7dfd9b888-hsvv8 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 144m
default-cloudpods-scheduledtask-7d69b877f7-4ltm6 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-scheduler-8495f85798-zgvq2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 140m
default-cloudpods-web-5bc6fcf78d-4f7lw 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 140m
default-cloudpods-webconsole-584cfb4796-4mtnj 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
default-cloudpods-yunionconf-677b4448b6-tz62m 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 139m
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建默认管理用户">创建默认管理用户&lt;/h2>
&lt;h3 id="创建账号登录-web-ui">创建账号登录 Web UI&lt;/h3>
&lt;p>如果是企业版，前端会提示注册，获取 license ，下面的操作适用于开源版本：&lt;/p>
&lt;h3 id="进入-climc-命令行-pod">进入 climc 命令行 pod&lt;/h3>
&lt;p>如果是部署的 ce(社区开源版本)，需要使用平台的命令行工具创建默认用户，进行相关操作，对应命令如下，首先是进入 climc pod 容器：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 进入 climc pod&lt;/span>
$ kubectl &lt;span style="color:#204a87">exec&lt;/span> -ti -n onecloud &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get pods -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep climc &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -- bash
Welcome to Cloud Shell :-&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> You may execute climc and other &lt;span style="color:#204a87">command&lt;/span> tools in this shell.
Please &lt;span style="color:#204a87">exec&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;climc&amp;#39;&lt;/span> to get started
bash-5.1#
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建用户">创建用户&lt;/h3>
&lt;p>在 climc pod 里面创建 admin 用户，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 创建 admin 用户，设置密码为 admin@123 ，根据需求自己调整&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>in-climc-pod&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>$ climc user-create --password &lt;span style="color:#4e9a06">&amp;#39;admin@123&amp;#39;&lt;/span> --enabled admin
&lt;span style="color:#8f5902;font-style:italic"># 允许 web 登陆&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>in-climc-pod&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>$ climc user-update --allow-web-console admin
&lt;span style="color:#8f5902;font-style:italic"># 将 admin 用户加入 system project 赋予管理员权限&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>in-climc-pod&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>$ climc project-add-user system admin admin
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="访问前端">访问前端&lt;/h2>
&lt;p>根据创建的 ingress 访问平台暴露出来的前端，通过下面的命令查看 ingress ：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 我测试的集群 ingress 信息如下，不同的 k8s 集群根据 ingress 插件的实现各有不同&lt;/span>
$ kubectl get ingresses -n onecloud
NAME HOSTS ADDRESS PORTS AGE
default-cloudpods-web * 10.127.100.207 80, &lt;span style="color:#0000cf;font-weight:bold">443&lt;/span> 7h52m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用浏览器访问 https://10.127.100.207 即可访问平台前端，然后使用之前创建的 admin 用户登陆。&lt;/p>
&lt;h2 id="升级">升级&lt;/h2>
&lt;p>升级可以通过修改对应的 values yaml 文件，然后进行升级配置，比如发现 cluster.regionServer.service.nodePort 的 30888 端口出现了占用冲突，要修改成其它端口 30001，就修改 values-prod.yaml 里面对应的值：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">&lt;span style="color:#a40000">--- a/charts/cloudpods/values-prod.yaml
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#00a000">+++ b/charts/cloudpods/values-prod.yaml
&lt;/span>&lt;span style="color:#00a000">&lt;/span>&lt;span style="color:#800080;font-weight:bold">@@ -170,7 +170,7 @@ cluster:
&lt;/span>&lt;span style="color:#800080;font-weight:bold">&lt;/span> nodePort: 30885
regionServer:
service:
&lt;span style="color:#a40000">- nodePort: 30888
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#00a000">+ nodePort: 30001
&lt;/span>&lt;span style="color:#00a000">&lt;/span> report:
service:
nodePort: 30967
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用 helm upgrade 命令升级：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm upgrade -n onecloud default . -f values-prod.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再查看 onecloudcluster 资源，会发现对应的 spec.regionServer.service.nodePort 变成了 30001，对应的 service nodePort 也会发生变化：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查看 regionServer 在 onecloudcluster 里面的属性&lt;/span>
$ kubectl get oc -n onecloud default-cloudpods -o yaml &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep -A &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span> regionServer
regionServer:
affinity: &lt;span style="color:#ce5c00;font-weight:bold">{}&lt;/span>
disable: &lt;span style="color:#204a87">false&lt;/span>
dnsDomain: cloud.onecloud.io
dnsServer: 10.127.100.207
image: registry.cn-beijing.aliyuncs.com/yunion/region:v3.9.2
imagePullPolicy: IfNotPresent
limits:
cpu: &lt;span style="color:#4e9a06">&amp;#34;1.333333&amp;#34;&lt;/span>
memory: 2045Mi
replicas: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
requests:
cpu: 10m
memory: 10Mi
service:
nodePort: &lt;span style="color:#0000cf;font-weight:bold">30001&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 查看 default-cloudpods-region service 的 nodePort&lt;/span>
$ kubectl get svc -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep region
default-cloudpods-region NodePort 10.110.105.228 &amp;lt;none&amp;gt; 30001:30001/TCP 7h30m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看之前变更的 cluster.regionServer.service.nodePort 是否在平台的 endpoint 里面发生了变化：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 使用 climc pod 指定 endpoint-list 命令查看&lt;/span>
$ kubectl &lt;span style="color:#204a87">exec&lt;/span> -ti -n onecloud &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get pods -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep climc &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -- climc endpoint-list --search compute
+----------------------------------+-----------+----------------------------------+----------------------------------------+-----------+---------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Region_ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Service_ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> URL &lt;span style="color:#000;font-weight:bold">|&lt;/span> Interface &lt;span style="color:#000;font-weight:bold">|&lt;/span> Enabled &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+----------------------------------+-----------+----------------------------------+----------------------------------------+-----------+---------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> c88e03490c2543a987d86d733b918a2d &lt;span style="color:#000;font-weight:bold">|&lt;/span> region0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> a9abfdd204e9487c8c4d6d85defbfaef &lt;span style="color:#000;font-weight:bold">|&lt;/span> https://10.127.100.207:30001 &lt;span style="color:#000;font-weight:bold">|&lt;/span> public &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> a04e161ee71346ac88ddd04fcebfe5ce &lt;span style="color:#000;font-weight:bold">|&lt;/span> region0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> a9abfdd204e9487c8c4d6d85defbfaef &lt;span style="color:#000;font-weight:bold">|&lt;/span> https://default-cloudpods-region:30001 &lt;span style="color:#000;font-weight:bold">|&lt;/span> internal &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+----------------------------------+-----------+----------------------------------+----------------------------------------+-----------+---------+
*** Total: &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> Pages: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Limit: &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> Offset: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Page: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> ***
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除">删除&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm delete -n onecloud default
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其它问题">其它问题&lt;/h2>
&lt;h3 id="1-onecloud-namespace-缺少-keystone-glance-region-等-pod">1. onecloud namespace 缺少 keystone, glance, region 等 pod&lt;/h3>
&lt;p>如果执行 &lt;code>helm install&lt;/code> 后，执行 &lt;code>kubectl get pods -n onecloud&lt;/code> 发现只有 operator 这个 pod，而没有出现 keystone, glance, region 这些平台相关服务的 pod ，可以使用下面的命令查看 operator pod 的日志排查问题。&lt;/p>
&lt;p>出现这种情况的原因一般都是 operator 在创建 keystone, region 这些平台相关服务出现了错误。常见的问题有 operator 无法使用相关的 mysql 用户创建用户和数据库；或者创建了 keystone 服务后，又无法通过 K8s 内部 service 域名访问 keystone pod 等。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 将 operator 的所有日志重定向到文件&lt;/span>
$ kubectl logs -n onecloud &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get pods -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep operator &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &amp;gt; /tmp/operator.log
&lt;span style="color:#8f5902;font-style:italic"># 然后查看 /tmp/operator.log 里面有没有相关错误&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 查看 operator 日志当中有没有 requeuing 关键字，一般错误会反馈到这里&lt;/span>
$ kubectl logs -n onecloud &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get pods -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep operator &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep requeuing
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>