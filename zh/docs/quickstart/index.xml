<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloudpods –
快速开始</title><link>https://www.cloudpods.org/zh/docs/quickstart/</link><description>Recent content in 快速开始 on Cloudpods</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://www.cloudpods.org/zh/docs/quickstart/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: All in One 安装</title><link>https://www.cloudpods.org/zh/docs/quickstart/allinone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/quickstart/allinone/</guid><description>
&lt;h2 id="前提">前提&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
本章内容是通过部署工具快速搭建 Cloudpods 服务，如果想在生产环境部署高可用集群请参考: &lt;a href="../../setup/ha-ce/">高可用安装&lt;/a> 。
&lt;/div>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;h3 id="机器配置要求">机器配置要求&lt;/h3>
&lt;ul>
&lt;li>操作系统: 根据 CPU 架构不同，支持的发行版也不一样
&lt;ul>
&lt;li>X86_64: &lt;a href="http://isoredirect.centos.org/centos/7/isos/x86_64/">CentOS 7&lt;/a>&lt;/li>
&lt;li>ARM64: &lt;a href="https://www.debian.org/releases/stable/arm64/">Debian 10(buster)&lt;/a> 或者 &lt;a href="https://www.chinauos.com/">统信 UOS&lt;/a>&lt;/li>
&lt;li>操作系统需要是干净的版本，因为部署工具会重头搭建指定版本的 kubernetes 集群，所以确保系统没有安装 kubernetes, docker 等容器管理工具，否则会出现冲突导致安装异常&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>最低配置要求: CPU 4核, 内存 8GiB, 存储 100GiB&lt;/li>
&lt;li>虚拟机和服务使用的存储路径都在 &lt;strong>/opt&lt;/strong> 目录下，所以理想环境下建议单独给 &lt;strong>/opt&lt;/strong> 目录设置挂载点
&lt;ul>
&lt;li>比如把 /dev/sdb1 单独分区做 ext4 然后通过 /etc/fstab 挂载到 /opt 目录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>以下为待部署机器的环境:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">IP&lt;/th>
&lt;th style="text-align:center">登录用户&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">10.168.26.216&lt;/td>
&lt;td style="text-align:center">root&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>10.168.26.216 是本次测试环境的 IP, 请根据自己的环境做相应修改, 若在公有云部署，请使用内网IP地址。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h3 id="本地环境配置要求">本地环境配置要求&lt;/h3>
&lt;p>本地环境即用户进行实际操作部署的环境。本次测试的本地环境为 MAC 操作系统的笔记本，也可在待部署机器上进行操作。&lt;/p>
&lt;ul>
&lt;li>ssh: 开启 ssh 免密登录&lt;/li>
&lt;li>本地环境安装部署 ansbile（Windows操作系统不支持安装 ansible）&lt;/li>
&lt;/ul>
&lt;h4 id="配置-ssh-免密登录">配置 ssh 免密登录&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 生成本机的 ssh 秘钥 (如果本地已有 ~/.ssh/id_rsa.pub 则跳过此步骤)&lt;/span>
$ ssh-keygen
&lt;span style="color:#8f5902;font-style:italic"># 将生成的 ~/.ssh/id_rsa.pub 公钥拷贝到待部署机器&lt;/span>
$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@10.168.26.216
&lt;span style="color:#8f5902;font-style:italic"># 尝试免密登录待部署机器，应该不需要输入登录密码即可拿到部署机器的 hostname&lt;/span>
$ ssh root@10.168.26.216 &lt;span style="color:#4e9a06">&amp;#34;hostname&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="安装ansible和git">安装ansible和git&lt;/h4>
&lt;p>首先需要安装ansible和git&lt;/p>
&lt;ul class="nav nav-tabs" id="ocboot_install" role="tablist">&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link active" href="#ocboot_install-0" role="tab" aria-controls="ocboot_install-0" aria-selected="true">CentOS 7&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#ocboot_install-1" role="tab" aria-controls="ocboot_install-1">Debian 10&lt;/a>&lt;/li>
&lt;li class="nav-item">&lt;a data-toggle="tab" class="nav-link" href="#ocboot_install-2" role="tab" aria-controls="ocboot_install-2">其它操作系统&lt;/a>&lt;/li>&lt;/ul>
&lt;div class="tab-content" id="ocboot_install">&lt;div id="ocboot_install-0" class="tab-pane show active" role="tabpanel" aria-labelledby="ocboot_install-0">
&lt;p>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 本地安装 ansible 和 git&lt;/span>
$ yum install -y epel-release ansible git
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="ocboot_install-1" class="tab-pane" role="tabpanel" aria-labelledby="ocboot_install-1">
&lt;p>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 本地安装 ansible 和 git&lt;/span>
$ apt install -y ansible git
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>
&lt;div id="ocboot_install-2" class="tab-pane" role="tabpanel" aria-labelledby="ocboot_install-2">
&lt;p>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 本地安装 ansible&lt;/span>
$ pip install ansible
&lt;/code>&lt;/pre>&lt;/div>&lt;/div>&lt;/div>
&lt;h2 id="安装cloudpods">安装Cloudpods&lt;/h2>
&lt;p>部署的工具是 &lt;a href="https://github.com/yunionio/ocboot">https://github.com/yunionio/ocboot&lt;/a> , 然后根据需要部署机器的配置， 利用 ansbile 远程登录到待部署的机器安装配置 Cloudpods 服务，以下操作都在本地环境上进行操作。操作步骤如下:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 下载 ocboot 工具到本地&lt;/span>
$ git clone -b release/3.9 https://github.com/yunionio/ocboot &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> ./ocboot
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="快速部署">快速部署&lt;/h3>
&lt;p>可以直接执行run.py来快速部署一个AllInOne的Cloudpods实例，其中&amp;lt;host_ip&amp;gt;为部署所在主机的主IP地址。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ./run.py &amp;lt;host_ip&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这种方式其实是自动在当前目录生成一个名为config-allinone-current.yaml的配置文件，基于该配置文件的参数来执行部署。&lt;/p>
&lt;h3 id="自定义配置部署">自定义配置部署&lt;/h3>
&lt;p>也可以我们手工编辑一个配置文件，基于该配置文件，采用run.py来实现部署。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 编写 config-allinone.yml 文件&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;./config-allinone.yml
&lt;/span>&lt;span style="color:#4e9a06"># mariadb_node 表示需要部署 mariadb 服务的节点
&lt;/span>&lt;span style="color:#4e9a06">mariadb_node:
&lt;/span>&lt;span style="color:#4e9a06"> # 待部署节点 ip
&lt;/span>&lt;span style="color:#4e9a06"> hostname: 10.168.26.216
&lt;/span>&lt;span style="color:#4e9a06"> # 待部署节点登录用户
&lt;/span>&lt;span style="color:#4e9a06"> user: root
&lt;/span>&lt;span style="color:#4e9a06"> # mariadb 的用户
&lt;/span>&lt;span style="color:#4e9a06"> db_user: root
&lt;/span>&lt;span style="color:#4e9a06"> # mariadb 用户密码
&lt;/span>&lt;span style="color:#4e9a06"> db_password: your-sql-password
&lt;/span>&lt;span style="color:#4e9a06"># primary_master_node 表示运行 k8s 和 Cloudpods 服务的节点
&lt;/span>&lt;span style="color:#4e9a06">primary_master_node:
&lt;/span>&lt;span style="color:#4e9a06"> hostname: 10.168.26.216
&lt;/span>&lt;span style="color:#4e9a06"> user: root
&lt;/span>&lt;span style="color:#4e9a06"> # 数据库连接地址
&lt;/span>&lt;span style="color:#4e9a06"> db_host: 10.168.26.216
&lt;/span>&lt;span style="color:#4e9a06"> # 数据库用户
&lt;/span>&lt;span style="color:#4e9a06"> db_user: root
&lt;/span>&lt;span style="color:#4e9a06"> # 数据库密码
&lt;/span>&lt;span style="color:#4e9a06"> db_password: your-sql-password
&lt;/span>&lt;span style="color:#4e9a06"> # k8s 控制节点的 ip
&lt;/span>&lt;span style="color:#4e9a06"> controlplane_host: 10.168.26.216
&lt;/span>&lt;span style="color:#4e9a06"> # k8s 控制节点的端口
&lt;/span>&lt;span style="color:#4e9a06"> controlplane_port: &amp;#34;6443&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> # Cloudpods 版本
&lt;/span>&lt;span style="color:#4e9a06"> onecloud_version: v3.9.2
&lt;/span>&lt;span style="color:#4e9a06"> # Cloudpods 登录用户
&lt;/span>&lt;span style="color:#4e9a06"> onecloud_user: admin
&lt;/span>&lt;span style="color:#4e9a06"> # Cloudpods 登录用户密码
&lt;/span>&lt;span style="color:#4e9a06"> onecloud_user_password: admin@123
&lt;/span>&lt;span style="color:#4e9a06"> # 该节点作为 Cloudpods 私有云计算节点
&lt;/span>&lt;span style="color:#4e9a06"> as_host: true
&lt;/span>&lt;span style="color:#4e9a06"> # 启用 minio 作为后端对象存储
&lt;/span>&lt;span style="color:#4e9a06"> enable_minio: true
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当填写完 config-allinone.yml 部署配置文件后，便可以执行 ocboot 里面的 &lt;code>./run.py ./config-allinone.yml&lt;/code> 部署集群了。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 开始部署&lt;/span>
$ ./run.py ./config-allinone.yml
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="部署完成">部署完成&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">....
&lt;span style="color:#8f5902;font-style:italic"># 部署完成后会有如下输出，表示运行成功&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 浏览器打开 https://10.168.26.216&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 使用 admin/admin@123 用户密码登录就能访问前端界面&lt;/span>
Initialized successfully!
Web page: https://10.168.26.216
User: admin
Password: admin@123
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后用浏览器访问 https://10.168.26.216 ，用户名输入 &lt;code>admin&lt;/code>，密码输入 &lt;code>admin@123&lt;/code> 就会进入 Cloudpods 的界面。&lt;/p>
&lt;p>&lt;img src="../images/index.png" alt="登录页">&lt;/p>
&lt;h2 id="开始使用cloudpods">开始使用Cloudpods&lt;/h2>
&lt;h3 id="创建第一台虚拟机">创建第一台虚拟机&lt;/h3>
&lt;p>通过如下三步创建出第一台虚拟机：&lt;/p>
&lt;h4 id="1-导入镜像">1. 导入镜像&lt;/h4>
&lt;p>浏览位于 &lt;a href="https://cloud.centos.org/centos/7/images/">CentOS 7云主机镜像&lt;/a> ，选择一个GenericCloud 镜像，拷贝镜像URL。&lt;/p>
&lt;p>在 &lt;code>主机&lt;/code> 菜单，选择 &lt;code>系统镜像&lt;/code>，选择 &lt;code>上传&lt;/code>。输入镜像名称，选择 &lt;code>输入镜像URL&lt;/code>，粘贴上述CentOS 7镜像URL，选择 &lt;code>确定&lt;/code>。&lt;/p>
&lt;p>可以访问 &lt;a href="https://docs.openstack.org/image-guide/obtain-images.html">https://docs.openstack.org/image-guide/obtain-images.html&lt;/a> 获得更多的虚拟机镜像。&lt;/p>
&lt;h4 id="2-创建网络vpc和ip子网">2. 创建网络（VPC和IP子网）&lt;/h4>
&lt;p>[新建VPC] 在 &lt;code>网络&lt;/code> 菜单，选择 &lt;code>VPC&lt;/code> 子菜单，选择 &lt;code>新建&lt;/code>。输入名称，例如 &lt;code>vpc0&lt;/code>，选择目标网段，例如 &lt;code>192.168.0.0/16&lt;/code>。点击 &lt;code>新建&lt;/code>。&lt;/p>
&lt;p>[新建IP子网] VPC创建完成后，选择 &lt;code>IP子网&lt;/code> 子菜单，选择 &lt;code>新建&lt;/code>。输入名称，例如 &lt;code>vnet0&lt;/code>，选择VPC为刚才创建的VPC &lt;code>vpc0&lt;/code>，选择可用区，输入 &lt;code>子网网段&lt;/code>，例如 &lt;code>192.168.100.0/24&lt;/code>。点击 &lt;code>新建&lt;/code>。&lt;/p>
&lt;h4 id="3-创建虚拟机">3. 创建虚拟机&lt;/h4>
&lt;p>在 &lt;code>主机&lt;/code> 菜单，选择 &lt;code>虚拟机&lt;/code>，选择 &lt;code>新建&lt;/code>。在此界面输入主机名，选择镜像和IP子网，创建虚拟机。&lt;/p>
&lt;h3 id="导入公有云或者其它私有云平台资源">导入公有云或者其它私有云平台资源&lt;/h3>
&lt;p>Cloudpods自身是一个完整的私有云，同时也可以统一纳管其他云平台的资源。&lt;/p>
&lt;p>在 &lt;code>多云管理&lt;/code> 菜单，选择 &lt;code>云账号&lt;/code> 并新建，根据自己的需求填写对应云平台的认证信息，配置完云账号后 Cloudpods 服务就会同步相应云平台的资源，同步完成后即可在前端查看。&lt;/p>
&lt;p>&lt;img src="../images/cloudaccount.png" alt="多云管理">&lt;/p>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;h3 id="1-在-all-in-one-部署完成后宿主机列表没有宿主机">1. 在 All in One 部署完成后宿主机列表没有宿主机？&lt;/h3>
&lt;p>如下图所示，若发现环境部署完成后宿主机列表中没有宿主机，可按照以下方式进行排查&lt;/p>
&lt;p>&lt;img src="../images/nohost.png" alt="">&lt;/p>
&lt;ol>
&lt;li>
&lt;p>请确认部署用的yaml文件中是否有&lt;code>as_host: true&lt;/code>配置项，若没有，则表示该节点只作为控制节点使用，不作为计算节点使用，因此宿主机列表中没有宿主机是正常的；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在控制节点查看host pod日志信息。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查看host pod状态&lt;/span>
$ kubectl get pods -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span>grep host
&lt;span style="color:#8f5902;font-style:italic"># 查看host的日志&lt;/span>
$ kubectl logs -n onecloud default-host-xxxxxx -c host -f
&lt;/code>&lt;/pre>&lt;/div>&lt;p>(1). 若日志报错信息中包含“register failed: try create network: find_matched == false”，则表示未成功创建包含宿主机的IP子网，导致宿主机注册失败，请创建包含宿主机网段的IP子网。&lt;/p>
&lt;pre>&lt;code># 创建包含宿主机网段的IP子网
$ climc network-create bcast0 adm0 &amp;lt;start_ip&amp;gt; &amp;lt;end_ip&amp;gt; mask
&lt;/code>&lt;/pre>&lt;p>&lt;img src="../images/iperror.png" alt="">&lt;/p>
&lt;p>(2). 若日志报错信息中包含“name starts with letter, and contains letter, number and - only”，则表示宿主机的主机名不合规，应改成以字母开头的hostname&lt;/p>
&lt;p>&lt;img src="../images/hostnameerror.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="2-在-all-in-one-中找不到虚拟机界面">2. 在 All in One 中找不到虚拟机界面？&lt;/h3>
&lt;p>All in One 部署的节点会部署 Cloudpods host 计算服务，作为宿主机，具有创建和管理私有云虚拟机的能力。没有虚拟机界面应该是 Cloudpods 环境中没有启用宿主机。&lt;/p>
&lt;p>请到 &lt;code>管理后台&lt;/code> 界面，点击 &lt;code>主机/基础资源/宿主机&lt;/code> 查看宿主机列表，启用相应的宿主机，刷新界面就会出现虚拟机界面。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;p>如果要使用 Cloudpods 私有云虚拟机，需要宿主机使用 Cloudpods 编译的内核，可使用以下命令查看宿主机是否使用 Cloudpods 内核(包含 yn 关键字)。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查看是否使用 yn 内核&lt;/span>
$ uname -a &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep yn
Linux office-controller 3.10.0-1160.6.1.el7.yn20201125.x86_64
&lt;span style="color:#8f5902;font-style:italic"># 如果内核不是带有 yn 关键字的版本，可能是第一次使用 ocboot 安装，重启即可进入 yn 内核&lt;/span>
$ reboot
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>&lt;img src="../images/host.png" alt="宿主机">&lt;/p>
&lt;h3 id="3-修改节点的-hostname-有些服务启动失败">3. 修改节点的 hostname ，有些服务启动失败&lt;/h3>
&lt;p>k8s 管理节点，依赖于 hostname，请改回去。&lt;/p>
&lt;h3 id="4-如何重装">4. 如何重装&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>执行 &lt;code>kubeadm reset -f&lt;/code> 删除 kubernetes 集群&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重新运行 ocboot 的脚本&lt;/p>
&lt;/li>
&lt;li>
&lt;p>等待运行完毕，使用&lt;code>kubectl edit deployment onecloud-operator -n onecloud&lt;/code>加入下列参数，然后保存关闭。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="../images/oo_syncuser.png" alt="">&lt;/p>
&lt;ol start="4">
&lt;li>第2步的修改，会影响 onecloud-operator 的性能，所以等所有服务启动，可以将第2步的参数恢复。&lt;/li>
&lt;/ol>
&lt;h3 id="5-其它问题">5. 其它问题？&lt;/h3>
&lt;p>其它问题欢迎在 Cloudpods github issues 界面提交: &lt;a href="https://github.com/yunionio/cloudpods/issues">https://github.com/yunionio/cloudpods/issues&lt;/a> , 我们会尽快回复。&lt;/p></description></item><item><title>Docs: Kubernetes Helm 安装</title><link>https://www.cloudpods.org/zh/docs/quickstart/k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/quickstart/k8s/</guid><description>
&lt;h2 id="前提">前提&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;p>该方案通过 Helm 在已有的 Kubernetes 集群上自动部署 Cloudpods 多云管理版本。&lt;/p>
&lt;p>该部署方法可能会因为不同 Kubernetes 发行版的 CSI，CNI 和 Ingress controller 配置不同出现兼容性错误，如果部署失败，又想快速体验产品功能，建议还是使用 &lt;a href="../allinone">All in One 安装&lt;/a> 的方式部署。&lt;/p>
&lt;p>已经验证过的Kubernetes发行版本包括：&lt;/p>
&lt;ul>
&lt;li>阿里云 ACK&lt;/li>
&lt;/ul>
&lt;p>该部署方法仅适用于多云管理功能的使用，比如管理公有云(aws, 阿里云, 腾讯云等)或者其它私有云(zstack, openstack 等)，无法使用内置私有云相关功能(因为内置私有云需要节点上面安装配置 qemu, openvswitch 等各种虚拟化软件)&lt;/p>
&lt;/div>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;p>Cloudpods 相关的组件运行在 Kubernetes 之上，环境以及相关的软件依赖如下:&lt;/p>
&lt;ul>
&lt;li>Kubernetes 集群配置要求:
&lt;ul>
&lt;li>Kubernetes 版本: 1.15 ~ 1.24&lt;/li>
&lt;li>系统配置：至少 CPU 4核, 内存 8G, 节点有存储 100G&lt;/li>
&lt;li>节点需要能够访问公网&lt;/li>
&lt;li>提供 ingress controller&lt;/li>
&lt;li>内部 coredns 解析&lt;/li>
&lt;li>支持 Helm，安装 helm 工具请参考 &lt;a href="https://helm.sh/docs/intro/install/">https://helm.sh/docs/intro/install/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>提供 Mysql 数据库(可选): 可以选择使用连接的数据库是在部署在 Kubernetes 集群内还是使用外部的，生产环境建议使用外部单独管理的 Mysql&lt;/li>
&lt;/ul>
&lt;h2 id="部署">部署&lt;/h2>
&lt;h3 id="clone-chart">clone chart&lt;/h3>
&lt;p>Cloudpods Helm Chart 位于 &lt;a href="https://github.com/yunionio/ocboot">https://github.com/yunionio/ocboot&lt;/a> 仓库，使用以下命令下载到本地：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/yunionio/ocboot
$ &lt;span style="color:#204a87">cd&lt;/span> charts/cloudpods
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="测试环境安装">测试环境安装&lt;/h3>
&lt;p>测试环境安装方法如下，改方法会在 Kubernetes 集群里部署 mysql ，local-path-provisioner CSI 依赖插件，不需要连接集群之外的 mysql 。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm install --name-template default --namespace onecloud --debug . -f values-dev.yaml --create-namespace
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生产环境安装">生产环境安装&lt;/h3>
&lt;p>之前部署的方法仅限测试使用，因为依赖少，安装快，但如果用于生产环境，请根据需求修改 ./values-prod.yaml 里面的参数，然后使用该文件创建 Helm Release 。&lt;/p>
&lt;p>建议需要修改的地方如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">&lt;span style="color:#a40000">--- a/charts/cloudpods/values-prod.yaml
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#00a000">+++ b/charts/cloudpods/values-prod.yaml
&lt;/span>&lt;span style="color:#00a000">&lt;/span> localPathCSI:
&lt;span style="color:#00a000">+ # 根据 k8s 集群的 CSI 部署情况，选择是否要部署默认的 local-path CSI
&lt;/span>&lt;span style="color:#00a000">+ # 如果 k8s 集群已经有稳定的 CSI ，就可以设置这个值为 false ，不部署该组件
&lt;/span>&lt;span style="color:#00a000">&lt;/span> enabled: true
helperPod:
image: registry.cn-beijing.aliyuncs.com/yunionio/busybox:1.35.0
&lt;span style="color:#800080;font-weight:bold">@@ -60,11 +62,16 @@ localPathCSI:
&lt;/span>&lt;span style="color:#800080;font-weight:bold">&lt;/span>
cluster:
mysql:
&lt;span style="color:#00a000">+ # 外部 mysql 地址
&lt;/span>&lt;span style="color:#00a000">&lt;/span> host: 1.2.3.4
&lt;span style="color:#00a000">+ # 外部 mysql 端口
&lt;/span>&lt;span style="color:#00a000">&lt;/span> port: 3306
&lt;span style="color:#00a000">+ # 外部 mysql 用户，需要用具备 root 权限的用户，因为 cloudpods operator 会为其他服务创建数据库用户
&lt;/span>&lt;span style="color:#00a000">&lt;/span> user: root
&lt;span style="color:#00a000">+ # 外部 mysql 密码
&lt;/span>&lt;span style="color:#00a000">&lt;/span> password: your-db-password
statefulset:
&lt;span style="color:#00a000">+ # 生产环境部署这里需要设置成 false ，不然会在 k8s 集群里面部署一个 mysql ，然后连接使用这个 statefulset mysql
&lt;/span>&lt;span style="color:#00a000">&lt;/span> enabled: false
image:
repository: &amp;#34;registry.cn-beijing.aliyuncs.com/yunionio/mysql&amp;#34;
&lt;span style="color:#800080;font-weight:bold">@@ -91,15 +98,20 @@ cluster:
&lt;/span>&lt;span style="color:#800080;font-weight:bold">&lt;/span> # imageRepository defines default image registry
imageRepository: registry.cn-beijing.aliyuncs.com/yunion
# publicEndpoint is upstream ingress virtual ip address or DNS domain
&lt;span style="color:#00a000">+ # 集群外部可访问的域名或者 ip 地址
&lt;/span>&lt;span style="color:#00a000">&lt;/span> publicEndpoint: foo.bar.com
# edition choose from:
# - ce: community edition
# - ee: enterprise edition
&lt;span style="color:#00a000">+ # 选择部署 ce(开源) 或者 ee(企业) 版本
&lt;/span>&lt;span style="color:#00a000">&lt;/span> edition: ce
# storageClass for stateful component
&lt;span style="color:#00a000">+ # 有状态服务使用的 storageClass，如果不设置就会使用 local-path CSI
&lt;/span>&lt;span style="color:#00a000">+ # 这个可根据 k8s 集群情况自行调节
&lt;/span>&lt;span style="color:#00a000">&lt;/span> storageClass: &amp;#34;&amp;#34;
ansibleserver:
service:
&lt;span style="color:#00a000">+ # 指定服务暴露的 nodePort，如果和集群已有服务冲突，可以修改
&lt;/span>&lt;span style="color:#00a000">&lt;/span> nodePort: 30890
apiGateway:
apiService:
&lt;span style="color:#800080;font-weight:bold">@@ -193,6 +205,7 @@ cluster:
&lt;/span>&lt;span style="color:#800080;font-weight:bold">&lt;/span> service:
nodePort: 30889
&lt;span style="color:#00a000">+# 设置 ingress
&lt;/span>&lt;span style="color:#00a000">&lt;/span> ingress:
enabled: true
className: &amp;#34;&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改完 values-prod.yaml 文件后，用以下命令部署：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm install --name-template default --namespace onecloud . -f values-prod.yaml --create-namespace
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建默认管理用户">创建默认管理用户&lt;/h2>
&lt;h3 id="创建账号登录-web-ui">创建账号登录 Web UI&lt;/h3>
&lt;p>如果是企业版，前端会提示注册，获取 license ，下面的操作适用于开源版本：&lt;/p>
&lt;h3 id="进入-climc-命令行-pod">进入 climc 命令行 pod&lt;/h3>
&lt;p>如果是部署的 ce(社区开源版本)，需要使用平台的命令行工具创建默认用户，进行相关操作，对应命令如下，首先是进入 climc pod 容器：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 进入 climc pod&lt;/span>
$ kubectl &lt;span style="color:#204a87">exec&lt;/span> -ti -n onecloud &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get pods -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep climc &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> sh
/ &lt;span style="color:#8f5902;font-style:italic">#&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建用户">创建用户&lt;/h3>
&lt;p>在 climc pod 里面创建 admin 用户，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 创建 admin 用户，设置密码为 admin@123 ，根据需求自己调整&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>in-climc-pod&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>$ climc user-create --password &lt;span style="color:#4e9a06">&amp;#39;admin@123&amp;#39;&lt;/span> --enabled admin
&lt;span style="color:#8f5902;font-style:italic"># 允许 web 登陆&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>in-climc-pod&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>$ climc user-update --allow-web-console admin
&lt;span style="color:#8f5902;font-style:italic"># 将 admin 用户加入 system project 赋予管理员权限&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>in-climc-pod&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>$ climc project-add-user system admin admin
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="访问前端">访问前端&lt;/h2>
&lt;p>根据创建的 ingress 访问平台暴露出来的前端，通过下面的命令查看 ingress ：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 我测试的集群 ingress 信息如下，不同的 k8s 集群根据 ingress 插件的实现各有不同&lt;/span>
$ kubectl get ingresses -n onecloud
NAME HOSTS ADDRESS PORTS AGE
default-cloudpods-web * 10.127.100.207 80, &lt;span style="color:#0000cf;font-weight:bold">443&lt;/span> 7h52m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用浏览器访问 https://10.127.100.207 即可访问平台前端，然后使用之前创建的 admin 用户登陆。&lt;/p>
&lt;h2 id="升级">升级&lt;/h2>
&lt;p>升级可以通过修改对应的 values yaml 文件，然后进行升级配置，比如发现 cluster.regionServer.service.nodePort 的 30888 端口出现了占用冲突，要修改成其它端口 30001，就修改 values-prod.yaml 里面对应的值：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">&lt;span style="color:#a40000">--- a/charts/cloudpods/values-prod.yaml
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#00a000">+++ b/charts/cloudpods/values-prod.yaml
&lt;/span>&lt;span style="color:#00a000">&lt;/span>&lt;span style="color:#800080;font-weight:bold">@@ -170,7 +170,7 @@ cluster:
&lt;/span>&lt;span style="color:#800080;font-weight:bold">&lt;/span> nodePort: 30885
regionServer:
service:
&lt;span style="color:#a40000">- nodePort: 30888
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#00a000">+ nodePort: 30001
&lt;/span>&lt;span style="color:#00a000">&lt;/span> report:
service:
nodePort: 30967
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后使用 helm upgrade 命令升级：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm upgrade -n onecloud default . -f values-prod.yaml
&lt;/code>&lt;/pre>&lt;/div>&lt;p>再查看 onecloudcluster 资源，会发现对应的 spec.regionServer.service.nodePort 变成了 30001，对应的 service nodePort 也会发生变化：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查看 regionServer 在 onecloudcluster 里面的属性&lt;/span>
$ kubectl get oc -n onecloud default-cloudpods -o yaml &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep -A &lt;span style="color:#0000cf;font-weight:bold">15&lt;/span> regionServer
regionServer:
affinity: &lt;span style="color:#ce5c00;font-weight:bold">{}&lt;/span>
disable: &lt;span style="color:#204a87">false&lt;/span>
dnsDomain: cloud.onecloud.io
dnsServer: 10.127.100.207
image: registry.cn-beijing.aliyuncs.com/yunion/region:v3.9.2
imagePullPolicy: IfNotPresent
limits:
cpu: &lt;span style="color:#4e9a06">&amp;#34;1.333333&amp;#34;&lt;/span>
memory: 2045Mi
replicas: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
requests:
cpu: 10m
memory: 10Mi
service:
nodePort: &lt;span style="color:#0000cf;font-weight:bold">30001&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 查看 default-cloudpods-region service 的 nodePort&lt;/span>
$ kubectl get svc -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep region
default-cloudpods-region NodePort 10.110.105.228 &amp;lt;none&amp;gt; 30001:30001/TCP 7h30m
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看之前变更的 cluster.regionServer.service.nodePort 是否在平台的 endpoint 里面发生了变化：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 使用 climc pod 指定 endpoint-list 命令查看&lt;/span>
$ kubectl &lt;span style="color:#204a87">exec&lt;/span> -ti -n onecloud &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>kubectl get pods -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep climc &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> -- climc endpoint-list --search compute
+----------------------------------+-----------+----------------------------------+----------------------------------------+-----------+---------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Region_ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Service_ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> URL &lt;span style="color:#000;font-weight:bold">|&lt;/span> Interface &lt;span style="color:#000;font-weight:bold">|&lt;/span> Enabled &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+----------------------------------+-----------+----------------------------------+----------------------------------------+-----------+---------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> c88e03490c2543a987d86d733b918a2d &lt;span style="color:#000;font-weight:bold">|&lt;/span> region0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> a9abfdd204e9487c8c4d6d85defbfaef &lt;span style="color:#000;font-weight:bold">|&lt;/span> https://10.127.100.207:30001 &lt;span style="color:#000;font-weight:bold">|&lt;/span> public &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> a04e161ee71346ac88ddd04fcebfe5ce &lt;span style="color:#000;font-weight:bold">|&lt;/span> region0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> a9abfdd204e9487c8c4d6d85defbfaef &lt;span style="color:#000;font-weight:bold">|&lt;/span> https://default-cloudpods-region:30001 &lt;span style="color:#000;font-weight:bold">|&lt;/span> internal &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+----------------------------------+-----------+----------------------------------+----------------------------------------+-----------+---------+
*** Total: &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> Pages: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Limit: &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> Offset: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Page: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> ***
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除">删除&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm delete -n onecloud default
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其它问题">其它问题&lt;/h2>
&lt;h3 id="切换成开源企业版本">切换成开源/企业版本&lt;/h3>
&lt;p>现在默认 k8s 部署的集群是开源版本(ee)，可以通过下面的操作切换成企业版本(ce)：&lt;/p>
&lt;p>通过修改对应的 values yaml 文件，修改里面的 cluster.edition 为 ce(开源) 或者 ee(企业) ，然后使用 helm upgrade 升级：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">&lt;span style="color:#a40000">--- a/charts/cloudpods/values-prod.yaml
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#00a000">+++ b/charts/cloudpods/values-prod.yaml
&lt;/span>&lt;span style="color:#00a000">&lt;/span>&lt;span style="color:#800080;font-weight:bold">@@ -104,7 +104,7 @@ cluster:
&lt;/span>&lt;span style="color:#800080;font-weight:bold">&lt;/span> # - ce: community edition
# - ee: enterprise edition
# 选择部署 ce(开源) 或者 ee(企业) 版本
&lt;span style="color:#a40000">- edition: ce
&lt;/span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#00a000">+ edition: ee
&lt;/span>&lt;span style="color:#00a000">&lt;/span> # storageClass for stateful component
# 有状态服务使用的 storageClass，如果不设置就会使用 local-path CSI
# 这个可根据 k8s 集群情况自行调节
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ helm upgrade -n onecloud default . -f values-prod.yaml
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>