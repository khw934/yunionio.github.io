<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloudpods –
运维手册</title><link>https://www.cloudpods.org/zh/docs/ops/</link><description>Recent content in 运维手册 on Cloudpods</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 10 Nov 2021 14:45:50 +0800</lastBuildDate><atom:link href="https://www.cloudpods.org/zh/docs/ops/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 组件介绍</title><link>https://www.cloudpods.org/zh/docs/ops/component/</link><pubDate>Wed, 10 Nov 2021 19:02:10 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/ops/component/</guid><description>
&lt;p>Cloudpods 平台部署在Kubernetes上，平台服务将支持容器化方式部署运行在Kubernetes集群。下面将介绍下平台的组件服务。&lt;/p>
&lt;h3 id="onecloud-operator">onecloud-operator&lt;/h3>
&lt;p>Onecloud-operator组件为集群控制器，实现集群服务的自动配置，部署和运行监控。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： onecloud-operator&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： onecloud-operator-xxx&lt;/li>
&lt;li>&lt;strong>配置&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code># 配置operator
$ kubectl edit oc -n onecloud
# 查看operator的配置
$ kubectl get oc -n onecloud -o yaml
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>功能&lt;/strong>：
&lt;ul>
&lt;li>自动部署平台服务，包括初始化配置、创建管理对应k8s资源。&lt;/li>
&lt;li>升级回滚：更新/回滚任意服务的版本。&lt;/li>
&lt;li>资源清理：当平台服务集群删除后，释放对应的资源。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="web">web&lt;/h3>
&lt;p>前端服务组件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-web&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-web-xxx&lt;/li>
&lt;li>&lt;strong>configmap&lt;/strong>：default-web&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：
&lt;ul>
&lt;li>放置前端代码&lt;/li>
&lt;li>Nignx相关配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="apigateway">apigateway&lt;/h3>
&lt;p>api网关组件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-apigateway&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-apigateway-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：
&lt;ul>
&lt;li>提供web前端API&lt;/li>
&lt;li>认证和权限的认证入口&lt;/li>
&lt;li>License控制等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="keystone">keystone&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-keystone&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-keystone-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：
&lt;ul>
&lt;li>认证&lt;/li>
&lt;li>资源归属project和domain&lt;/li>
&lt;li>权限：角色（role），权限（policy）&lt;/li>
&lt;li>服务目录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="region">region&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-region&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-region-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：
&lt;ul>
&lt;li>云控制器&lt;/li>
&lt;li>计算、网络、存储、数据库等云资源等管理&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="scheduler">scheduler&lt;/h3>
&lt;p>资源调度组件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-scheduler&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-scheduler-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：资源调度&lt;/li>
&lt;/ul>
&lt;h3 id="glance">glance&lt;/h3>
&lt;p>镜像服务组件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-glance&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-glance-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：镜像管理&lt;/li>
&lt;/ul>
&lt;h3 id="baremetal">baremetal&lt;/h3>
&lt;p>物理机管理服务组件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-baremetal&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-baremetal-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：
&lt;ul>
&lt;li>提裸金属管理Agent&lt;/li>
&lt;li>提供PXEboot&lt;/li>
&lt;li>提供DHCP&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="host">host&lt;/h3>
&lt;p>宿主机服务组件&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Pod&lt;/strong>： default-host-xxx&lt;/li>
&lt;li>&lt;strong>Daemonset&lt;/strong>：default-host&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：私有云宿主机上的Agent&lt;/li>
&lt;li>&lt;strong>容器&lt;/strong>：host服务下有三个容器，host、ovn-controller、sdnagent
&lt;ul>
&lt;li>host：
&lt;ul>
&lt;li>虚拟机生命周期管理
&lt;ul>
&lt;li>通过qemu启用停止虚拟机&lt;/li>
&lt;li>通过qemu monitor对虚拟机进行其他操作&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>存储管理和磁盘生命周期管理
&lt;ul>
&lt;li>本地盘和共享存储（ceph,nfs等）磁盘的CURD操作&lt;/li>
&lt;li>存储信息探测&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DHCP Server
&lt;ul>
&lt;li>作为DHCP Server为虚拟机分配IP&lt;/li>
&lt;li>作为DHCP relay server转发物理机PXE启动时候的DHCP请求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>GPU设备探测与初始化
&lt;ul>
&lt;li>初始化即为GPU设备绑定vfio驱动&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>宿主机初始化与信息探测&lt;/li>
&lt;li>监控数据采集&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ovn-controller：虚拟机vpc网络管理，连接southbound，将southbound中的flows转换成ovs流表规则。&lt;/li>
&lt;li>sdnagent：虚拟机经典网络管理。
&lt;ul>
&lt;li>流表管理&lt;/li>
&lt;li>虚拟机网卡QoS&lt;/li>
&lt;li>防火墙&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="host-image">host-image&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Pod&lt;/strong>： default-host-image-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：提供读取镜像内容api，配合fuse可远程挂载磁盘&lt;/li>
&lt;/ul>
&lt;h3 id="host-deployer">host-deployer&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Pod&lt;/strong>： default-host-deployer-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>： 虚拟机创建时部署相关操作
&lt;ul>
&lt;li>虚拟机镜像操作系统识别、系统初始化。&lt;/li>
&lt;li>分区扩容、格式化文件系统等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="vpcagent">vpcagent&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-vpcagent&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-vpcagent-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：ovn的vpc配置管理&lt;/li>
&lt;/ul>
&lt;h3 id="esxiagent">esxiagent&lt;/h3>
&lt;p>VMware管理Agent&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-esxiagent&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-esxiagent-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：VMware管理Agent代理&lt;/li>
&lt;/ul>
&lt;h3 id="cloudmon">cloudmon&lt;/h3>
&lt;p>监控采集服务&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-cloudmon&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-cloudmon-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：
&lt;ul>
&lt;li>ping检测：5分钟一次探测被占用的IP地址。&lt;/li>
&lt;li>usage数据采集&lt;/li>
&lt;li>VMware、OpenStack、公有云等平台监控数据采集&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="meter">meter&lt;/h3>
&lt;p>计费计量服务&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Deployment&lt;/strong>： default-meter&lt;/li>
&lt;li>&lt;strong>Pod&lt;/strong>： default-meter-xxx&lt;/li>
&lt;li>&lt;strong>功能&lt;/strong>：计费计量功能&lt;/li>
&lt;/ul></description></item><item><title>Docs: 组件pod常用运维命令</title><link>https://www.cloudpods.org/zh/docs/ops/commonops/</link><pubDate>Wed, 10 Nov 2021 18:54:59 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/ops/commonops/</guid><description>
&lt;h3 id="查看组件pod运行情况">查看组件pod运行情况&lt;/h3>
&lt;p>系统组件都以 k8s pod的形式运行，通过以下命令查看平台的系统组件以及运行情况等。&lt;/p>
&lt;pre>&lt;code># -n表示namespace的意思，目前我们的服务都部署在onecloud namespace下，查看所有组件的pod的运行情况
$ kubectl get pods -n onecloud
&lt;/code>&lt;/pre>&lt;pre>&lt;code># -o wide查看pod的更多详细信息，比如运行在哪个节点上
$ kubectl get pods -n onecloud -o wide
&lt;/code>&lt;/pre>&lt;pre>&lt;code># 查看指定pod资源的详细信息，如查看region组件的pod的详细信息
$ kubectl describe pods -n onecloud default-region-759b4bff4c-hpmdd
&lt;/code>&lt;/pre>&lt;pre>&lt;code># 查看指定主机上运行的所有pod信息
$ kubectl get pods -n onecloud -o wide --field-selector=spec.nodeName=&amp;lt;host-name&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="重启组件服务">重启组件服务&lt;/h3>
&lt;pre>&lt;code># 重启web服务
$ kubectl rollout restart deployment -n onecloud default-web
&lt;/code>&lt;/pre>&lt;pre>&lt;code># 重启host服务，如删除所有host pod
$ kubectl rollout restart deployment -n onecloud default-host
# 重启所有服务，平台服务都以default开头
$ kubectl get deployment -n onecloud |grep default | awk '{print $1}' | xargs kubectl rollout restart deployment -n onecloud
# 重启onecloud命名空间下的所有pod
$ kubectl get ds -n onecloud | awk '{print $1}' | xargs kubectl rollout ds -n onecloud
&lt;/code>&lt;/pre>&lt;h3 id="更新服务配置并重启服务">更新服务配置并重启服务&lt;/h3>
&lt;p>平台所有组件服务都有对应的Configmaps文件保存服务配置，当配置信息需要更改时，可通过以下步骤更新服务配置并使其生效。&lt;/p>
&lt;pre>&lt;code># 以region服务为例更新其configmaps配置信息
$ kubectl edit configmaps default-region -n onecloud
&lt;/code>&lt;/pre>&lt;pre>&lt;code># 修改完成后，重启服务
$ kubectl -n onecloud rollout restart deployment default-region
&lt;/code>&lt;/pre>&lt;h3 id="查看服务日志">查看服务日志&lt;/h3>
&lt;p>查看持久化服务日志，请参考&lt;a href="https://www.cloudpods.org/zh/docs/ops/backendlogs/">持久化后端日志&lt;/a>&lt;/p>
&lt;p>以region组件为例介绍如何查看region组件的日志信息。&lt;/p>
&lt;pre>&lt;code># 首先需要找到region服务所在pod
$ kubectl get pods -n onecloud |grep region
&lt;/code>&lt;/pre>&lt;pre>&lt;code># 查看region服务容器的日志，其中-f表示follow，即持续输出日志，类似于journalctl的 -f；--since 5m 表示查看近5分钟的日志信息。按CTRL+C退出日志输出
$ kubectl logs -n onecloud $region_pod_name -f --since 5m
&lt;/code>&lt;/pre>&lt;pre>&lt;code># 查看region容器日志，将最近5分钟的所有日志到region.log
$ kubectl logs -n onecloud $region_pod_name --since 5m &amp;gt; region.log
&lt;/code>&lt;/pre>&lt;pre>&lt;code># 若有些服务有两个容器，如host服务有名称为host和host-image的容器，此时查看容器命令时需要加'-c' 指定查看哪个容器的日志
$ kubectl logs -n onecloud $host_pod_name -c host-image -f
&lt;/code>&lt;/pre>&lt;h3 id="查看平台版本信息">查看平台版本信息&lt;/h3>
&lt;pre>&lt;code># 其中onecloudcluster 可以简写成oc；default为OneCloudCluster的名称；-o yaml即以yaml形式输出onecloudcluster类型资源的API对象。
$ kubectl get onecloudcluster -n onecloud default -o yaml | grep version
&lt;/code>&lt;/pre>&lt;h3 id="查看mysql账户密码信息">查看MySQL账户密码信息&lt;/h3>
&lt;p>采用默认部署数据库的方式，在平台部署完成后需要通过以下命令获取连接MySql的用户名和密码。&lt;/p>
&lt;pre>&lt;code># 查看MySQL的配置连接信息，其中oc为onecloudcluster；default为oc的名称；grep -A 4即属于匹配后4行数据。
$ kubectl get oc -n onecloud default -o yaml | grep -A 4 mysql
&lt;/code>&lt;/pre>&lt;h3 id="查看oc的的api对象信息">查看OC的的API对象信息&lt;/h3>
&lt;pre>&lt;code># 查看OC的运行情况
$ kubectl get onecloudcluster -n onecloud
&lt;/code>&lt;/pre>&lt;pre>&lt;code># 以yaml文件的形式查看OC的API对象信息，该信息中包含集群的所有配置信息。
$ kubeclt get oc -n onecloud -o yaml
&lt;/code>&lt;/pre>&lt;h3 id="其它常用管理命令">其它常用管理命令&lt;/h3>
&lt;p>kubectl更多命令请参考kubectl官方文档。
&lt;a href="https://kubernetes.io/zh/docs/reference/kubectl/">https://kubernetes.io/zh/docs/reference/kubectl/&lt;/a>&lt;/p></description></item><item><title>Docs: 排查pod异常</title><link>https://www.cloudpods.org/zh/docs/ops/poderror/</link><pubDate>Wed, 10 Nov 2021 16:02:27 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/ops/poderror/</guid><description>
&lt;h3 id="确认pod状态">确认Pod状态&lt;/h3>
&lt;pre>&lt;code># 设置默认命名空间，后续执行相关命令时可以不带“-n onecloud”
$ kubectl config set-context --current --namespace=onecloud
# 查看 pod 状态
$ kubectl get pod
&lt;/code>&lt;/pre>&lt;h3 id="检查pod相关事件">检查pod相关事件&lt;/h3>
&lt;p>当查看到 pod 状态不是 running 状态时，可以通过 describe 命令查看更多信
息。&lt;/p>
&lt;pre>&lt;code># 举例为查看 host 服务的 pod 的事件信息
$ kubectl describe pod default-host-z8j5r
&lt;/code>&lt;/pre>&lt;h3 id="查看日志">查看日志&lt;/h3>
&lt;p>可以通过检查日志来查看应用程序是否正常运行。&lt;/p>
&lt;pre>&lt;code># 查看 host 服务的日志信息
$ kubectl logs default-host-z8j5r -c host -f
&lt;/code>&lt;/pre>&lt;h3 id="pod常见错误及处理方法">Pod常见错误及处理方法&lt;/h3>
&lt;h4 id="pod---crashloopbackoff状态">Pod - CrashLoopBackOff状态&lt;/h4>
&lt;p>CrashLoopBackOff 状态说明容器曾经启动了，但又异常退出。此时可以先查看
一下容器的日志。通过 kubectl logs 命令可以发现一些容器退出的原因:&lt;/p>
&lt;ul>
&lt;li>通过查看日志发现是脏数据导致的&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>[root@test ~]#kubectl get pod | grep region
default-region-75bc7d474f-rjpkm 0/1
CrashLoopBackOff 12 2d20h
default-region-dns-88s7z 1/1 Running
0 2d20h
[root@test ~]# kubectl logs default-region-75bc7d474f￾rjpkm | less
[I 200618 16:13:32
appsrv.(*Application).ServeHTTP(appsrv.go:237)]
hlgxXm4i2qF10tkBXu3rAVrCC-w= 200 b5e0b2 GET
/networks?admin=true&amp;amp;delete=all&amp;amp;details=true&amp;amp;filter.0=updated_at.
ge%28%272020-06-
03+07%3A56%3A04%27%29&amp;amp;filter.1=manager_id.isnullorempty%28%29&amp;amp;fil
ter.2=external_id.isnullorempty%28%29&amp;amp;limit=1024&amp;amp;offset=0&amp;amp;order=a
sc&amp;amp;order_by.0=updated_at&amp;amp;pending_delete=all (10.105.232.12:55236)
34.50ms
[F 200618 16:13:32 models.(*SGuest).GetDriver(guests.go:557)]
Unsupported hypervisor Aliyun
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>pod 中对应的配置文件中格式不对&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/configmaperror.png" alt="">&lt;/p>
&lt;h4 id="pod---evicted状态">Pod - Evicted状态&lt;/h4>
&lt;p>出现这种情况，多见于系统内存或硬盘资源不足。通过“kubectl describe命令”查看异常pod。&lt;/p>
&lt;pre>&lt;code>[root@test-interface ~]# kubectl describe -n onecloud pod default-ovn-north-7689f47894-tqp2g
Name: default-ovn-north-7689f47894-tqp2g
Namespace: onecloud
Priority: 0
Node: test-interface/
Start Time: Fri, 20 Mar 2020 18:38:27 +0800
Labels: app=ovn-north
app.kubernetes.io/component=ovn-north
app.kubernetes.io/instance=onecloud-cluster-8p2p
app.kubernetes.io/managed-by=onecloud-operator
app.kubernetes.io/name=onecloud-cluster
pod-template-hash=7689f47894
Annotations: cni.projectcalico.org/podIP: 10.40.180.212/32
onecloud.yunion.io/last-applied-configuration:
{&amp;quot;volumes&amp;quot;:[{&amp;quot;name&amp;quot;:&amp;quot;certs&amp;quot;,&amp;quot;secret&amp;quot;:{&amp;quot;secretName&amp;quot;:&amp;quot;default-certs&amp;quot;,&amp;quot;items&amp;quot;:[{&amp;quot;key&amp;quot;:&amp;quot;ca.crt&amp;quot;,&amp;quot;path&amp;quot;:&amp;quot;ca.crt&amp;quot;},{&amp;quot;key&amp;quot;:&amp;quot;service.crt&amp;quot;,&amp;quot;path&amp;quot;:&amp;quot;...
Status: Failed
Reason: Evicted
Message: The node was low on resource: ephemeral-storage. Container ovn-north was using 109956Ki, which exceeds its request of 0.
&lt;/code>&lt;/pre>&lt;h4 id="pod---imagepullbackoff状态">Pod - ImagePullBackOff状态&lt;/h4>
&lt;p>通常是镜像名称配置错误或者私有镜像的密钥配置错误导致。通过“kubectl describe命令”查看异常pod。&lt;/p>
&lt;pre>&lt;code>Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal Scheduled 35s default-scheduler Successfully assigned onecloud/default-region-85ff9dcd5-mh8cl to yunion320
Normal Pulling 34s kubelet, yunion320 Pulling image &amp;quot;registry.cn-beijing.aliyuncs.com/yunionio/region:v3.2.1&amp;quot;
Normal Pulled 33s kubelet, yunion320 Successfully pulled image &amp;quot;registry.cn-beijing.aliyuncs.com/yunionio/region:v3.2.1&amp;quot;
Normal Created 33s kubelet, yunion320 Created container init
Normal Started 33s kubelet, yunion320 Started container init
Normal Pulling 15s (x2 over 28s) kubelet, yunion320 Pulling image &amp;quot;registry.cn-beijing.aliyuncs.com/yunionio/region:v3.2.2&amp;quot;
Warning Failed 15s (x2 over 28s) kubelet, yunion320 Failed to pull image &amp;quot;registry.cn-beijing.aliyuncs.com/yunionio/region:v3.2.2&amp;quot;: rpc error: code = Unknown desc = Error response from daemon: manifest for registry.cn-beijing.aliyuncs.com/yunionio/region:v3.2.2 not found: manifest unknown: manifest unknown
Warning Failed 15s (x2 over 28s) kubelet, yunion320 Error: ErrImagePull
Normal BackOff 3s kubelet, yunion320 Back-off pulling image &amp;quot;registry.cn-beijing.aliyuncs.com/yunionio/region:v3.2.2&amp;quot;
Warning Failed 3s kubelet, yunion320 Error: ImagePullBackOff
&lt;/code>&lt;/pre>&lt;h4 id="pod---pending状态">Pod - Pending状态&lt;/h4>
&lt;p>Pending状态，这个状态意味着，Pod的yaml文件已经提交给Kubernetes，API对象已经被创建并保存在Etcd 当中。但是，这个Pod里有些容器因为某种原因而不能被顺利创建。&lt;/p>
&lt;ul>
&lt;li>调度不成功（可以通过 kubectl describe pod 命令查看到当前 Pod 的事件，进而判断为什么没有调度）。&lt;/li>
&lt;li>可能原因： 资源不足（集群内所有的 Node 都不满足该 Pod 请求的 CPU、内存、GPU 等资源）；&lt;/li>
&lt;li>HostPort 已被占用（通常推荐使用 Service 对外开放服务端口）。&lt;/li>
&lt;/ul>
&lt;h4 id="pod---error状态">Pod - Error状态&lt;/h4>
&lt;p>通常处于 Error 状态说明 Pod 启动过程中发生了错误。常见的原因包括：&lt;/p>
&lt;ul>
&lt;li>依赖的 ConfigMap、Secret 或者 PV 等不存在；&lt;/li>
&lt;li>请求的资源超过了管理员设置的限制，比如超过了 LimitRange 等；&lt;/li>
&lt;li>违反集群的安全策略，比如违反了 PodSecurityPolicy 等；&lt;/li>
&lt;li>容器无权操作集群内的资源，比如开启 RBAC 后，需要为 ServiceAccount 配置角色绑定;&lt;/li>
&lt;/ul></description></item><item><title>Docs: 持久化后端日志</title><link>https://www.cloudpods.org/zh/docs/ops/backendlogs/</link><pubDate>Wed, 05 Jan 2022 15:29:08 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/ops/backendlogs/</guid><description>
&lt;p>Cloudpods平台自&lt;code>3.7.6&lt;/code>版本后，operator服务 结合 kubeserver 会默认部署 grafana 和 loki 提供查看后端服务日志的功能。&lt;/p>
&lt;p>查看日志只用登录 grafana 即可，默认的 grafana 访问方式是以 ingress 的方式暴露服务。&lt;/p>
&lt;h3 id="访问grafana">访问Grafana&lt;/h3>
&lt;ol>
&lt;li>访问Grafana的地址默认为 &lt;code>https://控制节点IP地址/grafana&lt;/code>，默认登录密码为&lt;code>admin / admin@123&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="../images/grafanahome.png" alt="">&lt;/p>
&lt;ol start="2">
&lt;li>点击上图中的2 explore 按钮，进入Loki日志查询页面。如在该页面可查询某节点的host pod日志等。在查询条件中输入&lt;code>{app=&amp;quot;host&amp;quot;,hostname=&amp;quot;testhost&amp;quot;}&lt;/code>，在下方将会显示出该节点上的host pod日志。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="../images/explore.png" alt="">&lt;/p>
&lt;h3 id="查询条件">查询条件&lt;/h3>
&lt;p>loki 的日志服务查询是按标签进行过滤的，常用的标签 &amp;ldquo;app&amp;rdquo; 对应服务的名称，&amp;ldquo;hostname&amp;rdquo; 对应 pod 所在的机器，“container_name&amp;quot; 对应容器名称。&lt;/p>
&lt;pre>&lt;code># 比如要查看 &amp;quot;ovn-north&amp;quot; 容器的日志
{container_name=&amp;quot;ovn-north&amp;quot;}
# 查看节点 test 上的 host 服务日志
{app=&amp;quot;host&amp;quot;,hostname=&amp;quot;test&amp;quot;}
# 查看 baremetal 服务日志
{app=&amp;quot;baremetal-agent&amp;quot;}
&lt;/code>&lt;/pre>&lt;p>更多使用方法请参考 &lt;a href="https://github.com/grafana/loki/blob/main/docs/sources/logql/_index.md">https://github.com/grafana/loki/blob/main/docs/sources/logql/_index.md&lt;/a>&lt;/p>
&lt;h3 id="使用举例">使用举例&lt;/h3>
&lt;p>如查询region服务过去3小时的日志。&lt;/p>
&lt;p>查询条件可设置为&lt;code>{app=&amp;quot;region&amp;quot;}&lt;/code>，时间过滤设置为“Last 3 hours” 。&lt;/p>
&lt;p>&lt;img src="../images/explore-region.png" alt="">&lt;/p></description></item><item><title>Docs: 清理日志</title><link>https://www.cloudpods.org/zh/docs/ops/log/</link><pubDate>Wed, 08 Dec 2021 18:38:00 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/ops/log/</guid><description>
&lt;h3 id="清理服务日志">清理服务日志&lt;/h3>
&lt;pre>&lt;code># 查看具体服务的分表日志
$ climc logs-splitable --service &amp;lt;service_type&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="../images/logtable.png" alt="">&lt;/p>
&lt;pre>&lt;code># 删除超过6个月的分表
$ climc logs-purge --service &amp;lt;service_type&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="../images/deletelogtable.png" alt="">&lt;/p>
&lt;h3 id="清理数据库日志">清理数据库日志&lt;/h3>
&lt;p>在部署日志的服务器上执行&lt;/p>
&lt;pre>&lt;code># 设置自动清除binlog的保留时间
$ vi /etc/my.cnf
expire_logs_days = 30
&lt;/code>&lt;/pre>&lt;p>&lt;img src="../images/binlog.png" alt="">&lt;/p></description></item><item><title>Docs: 清理无用镜像</title><link>https://www.cloudpods.org/zh/docs/ops/clearimage/</link><pubDate>Wed, 08 Dec 2021 19:12:33 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/ops/clearimage/</guid><description>
&lt;h3 id="清理无用docker镜像">清理无用docker镜像&lt;/h3>
&lt;pre>&lt;code># 清理docker image
$ docker system prune --all --force --volumes
&lt;/code>&lt;/pre>&lt;h3 id="清理平台镜像">清理平台镜像&lt;/h3>
&lt;p>以下为平台镜像、镜像缓存、快照的存放目录，当存储不足时，用户可手动删除对应资源。&lt;/p>
&lt;ul>
&lt;li>镜像默认上传到控制节点目录：/opt/cloud/workspace/data/glance/images，可通过镜像ID查找对应的镜像文件，并进行删除。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/image.png" alt="">&lt;/p>
&lt;ul>
&lt;li>镜像缓存到宿主机的缓存目录：/opt/cloud/workspace/disks/image_cache，可通过镜像ID查找对应的镜像缓存并进行删除。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/imagecache.png" alt="">&lt;/p>
&lt;ul>
&lt;li>宿主机上虚拟机快照目录：/opt/cloud/workspace/disks/snapshots，可通过硬盘ID搜索对应的快照文件进行删除。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../images/snapshot.png" alt="">&lt;/p></description></item><item><title>Docs: Ocadm部署工具常用命令</title><link>https://www.cloudpods.org/zh/docs/ops/ocadm/</link><pubDate>Wed, 10 Nov 2021 15:43:09 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/ops/ocadm/</guid><description>
&lt;p>部署管理工具ocadm类似于Kubernetes集群中的kubeadm工具，下面介绍ocadm的常用命令.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 创建集群 &lt;/span>
$ ocadm cluster create
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 查看集群认证信息&lt;/span>
$ ocadm cluster rcadmin
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 将本地镜像源切换到阿里云镜像源&lt;/span>
$ ocadm cluster update --image-repository registry.cn-beijing.aliyuncs.com/yunionio --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 将产品升级或回滚到指定版本，当系统镜像源为阿里云镜像源的情况下才可以使用下面的命令升级&lt;/span>
$ ocadm cluster update --version &lt;span style="color:#000">$version&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 禁用节点的host服务&lt;/span>
$ ocadm node disable-host-agent --node &lt;span style="color:#000">$node_name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 启用节点的host服务&lt;/span>
$ ocadm node enable-host-agent --node &lt;span style="color:#000">$node_name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 禁用节点的controller服务&lt;/span>
$ ocadm node disable-onecloud-controller --node &lt;span style="color:#000">$node_name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 启用节点的controller服务&lt;/span>
$ ocadm node enable-onecloud-controller --node &lt;span style="color:#000">$node_name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 禁用Baremetal服务&lt;/span>
$ ocadm baremetal disable --node &lt;span style="color:#000">$node_name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 如在node1主机上启用baremetal服务，并监听br0网卡。&lt;/span>
$ ocadm baremetal &lt;span style="color:#204a87">enable&lt;/span> --node node1 --listen-interface br0
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 在First Node节点获取加入节点的token信息&lt;/span>
$ ocadm token create
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 在First Node查看token信息&lt;/span>
$ ocadm token list
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 切换到开源版前端，ce(community edition)为开源版前端；&lt;/span>
$ ocadm cluster update --use-ce --wait
&lt;span style="color:#8f5902;font-style:italic"># 切换到商业版前端，ee(enterprise edition)为商业版前端 &lt;/span>
$ ocadm cluster update --use-ee --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 启用itsm组件&lt;/span>
$ ocadm component &lt;span style="color:#204a87">enable&lt;/span> itsm
&lt;span style="color:#8f5902;font-style:italic"># 禁用itsm组件&lt;/span>
$ ocadm component disable itsm
&lt;span style="color:#8f5902;font-style:italic"># 安装失败时清理环境，请谨慎使用该命令&lt;/span>
$ ocadm reset --force
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 手动安装监控Agent</title><link>https://www.cloudpods.org/zh/docs/ops/agent/</link><pubDate>Thu, 09 Dec 2021 10:23:16 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/ops/agent/</guid><description>
&lt;h3 id="前提条件">前提条件&lt;/h3>
&lt;p>虚拟机监控Agent采集的监控数据需要上报到平台的InfluxDB数据库中，因此需要获取InfluxDB地址的对外地址，并需要判断虚拟机是否可以直接连接到InfluxDB数据库。&lt;/p>
&lt;ul>
&lt;li>若虚拟机可以直接连接InfluxDB数据库，则直接安装监控Agent，配置telegraf采集的监控指标即可&lt;/li>
&lt;li>若虚拟机无法直接连接到InfluxDB数据库，需要配置SSH代理节点，建立虚拟机与InfluxDB数据库的连接后，再安装监控Agent，配置telegraf采集的监控指标。&lt;/li>
&lt;/ul>
&lt;h4 id="获取influxdb地址">获取InfluxDB地址&lt;/h4>
&lt;pre>&lt;code># 获取InfluxDB的对外地址及端口号
$ climc endpoint-list -service Influxdb
&lt;/code>&lt;/pre>&lt;p>&lt;img src="../images/getinfluxdb.png" alt="">&lt;/p>
&lt;h4 id="配置ssh代理节点">配置SSH代理节点&lt;/h4>
&lt;ol>
&lt;li>查询虚拟机所在VPC或IP子网下是否存在SSH代理节点。&lt;/li>
&lt;/ol>
&lt;pre>&lt;code># 查询虚拟机所在VPC下是否存在SSH代理节点
$ climc proxy-endpoint-list --vpc-id &amp;lt;vpc的ID&amp;gt;
# 若VPC下IP子网之间网络隔离，则需要查询虚拟机所在IP子网下是否存在SSH代理节点
$ climc proxy-endpoint-list --network-id &amp;lt;IP子网的ID&amp;gt;
&lt;/code>&lt;/pre>&lt;ol start="2">
&lt;li>若虚拟机所在网络下存在SSH代理节点，则忽略新建SSH代理节点的步骤，直接在SSH代理节点下配置到InfluxDB的remote规则，使监控数据可以上报到InfluxDB。&lt;/li>
&lt;/ol>
&lt;h4 id="新建ssh代理节点">新建SSH代理节点&lt;/h4>
&lt;p>若虚拟机所在网络无法直接与平台的InfluxDB数据库进行通信，则需要在虚拟机所在VPC或IP子网中选择一台Linux操作系统的虚拟机作为SSH代理节点。虚拟机需要满足以下配置要求&lt;/p>
&lt;p>&lt;strong>虚拟机配置要求&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>目前只支持Linux操作系统的虚拟机作为SSH代理节点。&lt;/li>
&lt;li>请确保虚拟机处于运行中状态；&lt;/li>
&lt;li>请确保虚拟机支持通过平台免密登录；虚拟机能被平台免密登录，则要求虚拟机与平台网络通（即通过EIP、NAT网关或SSH代理等方式使虚拟机与平台网络通）以及虚拟机中存在平台的公钥文件。&lt;/li>
&lt;li>请检查虚拟机的sshd配置，GatewayPorts是clientspecified，若该项值为no，则只允许绑定127.0.0.1的地址，使remote forward无法正常使用，造成安装监控Agent的虚拟机无法向平台上报监控数据等。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>操作步骤&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>在SSH代理节点页面#，单击列表上方 &lt;strong>&lt;em>&amp;ldquo;新建&amp;rdquo;&lt;/em>&lt;/strong> 按钮，进入新建SSH代理节点页面。&lt;/li>
&lt;li>在选择虚拟机页面设置以下参数：
&lt;ul>
&lt;li>域：设置SSH代理节点所属域，并通过域过滤可选的虚拟机。&lt;/li>
&lt;li>名称：设置SSH代理节点的名称。&lt;/li>
&lt;li>区域：通过平台、区域过滤VPC。&lt;/li>
&lt;li>网络：通过VPC、网络过滤虚拟机。&lt;/li>
&lt;li>虚拟机：通过上面的筛选条件过滤出符合条件的虚拟机，并支持在搜索框中通过名称和IP搜索虚拟机，，如没有合适的虚拟机，可以单击“新建”超链接，跳转到虚拟机列表页面创建符合需求的虚拟机。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>选择好虚拟机后，单击 &lt;strong>&lt;em>&amp;ldquo;下一步&amp;rdquo;&lt;/em>&lt;/strong> 按钮，开始探测虚拟机的免密登录状态。
&lt;ul>
&lt;li>如虚拟机可免密登录，可直接单击 &lt;strong>&lt;em>&amp;ldquo;确定&amp;rdquo;&lt;/em>&lt;/strong> 按钮，开始创建虚拟机。&lt;/li>
&lt;li>如虚拟机不可免密登录，请先点击列表操作列 &lt;strong>&lt;em>&amp;ldquo;查看&amp;rdquo;&lt;/em>&lt;/strong> 按钮，查看探测免密登录失败的具体原因。
&lt;ul>
&lt;li>如报错原因中提示“none publickey”，可通过设置免密登录功能，将虚拟机设置为免密登录状态。设置免密登录方式配置参数如下：
&lt;ul>
&lt;li>设置方式：支持密钥、密码、脚本等方式将平台的公钥上传到虚拟机上。&lt;/li>
&lt;li>当设置方式为“密钥”时，请使用root用户或具有使用sudo免密权限的用户以其私钥，请确保可以通过用户名和私钥通过ssh连接到对应虚拟机，单击 &lt;strong>&lt;em>&amp;ldquo;确定&amp;rdquo;&lt;/em>&lt;/strong> 按钮，开始设置并探测虚拟机的免密登录状态是否变为免密登录。&lt;/li>
&lt;li>当设置方式为“密码”时，请使用root用户或具有使用sudo免密权限的用户以其密码，请确保可以通过用户名和密码通过ssh连接到对应虚拟机。单击 &lt;strong>&lt;em>&amp;ldquo;确定&amp;rdquo;&lt;/em>&lt;/strong> 按钮，开始设置并探测虚拟机的免密登录状态是否变为免密登录。&lt;/li>
&lt;li>当设置方式为“脚本”时，请请使用root或具有sudo权限的用户在虚拟机中执行以下脚本，执行完成后，单击 &lt;strong>&lt;em>&amp;ldquo;确定&amp;rdquo;&lt;/em>&lt;/strong> 按钮，开始设置并探测虚拟机的免密登录状态是否变为免密登录。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如报错原因中提示“network error”，则需要返回上一步选择其他虚拟机，或为该虚拟机通过绑定EIP或NAT网关等方式，使其与平台网络可通。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>只有当虚拟机免密登录状态为“可免密登录”时，才支持单击 &lt;strong>&lt;em>&amp;ldquo;确定&amp;rdquo;&lt;/em>&lt;/strong> 按钮，开始创建SSH代理节点。&lt;/li>
&lt;li>在创建SSH代理节点时将会检查虚拟机的sshd配置是否符合虚拟机配置要求，若不符合将会尝试变更虚拟机的sshd配置，因此可能会造成创建ssh代理节点时间过长，若提示超时，请重新单击 &lt;strong>&lt;em>&amp;ldquo;确定&amp;rdquo;&lt;/em>&lt;/strong> 按钮，创建SSH代理节点。&lt;/li>
&lt;/ol>
&lt;h4 id="配置remote规则">配置Remote规则&lt;/h4>
&lt;p>后续在配置telegraf文件时，需要配置的InfluxDB的地址为“ssh代理节点的地址:&amp;lt;映射绑定的端口号&amp;gt;”&lt;/p>
&lt;pre>&lt;code># 在ssh代理节点上配置到InfluxDB的remote规则，使监控数据可以上报到平台的InfluxDB数据库。
$ climc proxy-forward-create --proxy-endpoint-id &amp;lt;ssh代理节点的ID&amp;gt; --type remote --remote-addr &amp;lt;influxdb的IP地址&amp;gt; --remote-port &amp;lt;InfluxDB的端口号&amp;gt; --bind-port-req &amp;lt;映射绑定的端口号&amp;gt; &amp;lt;remote规则的名称&amp;gt;
# 下面举例介绍如何创建对应的remote规则，即将10.127.100.2:30086地址映射为10.0.9.254:30086，后续telegraf配置中的InfluxDB地址“https://10.0.9.254:30086”
$ climc proxy-forward-create --proxy-endpoint-id dba57f12-4f9f-4d60-8789-7dc0fe4efc6a --type remote --remote-addr 10.127.100.2 --remote-port 30086 --bind-port-req 30086 remote-influxdb
+-------------------+--------------------------------------+
| Field | Value |
+-------------------+--------------------------------------+
| bind_addr | 10.0.9.254 |
| bind_port | 30086 |
| bind_port_req | 0 |
| can_delete | true |
| can_update | true |
| created_at | 2021-12-09T06:30:32.000000Z |
| deleted | false |
| domain_id | default |
| freezed | false |
| id | 3268655c-b816-4e4c-8250-88c67773ecff |
| is_emulated | false |
| is_system | false |
| last_seen_timeout | 117 |
| name | remote-influxdb |
| pending_deleted | false |
| project_src | local |
| proxy_agent | proxyagent0 |
| proxy_agent_id | 330e097e-59e4-4c65-8414-05d6d945e1c0 |
| proxy_endpoint | helanzhu |
| proxy_endpoint_id | dba57f12-4f9f-4d60-8789-7dc0fe4efc6a |
| remote_addr | 10.127.100.2 |
| remote_port | 30086 |
| status | init |
| tenant_id | 55bb511b62bf47dc86e82c731005ba10 |
| type | remote |
| update_version | 0 |
| updated_at | 2021-12-09T06:30:32.000000Z |
+-------------------+--------------------------------------+
&lt;/code>&lt;/pre>&lt;h3 id="安装监控agent">安装监控Agent&lt;/h3>
&lt;p>监控Agent安装包：&lt;a href="https://yunioniso.oss-cn-beijing.aliyuncs.com/rpms/telegraf/">下载路径&lt;/a>&lt;/p>
&lt;p>不同操作系统的安装包名称不同，请根据具体系统下载对应的Agent安装包。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>OS&lt;/th>
&lt;th>Arch&lt;/th>
&lt;th>Package Name&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>RedHat&lt;/td>
&lt;td>x86_64&lt;/td>
&lt;td>telegraf-1.19.2-yn~fe11a96b-0.x86_64.rpm&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>RedHat&lt;/td>
&lt;td>arm64&lt;/td>
&lt;td>telegraf-1.19.2-yn~fe11a96b-0.aarch64.rpm&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Debian&lt;/td>
&lt;td>x86_64&lt;/td>
&lt;td>telegraf_1.19.2-yn~fe11a96b-0_amd64.deb&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Debian&lt;/td>
&lt;td>arm64&lt;/td>
&lt;td>telegraf_1.19.2-yn~fe11a96b-0_arm64.deb&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Windows&lt;/td>
&lt;td>x86_64&lt;/td>
&lt;td>telegraf-1.19.2-yn~3bc1d95c_windows_amd64.zip&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Windows&lt;/td>
&lt;td>X86&lt;/td>
&lt;td>telegraf-1.19.2-yn~3bc1d95c_windows_i386.zip&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="下载监控agent安装包">下载监控Agent安装包&lt;/h4>
&lt;p>下面用 $Package 代表具体安装包名称，请在使用时进行替换。&lt;/p>
&lt;p>&lt;strong>Linux&lt;/strong>&lt;/p>
&lt;pre>&lt;code># 将安装包下载到/tmp目录
$ wget https://yunioniso.oss-cn-beijing.aliyuncs.com/rpms/telegraf/$Package -P /tmp
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Windows&lt;/strong>&lt;/p>
&lt;p>手动下载&lt;code>/$Package&lt;/code>并解压到指定目录，比如&lt;code>C:\\telegraf&lt;/code>下&lt;/p>
&lt;h4 id="准备配置文件">准备配置文件&lt;/h4>
&lt;p>准备监控Agent的配置文件&lt;/p>
&lt;p>&lt;strong>Linux&lt;/strong>&lt;/p>
&lt;pre>&lt;code># 在tmp目录下新建telegraf配置文件
$ touch /tmp/telegraf.conf
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Windows&lt;/strong>&lt;/p>
&lt;p>在&lt;code>C:\\telegraf&lt;/code>目录下新建&lt;code>telegraf.conf&lt;/code>文件。&lt;/p>
&lt;p>telegraf配置文件主要包括以下内容：&lt;/p>
&lt;h5 id="global_tags">global_tags&lt;/h5>
&lt;p>global_tags里包含虚拟机的ID、名称、宿主机、域、项目、区域、可用区、平台等信息，请根据虚拟机的具体信息，修改global_tags里的内容，后续返回的监控信息中也将会带上这些标签，因此在监控查询中可以通过一些条件查询虚拟机的监控信息。&lt;/p>
&lt;pre>&lt;code>[global_tags]
zone_ext_id = &amp;quot;&amp;quot;
os_type = &amp;quot;Linux&amp;quot;
scaling_group_id = &amp;quot;&amp;quot;
host_id = &amp;quot;3bce9607-2597-469f-8d9b-977345456739&amp;quot;
vm_id = &amp;quot;5b966ffa-1b4a-4648-8c6a-7617bb7bb76e&amp;quot;
zone_id = &amp;quot;3032cb4d-558a-4833-88e6-7b5bcabb47d1&amp;quot;
cloudregion = &amp;quot;Beijing&amp;quot;
domain_id = &amp;quot;default&amp;quot;
zone = &amp;quot;YunionHQ&amp;quot;
region_ext_id = &amp;quot;&amp;quot;
tenant = &amp;quot;system&amp;quot;
tenant_id = &amp;quot;&amp;quot;
brand = &amp;quot;OneCloud&amp;quot;
host = &amp;quot;office-03-host01&amp;quot;
vm_name = &amp;quot;test-agent&amp;quot;
status = &amp;quot;running&amp;quot;
cloudregion_id = &amp;quot;default&amp;quot;
project_domain = &amp;quot;Default&amp;quot;
&lt;/code>&lt;/pre>&lt;h5 id="agent配置信息">agent配置信息&lt;/h5>
&lt;p>包括采集监控、虚拟机名称等相关配置，除虚拟机名称外，其他参数建议保持默认。&lt;/p>
&lt;pre>&lt;code># Configuration for telegraf agent
[agent]
interval = &amp;quot;10s&amp;quot;
debug = false
hostname = &amp;quot;test-agent.test.io&amp;quot;
round_interval = true
flush_interval = &amp;quot;10s&amp;quot;
flush_jitter = &amp;quot;0s&amp;quot;
collection_jitter = &amp;quot;0s&amp;quot;
metric_batch_size = 1000
metric_buffer_limit = 10000
quiet = false
logfile = &amp;quot;&amp;quot;
omit_hostname = true
&lt;/code>&lt;/pre>&lt;h5 id="outputs">OUTPUTS&lt;/h5>
&lt;p>用于设置将监控数据传输到数据库地址，平台使用InfluxDB，数据库名称为telegraf，平台数据库的地址默认为“https://控制节点IP地址:30086”，具体平台InfluxDB数据库地址请参考&lt;a href="#%E8%8E%B7%E5%8F%96influxdb%E5%9C%B0%E5%9D%80">获取InfluxDB地址&lt;/a>步骤。&lt;/p>
&lt;ul>
&lt;li>如果虚拟机可以直接连接到平台，urls地址可以直接设置为数据的访问地址；&lt;/li>
&lt;li>如果虚拟机不可以直接连接到平台，则需要通过代理的方式，该urls地址为代理地址，即为: &amp;ldquo;http://&amp;lt;ssh代理节点的地址&amp;gt;:&amp;lt;remote规则的映射端口号&amp;gt;&amp;quot;。&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>#################################################################
# OUTPUTS #
##################################################################
[[outputs.influxdb]]
urls = [&amp;quot;https://192.168.12.251:30086&amp;quot;]
database = &amp;quot;telegraf&amp;quot;
insecure_skip_verify = true
&lt;/code>&lt;/pre>&lt;h5 id="inputs">INPUTS&lt;/h5>
&lt;p>主要用于设置采集的监控指标，建议保持默认。&lt;/p>
&lt;pre>&lt;code> ##################################################################
# INPUTS #
##################################################################
[[inputs.cpu]]
name_prefix = &amp;quot;agent_&amp;quot;
percpu = true
totalcpu = true
collect_cpu_time = false
report_active = true
[[inputs.disk]]
name_prefix = &amp;quot;agent_&amp;quot;
ignore_fs = [&amp;quot;tmpfs&amp;quot;, &amp;quot;devtmpfs&amp;quot;, &amp;quot;overlay&amp;quot;, &amp;quot;squashfs&amp;quot;, &amp;quot;iso9660&amp;quot;]
[[inputs.diskio]]
name_prefix = &amp;quot;agent_&amp;quot;
skip_serial_number = false
[[inputs.kernel]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.kernel_vmstat]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.mem]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.processes]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.swap]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.system]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.net]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.netstat]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.nstat]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.ntpq]]
name_prefix = &amp;quot;agent_&amp;quot;
dns_lookup = false
[[inputs.internal]]
name_prefix = &amp;quot;agent_&amp;quot;
collect_memstats = false
&lt;/code>&lt;/pre>&lt;h5 id="telegraf配置文件举例">telegraf配置文件举例&lt;/h5>
&lt;p>以下为完整的telegraf举例文件，用户可参考进行配置&lt;/p>
&lt;pre>&lt;code>### MANAGED BY ansible-telegraf ANSIBLE ROLE ###
[global_tags]
zone_ext_id = &amp;quot;&amp;quot;
os_type = &amp;quot;windows&amp;quot;
scaling_group_id = &amp;quot;&amp;quot;
host_id = &amp;quot;3bce9607-2597-469f-8d9b-977345456739&amp;quot;
vm_id = &amp;quot;5b966ffa-1b4a-4648-8c6a-7617bb7bb76e&amp;quot;
zone_id = &amp;quot;3032cb4d-558a-4833-88e6-7b5bcabb47d1&amp;quot;
cloudregion = &amp;quot;Beijing&amp;quot;
domain_id = &amp;quot;default&amp;quot;
zone = &amp;quot;YunionHQ&amp;quot;
region_ext_id = &amp;quot;&amp;quot;
tenant = &amp;quot;system&amp;quot;
tenant_id = &amp;quot;&amp;quot;
brand = &amp;quot;OneCloud&amp;quot;
host = &amp;quot;office-03-host01&amp;quot;
vm_name = &amp;quot;test-agent&amp;quot;
status = &amp;quot;running&amp;quot;
cloudregion_id = &amp;quot;default&amp;quot;
project_domain = &amp;quot;Default&amp;quot;
# Configuration for telegraf agent
[agent]
interval = &amp;quot;10s&amp;quot;
debug = false
hostname = &amp;quot;test-agent.test.io&amp;quot;
round_interval = true
flush_interval = &amp;quot;10s&amp;quot;
flush_jitter = &amp;quot;0s&amp;quot;
collection_jitter = &amp;quot;0s&amp;quot;
metric_batch_size = 1000
metric_buffer_limit = 10000
quiet = false
logfile = &amp;quot;&amp;quot;
omit_hostname = true
##################################################################
# OUTPUTS #
##################################################################
# 本例中是通过SSH代理的方式将监控数据转发到INfluxDB数据库。
[[outputs.influxdb]]
urls = [&amp;quot;https://192.168.12.251:50041&amp;quot;]
database = &amp;quot;telegraf&amp;quot;
insecure_skip_verify = true
##################################################################
# INPUTS #
##################################################################
[[inputs.cpu]]
name_prefix = &amp;quot;agent_&amp;quot;
percpu = true
totalcpu = true
collect_cpu_time = false
report_active = true
[[inputs.disk]]
name_prefix = &amp;quot;agent_&amp;quot;
ignore_fs = [&amp;quot;tmpfs&amp;quot;, &amp;quot;devtmpfs&amp;quot;, &amp;quot;overlay&amp;quot;, &amp;quot;squashfs&amp;quot;, &amp;quot;iso9660&amp;quot;]
[[inputs.diskio]]
name_prefix = &amp;quot;agent_&amp;quot;
skip_serial_number = false
[[inputs.kernel]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.kernel_vmstat]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.mem]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.processes]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.swap]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.system]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.net]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.netstat]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.nstat]]
name_prefix = &amp;quot;agent_&amp;quot;
[[inputs.ntpq]]
name_prefix = &amp;quot;agent_&amp;quot;
dns_lookup = false
[[inputs.internal]]
name_prefix = &amp;quot;agent_&amp;quot;
collect_memstats = false
##################################################################
# PROCESSORS #
##################################################################
&lt;/code>&lt;/pre>&lt;h4 id="手动安装监控agent">手动安装监控Agent&lt;/h4>
&lt;p>&lt;strong>RedHat/CentOS&lt;/strong>&lt;/p>
&lt;pre>&lt;code># 安装
rpm -ivh /tmp/$Package
# 更换配置文件
mv /tmp/telegraf.conf /etc/telegraf/telegraf.conf
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Debian/Ubuntu&lt;/strong>&lt;/p>
&lt;pre>&lt;code># 安装
dpkg -i /tmp/$Package
# 更换配置文件
mv /tmp/telegraf.conf /etc/telegraf/telegraf.conf
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Windows&lt;/strong>&lt;/p>
&lt;p>安装Windows版本监控Agent时需要指定上面步骤的telegraf配置文件，例如&lt;code>C:\\telegraf\telegraf.conf&lt;/code>&lt;/p>
&lt;pre>&lt;code>C:\\telegraf\telegraf.exe --config &amp;quot;C:\\telegraf\telegraf.conf&amp;quot; --service install
&lt;/code>&lt;/pre>&lt;h4 id="启动telegraf服务">启动telegraf服务&lt;/h4>
&lt;p>&lt;strong>Linux&lt;/strong>&lt;/p>
&lt;pre>&lt;code># 启动服务
systemctl start telegraf
# 查看服务
systemctl status telegraf
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Windows&lt;/strong>&lt;/p>
&lt;pre>&lt;code># 启动服务
sc start telegraf
# 查看服务
sc query telegraf
&lt;/code>&lt;/pre></description></item><item><title>Docs: 将其他KVM平台虚拟机镜像迁移到平台</title><link>https://www.cloudpods.org/zh/docs/ops/migrate/</link><pubDate>Thu, 11 Nov 2021 15:58:12 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/ops/migrate/</guid><description>
&lt;ol>
&lt;li>通过libvirt导出虚拟机的镜像（.qcow2文件）。&lt;/li>
&lt;li>将镜像上传至一个http服务器中。&lt;/li>
&lt;li>使用Cloudpods镜像服务器导入镜像。&lt;/li>
&lt;li>通过镜像创建虚拟机。&lt;/li>
&lt;li>若原来的虚拟机挂载了云硬盘，可按照以下方式迁移：
&lt;ul>
&lt;li>与上述操作类似，需要先将数据盘生成镜像，同理导入，Cloudpods使用该镜像创建数据云盘，再将云硬盘挂载到虚拟机即可。&lt;/li>
&lt;li>先在Cloudpods中创建一个相同大小的云硬盘，找到对应的路径，将原云盘数据直接复制到新的路径下，最后再挂载到虚拟机上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: Host服务问题排查</title><link>https://www.cloudpods.org/zh/docs/ops/hosterror/</link><pubDate>Thu, 11 Nov 2021 15:59:40 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/ops/hosterror/</guid><description>
&lt;h3 id="宿主机安装host服务完成后默认处于禁用状态需要启用后使用宿主机启用方法如下">宿主机安装Host服务完成后，默认处于禁用状态，需要启用后使用。宿主机启用方法如下：&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>在云管平台的宿主机列表中启用该宿主机；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在控制节点使用climc命令启用该宿主机；&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc host-enable id
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="host服务为什么会变成离线">Host服务为什么会变成离线？&lt;/h3>
&lt;p>region的HostPingDetectionTask将超过3分钟未收到ping的host服务置为offline，并将宿主机上的虚拟机状态设置为unknown。&lt;/p>
&lt;h3 id="宿主机的host服务启动失败且报错fail-to-get-network-infono-networks该怎么解决">宿主机的Host服务启动失败，且报错“Fail to get network info：no networks”，该怎么解决？&lt;/h3>
&lt;p>该问题一般是没有为宿主机注册网络，需要在云管平台为宿主机创建一个IP子网或使用Climc命令在控制节点创建一个网络。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc network-create bcast0 host02 10.168.222.226 10.168.222.226 &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span> --gateway 10.168.222.1
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>