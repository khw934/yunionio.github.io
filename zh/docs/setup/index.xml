<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cloudpods –
安装部署</title><link>https://www.cloudpods.org/zh/docs/setup/</link><description>Recent content in 安装部署 on Cloudpods</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 10 Jan 2022 16:03:30 +0800</lastBuildDate><atom:link href="https://www.cloudpods.org/zh/docs/setup/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 组件概览</title><link>https://www.cloudpods.org/zh/docs/setup/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/intro/</guid><description>
&lt;p>Cloudpods目前支持在 CentOS 7 (x86_64 或 arm64) 和 Debian 10 (arm64) 上运行，待部署组件/服务如下:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">服务组件&lt;/th>
&lt;th style="text-align:center">用途&lt;/th>
&lt;th style="text-align:center">安装方式&lt;/th>
&lt;th style="text-align:center">运行方式&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">mariadb&lt;/td>
&lt;td style="text-align:center">关系型数据库&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">systemd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">docker&lt;/td>
&lt;td style="text-align:center">容器运行时&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">systemd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">kubelet&lt;/td>
&lt;td style="text-align:center">管理 kubernetes pod&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">systemd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ansibleserver&lt;/td>
&lt;td style="text-align:center">ansible脚本管理和执行服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">apigateway&lt;/td>
&lt;td style="text-align:center">web前端的API网关&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">baremetal-agent&lt;/td>
&lt;td style="text-align:center">管理物理机&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">cloudevent&lt;/td>
&lt;td style="text-align:center">云上日志和裸金属日志收集服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">cloudid&lt;/td>
&lt;td style="text-align:center">公有云SAML SSO服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">cloudmon&lt;/td>
&lt;td style="text-align:center">公有云监控指标采集服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">devtool&lt;/td>
&lt;td style="text-align:center">运维工具服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">esxi-agent&lt;/td>
&lt;td style="text-align:center">VMware ESXi管理服务代理&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">etcd&lt;/td>
&lt;td style="text-align:center">基础服务，存储服务间推送消息，分布式锁等等信息&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">glance&lt;/td>
&lt;td style="text-align:center">镜像存储&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">host&lt;/td>
&lt;td style="text-align:center">管理虚拟机&lt;/td>
&lt;td style="text-align:center">k8s daemonset&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">sdnagent&lt;/td>
&lt;td style="text-align:center">管理虚拟机流表规则，实现网络安全组和限速等功能&lt;/td>
&lt;td style="text-align:center">k8s daemonset&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ovn-controller&lt;/td>
&lt;td style="text-align:center">实现ovn数据库到每台宿主机OVS的流表同步&lt;/td>
&lt;td style="text-align:center">k8s daemonset&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">host-deployer&lt;/td>
&lt;td style="text-align:center">虚拟机部署服务，负责挂载虚拟机镜像，进行识别和修改&lt;/td>
&lt;td style="text-align:center">k8s daemonset&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">host-image&lt;/td>
&lt;td style="text-align:center">虚拟机本地磁盘数据传输服务&lt;/td>
&lt;td style="text-align:center">k8s daemonset&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">influxdb&lt;/td>
&lt;td style="text-align:center">监控数据库&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">keystone&lt;/td>
&lt;td style="text-align:center">认证服务, 提供用户认证，服务间的API认证&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">kubeserver&lt;/td>
&lt;td style="text-align:center">容器管理服务，管理多个k8s容器集群，基于主机创建k8s集群&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">logger&lt;/td>
&lt;td style="text-align:center">操作日志服务，存储所有服务的操作日志&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">monitor&lt;/td>
&lt;td style="text-align:center">监控服务，提供监控API，提供报警服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">notify&lt;/td>
&lt;td style="text-align:center">消息通知服务，负责短信，邮件，以及IM的消息发送&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">onecloud-service-operator&lt;/td>
&lt;td style="text-align:center">编排服务控制器&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ovn-north&lt;/td>
&lt;td style="text-align:center">OVN虚拟网络的数据维护服务，OVN标准组件&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">region&lt;/td>
&lt;td style="text-align:center">云控制器，控制服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">region-dns&lt;/td>
&lt;td style="text-align:center">主机自定义域名服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">s3gateway&lt;/td>
&lt;td style="text-align:center">对象存储统一网关，实现对所有对象存储的统一访问&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">scheduler&lt;/td>
&lt;td style="text-align:center">虚拟机调度服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">telegraf&lt;/td>
&lt;td style="text-align:center">监控代理，采集每个节点的监控数据，并存储到influxdb&lt;/td>
&lt;td style="text-align:center">k8s daemonset&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">vpcagent&lt;/td>
&lt;td style="text-align:center">VPC代理网关，实现云平台和OVN的信息同步&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">web&lt;/td>
&lt;td style="text-align:center">前端服务，是一个nginx容器，内置web前端js代码&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">webconsole&lt;/td>
&lt;td style="text-align:center">云主机和容器的web终端服务&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">yunionconf&lt;/td>
&lt;td style="text-align:center">前端个性化配置信息的存储和管理&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">onecloud-operator&lt;/td>
&lt;td style="text-align:center">整个Cloudpods服务的K8s Operator，负责服务组件的部署管理&lt;/td>
&lt;td style="text-align:center">k8s deployment&lt;/td>
&lt;td style="text-align:center">container&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">climc&lt;/td>
&lt;td style="text-align:center">命令行工具&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">shell&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">ocadm&lt;/td>
&lt;td style="text-align:center">部署服务管理工具&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">shell&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中 host 和 baremetal-agent 可以根据需求选择性部署:&lt;/p>
&lt;ul>
&lt;li>管理 kvm 虚拟机: 部署 host 服务&lt;/li>
&lt;li>管理物理机: 部署 baremetal-agent 服务&lt;/li>
&lt;/ul></description></item><item><title>Docs: 配置要求</title><link>https://www.cloudpods.org/zh/docs/setup/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/config/</guid><description>
&lt;h3 id="硬件配置要求">硬件配置要求&lt;/h3>
&lt;p>下表为不同场景需要部署的节点及配置要求等。请根据具体使用场景进行规划部署。&lt;/p>
&lt;table>
&lt;tr>
&lt;th>部署场景&lt;/th>
&lt;th>部署组件&lt;/th>
&lt;th>配置需求&lt;/th>
&lt;th>资源占用情况&lt;/th>
&lt;th>备注&lt;/th>
&lt;/tr>
&lt;tr>
&lt;td>多云场景&lt;/td>
&lt;td>控制节点&lt;/td>
&lt;td>
&lt;li>最低配置：8C16G500G（推荐使用SSD硬盘，且系统盘(根分区大小)不低于200GB）；&lt;/li>
&lt;li>服务器：支持部署在虚拟机或物理服务器；&lt;/li>
&lt;li>操作系统：推荐CentOS 7.6~7.8 Minimal；&lt;/li>
&lt;li>配置要求：每增加500台虚拟机，需要增加8C8G200G(/opt分区大小)的系统资源；&lt;/li>
&lt;li>高可用要求：至少需要3台相同配置的服务器&lt;/li>
&lt;/td>
&lt;td>全部资源&lt;/td>
&lt;td>待纳管的云账号具有读写权限的Access Key ID和Access Key Secret&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td rowspan="3">私有云场景&lt;/td>
&lt;td>控制节点&lt;/td>
&lt;td>
&lt;li>最低配置：8C16G500G（推荐使用SSD硬盘，且系统盘(根分区大小)不低于200GB）；&lt;/li>
&lt;li>服务器：支持部署在虚拟机或物理服务器；&lt;/li>
&lt;li>操作系统：推荐CentOS 7.6~7.8 Minimal；&lt;/li>
&lt;li>配置要求：每增加500台虚拟机，需要增加8C8G200G(/opt分区大小)的系统资源；&lt;/li>
&lt;li>高可用要求：至少需要3台相同配置的服务器&lt;/li>
&lt;/td>
&lt;td>全部资源&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>计算节点&lt;/td>
&lt;td>
&lt;li>服务器：带硬件虚拟化特性的通用X86物理服务器；&lt;/li>
&lt;li>操作系统：推荐CentOS 7.6~7.8 Minimal；&lt;/li>
&lt;li>配置要求：CPU需开启VT、32G以上内存、1T以上的硬盘&lt;/li>
&lt;/td>
&lt;td>产品服务需占用2C2G200G的系统资源&lt;/td>
&lt;td>
&lt;li>如使用经典网络则需为虚拟机申请网络可达的内网IP。&lt;/li>
&lt;li>如使用VPC网络则需要申请内网可达的IP地址段作为弹性公网IP&lt;/li>
&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ceph存储&lt;/td>
&lt;td>
&lt;li>服务器：通用X86物理服务器；&lt;/li>
&lt;li>配置要求：至少32C64G、系统盘使用单独硬盘、数据盘配置4块以上大容量SATA硬盘，且支持直通模式&lt;/li>
&lt;li>网络：万兆及以上&lt;/li>
&lt;/td>
&lt;td>不占用资源&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td rowspan="3">物理机纳管&lt;/td>
&lt;td>
&lt;li>控制节点&lt;/li>
&lt;li>启用Baremetal服务&lt;/li>
&lt;/td>
&lt;td>
&lt;li>最低配置：8C16G500G（推荐使用SSD硬盘，且系统盘(根分区大小)不低于200GB）；&lt;/li>
&lt;li>服务器：支持部署在虚拟机或物理服务器；&lt;/li>
&lt;li>操作系统：推荐CentOS 7.6~7.8 Minimal；&lt;/li>
&lt;li>配置要求：每增加500台虚拟机，需要增加8C8G200G(/opt分区大小)的系统资源；&lt;/li>
&lt;li>高可用要求：至少需要3台相同配置的服务器&lt;/li>
&lt;/td>
&lt;td>全部资源&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>裸金属&lt;/td>
&lt;td>
&lt;li>服务器：通用X86物理服务器；&lt;/li>
&lt;li>配置要求：具备IPMI管理功能；启用方式设置为BIOS PXE启动&lt;/li>
&lt;/td>
&lt;td>不占用资源&lt;/td>
&lt;td>
&lt;li>为物理机单独申请网络可达的IPMI和内网IP子网&lt;/li>
&lt;li>若环境不支持DHCP Relay，则要求服务器支持Redfish&lt;/li>
&lt;/td>
&lt;/tr>
&lt;/table>
&lt;h3 id="公有云主机配置注意事项">公有云主机配置注意事项&lt;/h3>
&lt;p>如在公有云中的云主机上部署Cloudpods平台，请注意以下事项：&lt;/p>
&lt;ul>
&lt;li>由于公有云上的云主机不能设置vip，数据库不是双主模式，因此在公有云上无法安装高可用环境，建议仅配置k8s高可用，Cloudpods平台部署一个控制节点和两个计算节点。&lt;/li>
&lt;li>当在公有云上部署多个节点时，建议云主机之间请放开全部端口。&lt;/li>
&lt;li>在公有云上部署环境时，建议部署Mariadb数据库，不要使用mysql 5.6及以下版本，防止索引长度 bug： Index column size too large. The maximum column size is 767 bytes.&lt;/li>
&lt;/ul></description></item><item><title>Docs: 部署 DB HA 环境</title><link>https://www.cloudpods.org/zh/docs/setup/db-ha/</link><pubDate>Wed, 12 Feb 2020 12:55:46 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/db-ha/</guid><description>
&lt;p>Cloudpods 平台服务使用 Mariadb，这里使用 keepalived 和 Mariadb 的主主复制功能来实现 DB 的高可用。&lt;/p>
&lt;h2 id="部署">部署&lt;/h2>
&lt;p>keepalived 的主要作用是为 Mariadb 提供 vip，在2个 Mariadb 实例之间切换，不间断的提供服务。&lt;/p>
&lt;h3 id="部署配置-mariadb-主主复制">部署配置 Mariadb 主主复制&lt;/h3>
&lt;p>安装并启动 Mariadb&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum install -y mariadb-server
$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now mariadb
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行 Mariadb 安全配置向导，设置密码等&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ mysql_secure_installation
... ...
Change the root password? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Y/n&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> y
New password:
Re-enter new password:
Password updated successfully!
Reloading privilege tables..
... Success!
... ...
Remove anonymous users? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Y/n&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> y
... Success!
... ...
Disallow root login remotely? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Y/n&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> y
... Success!
... ...
Remove &lt;span style="color:#204a87">test&lt;/span> database and access to it? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Y/n&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> y
- Dropping &lt;span style="color:#204a87">test&lt;/span> database...
... Success!
- Removing privileges on &lt;span style="color:#204a87">test&lt;/span> database...
... Success! ... ...
Reload privilege tables now? &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Y/n&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> y
... Success!
... ...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改 Mariadb 配置文件，准备配置主主复制&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 主节点&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt; /etc/my.cnf
&lt;/span>&lt;span style="color:#4e9a06">[mysqld]
&lt;/span>&lt;span style="color:#4e9a06">datadir=/var/lib/mysql
&lt;/span>&lt;span style="color:#4e9a06">socket=/var/lib/mysql/mysql.sock
&lt;/span>&lt;span style="color:#4e9a06"># Disabling symbolic-links is recommended to prevent assorted security risks
&lt;/span>&lt;span style="color:#4e9a06">symbolic-links=0
&lt;/span>&lt;span style="color:#4e9a06"># Settings user and group are ignored when systemd is used.
&lt;/span>&lt;span style="color:#4e9a06"># If you need to run mysqld under a different user or group,
&lt;/span>&lt;span style="color:#4e9a06"># customize your systemd unit file for mariadb according to the
&lt;/span>&lt;span style="color:#4e9a06"># instructions in http://fedoraproject.org/wiki/Systemd
&lt;/span>&lt;span style="color:#4e9a06"># skip domain name resolve
&lt;/span>&lt;span style="color:#4e9a06">skip_name_resolve
&lt;/span>&lt;span style="color:#4e9a06"># auto delete binlog older than 30 days
&lt;/span>&lt;span style="color:#4e9a06">expire_logs_days=30
&lt;/span>&lt;span style="color:#4e9a06">innodb_file_per_table=ON
&lt;/span>&lt;span style="color:#4e9a06">max_connections = 300
&lt;/span>&lt;span style="color:#4e9a06">max_allowed_packet=20M
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">server-id = 1
&lt;/span>&lt;span style="color:#4e9a06">auto_increment_offset = 1
&lt;/span>&lt;span style="color:#4e9a06">auto_increment_increment = 2
&lt;/span>&lt;span style="color:#4e9a06">log-bin = mysql-bin
&lt;/span>&lt;span style="color:#4e9a06">binlog-format = row
&lt;/span>&lt;span style="color:#4e9a06">log-slave-updates
&lt;/span>&lt;span style="color:#4e9a06">max_binlog_size = 1G
&lt;/span>&lt;span style="color:#4e9a06">replicate-ignore-db = information_schema
&lt;/span>&lt;span style="color:#4e9a06">replicate-ignore-db = performance_schema
&lt;/span>&lt;span style="color:#4e9a06">max_connections = 1000
&lt;/span>&lt;span style="color:#4e9a06">max_connect_errors = 0
&lt;/span>&lt;span style="color:#4e9a06">max_allowed_packet = 1G
&lt;/span>&lt;span style="color:#4e9a06">slave-net-timeout=10
&lt;/span>&lt;span style="color:#4e9a06">master-retry-count=0
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">slow_query_log = 1
&lt;/span>&lt;span style="color:#4e9a06">long_query_time = 2
&lt;/span>&lt;span style="color:#4e9a06">slow_query_log_file = /var/log/mariadb/slow-query.log
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">[mysql]
&lt;/span>&lt;span style="color:#4e9a06">no-auto-rehash
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">[mysqld_safe]
&lt;/span>&lt;span style="color:#4e9a06">log-error=/var/log/mariadb/mariadb.log
&lt;/span>&lt;span style="color:#4e9a06">pid-file=/var/run/mariadb/mariadb.pid
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06"># include all files from the config directory
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06">!includedir /etc/my.cnf.d
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 备节点&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt; /etc/my.cnf
&lt;/span>&lt;span style="color:#4e9a06">[mysqld]
&lt;/span>&lt;span style="color:#4e9a06">datadir=/var/lib/mysql
&lt;/span>&lt;span style="color:#4e9a06">socket=/var/lib/mysql/mysql.sock
&lt;/span>&lt;span style="color:#4e9a06"># Disabling symbolic-links is recommended to prevent assorted security risks
&lt;/span>&lt;span style="color:#4e9a06">symbolic-links=0
&lt;/span>&lt;span style="color:#4e9a06"># Settings user and group are ignored when systemd is used.
&lt;/span>&lt;span style="color:#4e9a06"># If you need to run mysqld under a different user or group,
&lt;/span>&lt;span style="color:#4e9a06"># customize your systemd unit file for mariadb according to the
&lt;/span>&lt;span style="color:#4e9a06"># instructions in http://fedoraproject.org/wiki/Systemd
&lt;/span>&lt;span style="color:#4e9a06"># skip domain name resolve
&lt;/span>&lt;span style="color:#4e9a06">skip_name_resolve
&lt;/span>&lt;span style="color:#4e9a06"># auto delete binlog older than 30 days
&lt;/span>&lt;span style="color:#4e9a06">expire_logs_days=30
&lt;/span>&lt;span style="color:#4e9a06">innodb_file_per_table=ON
&lt;/span>&lt;span style="color:#4e9a06">max_connections = 300
&lt;/span>&lt;span style="color:#4e9a06">max_allowed_packet=20M
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">server-id = 2
&lt;/span>&lt;span style="color:#4e9a06">auto_increment_offset = 2
&lt;/span>&lt;span style="color:#4e9a06">auto_increment_increment = 2
&lt;/span>&lt;span style="color:#4e9a06">log-bin = mysql-bin
&lt;/span>&lt;span style="color:#4e9a06">binlog-format = row
&lt;/span>&lt;span style="color:#4e9a06">log-slave-updates
&lt;/span>&lt;span style="color:#4e9a06">max_binlog_size = 1G
&lt;/span>&lt;span style="color:#4e9a06">replicate-ignore-db = information_schema
&lt;/span>&lt;span style="color:#4e9a06">replicate-ignore-db = performance_schema
&lt;/span>&lt;span style="color:#4e9a06">max_connections = 1000
&lt;/span>&lt;span style="color:#4e9a06">max_connect_errors = 0
&lt;/span>&lt;span style="color:#4e9a06">max_allowed_packet = 1G
&lt;/span>&lt;span style="color:#4e9a06">slave-net-timeout=10
&lt;/span>&lt;span style="color:#4e9a06">master-retry-count=0
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">slow_query_log = 1
&lt;/span>&lt;span style="color:#4e9a06">long_query_time = 2
&lt;/span>&lt;span style="color:#4e9a06">slow_query_log_file = /var/log/mariadb/slow-query.log
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">[mysql]
&lt;/span>&lt;span style="color:#4e9a06">no-auto-rehash
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">[mysqld_safe]
&lt;/span>&lt;span style="color:#4e9a06">log-error=/var/log/mariadb/mariadb.log
&lt;/span>&lt;span style="color:#4e9a06">pid-file=/var/run/mariadb/mariadb.pid
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06"># include all files from the config directory
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06">!includedir /etc/my.cnf.d
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 重启服务&lt;/span>
$ systemctl restart mariadb
&lt;/code>&lt;/pre>&lt;/div>&lt;p>主节点创建只读账号，导出全部数据，导入备节点。记录binlog日志文件名和position。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 以下命令在主节点执行&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 此密码为上面设置的 Mariadb root 密码，为了方便，只读账号也使用此密码&lt;/span>
$ &lt;span style="color:#000">MYSQL_PASSWD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;your-sql-passwd&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 开启 Mariadb 的远程访问&lt;/span>
$ mysql -uroot -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#39; WITH GRANT OPTION;FLUSH PRIVILEGES&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 创建只读账号&lt;/span>
$ mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;GRANT REPLICATION SLAVE ON *.* TO repl@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;;FLUSH PRIVILEGES&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 示例是全新安装的 Mariadb ，还没有使用。如果是正在使用的数据库做主主复制，需要锁表后再导出数据&lt;/span>
$ mysql -uroot -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;SHOW PROCESSLIST&amp;#34;&lt;/span>
+----+------+-----------+------+---------+------+-------+------------------+----------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> Id &lt;span style="color:#000;font-weight:bold">|&lt;/span> User &lt;span style="color:#000;font-weight:bold">|&lt;/span> Host &lt;span style="color:#000;font-weight:bold">|&lt;/span> db &lt;span style="color:#000;font-weight:bold">|&lt;/span> Command &lt;span style="color:#000;font-weight:bold">|&lt;/span> Time &lt;span style="color:#000;font-weight:bold">|&lt;/span> State &lt;span style="color:#000;font-weight:bold">|&lt;/span> Info &lt;span style="color:#000;font-weight:bold">|&lt;/span> Progress &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+----+------+-----------+------+---------+------+-------+------------------+----------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> root &lt;span style="color:#000;font-weight:bold">|&lt;/span> localhost &lt;span style="color:#000;font-weight:bold">|&lt;/span> NULL &lt;span style="color:#000;font-weight:bold">|&lt;/span> Query &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> NULL &lt;span style="color:#000;font-weight:bold">|&lt;/span> SHOW PROCESSLIST &lt;span style="color:#000;font-weight:bold">|&lt;/span> 0.000 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+----+------+-----------+------+---------+------+-------+------------------+----------+
&lt;span style="color:#8f5902;font-style:italic"># 记录binlog日志文件名和position&lt;/span>
$ mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;SHOW MASTER STATUS\G&amp;#34;&lt;/span>
*************************** 1. row ***************************
File: mysql-bin.000001
Position: &lt;span style="color:#0000cf;font-weight:bold">2023&lt;/span>
Binlog_Do_DB:
Binlog_Ignore_DB:
&lt;span style="color:#8f5902;font-style:italic"># 导出全部数据&lt;/span>
$ mysqldump --all-databases -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> &amp;gt; alldb.db
&lt;span style="color:#8f5902;font-style:italic"># 拷贝 alldb.db 到备节点&lt;/span>
$ scp alldb.db db2:/root/
&lt;span style="color:#8f5902;font-style:italic"># 以下命令在备节点执行&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 此密码为上面设置的 Mariadb root 密码&lt;/span>
$ &lt;span style="color:#000">MYSQL_PASSWD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;your-sql-passwd&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 导入主节点导出的数据&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> &amp;lt; alldb.db
&lt;span style="color:#8f5902;font-style:italic"># 重载权限&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;FLUSH PRIVILEGES&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 记录binlog日志文件名和position&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;SHOW MASTER STATUS\G&amp;#34;&lt;/span>
*************************** 1. row ***************************
File: mysql-bin.000001
Position: &lt;span style="color:#0000cf;font-weight:bold">509778&lt;/span>
Binlog_Do_DB:
Binlog_Ignore_DB:
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置主主复制&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 以下命令在主节点执行&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 修改MASTER_HOST为备节点IP，修改MASTER_LOG_FILE和MASTER_LOG_POS为上面备节点记录的信息&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;CHANGE MASTER TO MASTER_HOST=&amp;#39;192.168.199.99&amp;#39;,MASTER_USER=&amp;#39;repl&amp;#39;,MASTER_PASSWORD=&amp;#39;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;,MASTER_PORT=3306,MASTER_LOG_FILE=&amp;#39;mysql-bin.000001&amp;#39;,MASTER_LOG_POS=509778,MASTER_CONNECT_RETRY=2;START SLAVE&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 以下命令在备节点执行&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 修改MASTER_HOST为主节点IP，修改MASTER_LOG_FILE和MASTER_LOG_POS为上面主节点记录的信息&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;CHANGE MASTER TO MASTER_HOST=&amp;#39;192.168.199.98&amp;#39;,MASTER_USER=&amp;#39;repl&amp;#39;,MASTER_PASSWORD=&amp;#39;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;,MASTER_PORT=3306,MASTER_LOG_FILE=&amp;#39;mysql-bin.000001&amp;#39;,MASTER_LOG_POS=2023,MASTER_CONNECT_RETRY=2;START SLAVE&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 主备都执行，验证同步状态，都输出2个 Yes 表示正常&lt;/span>
mysql -u root -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;SHOW SLAVE STATUS\G&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep Running
Slave_IO_Running: Yes
Slave_SQL_Running: Yes
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，DB 主主复制部署完成，可以测试在任一节点进行数据库操作，另一节点验证。不过对外提供服务还是需要通过 vip，不然发生切换还需要业务端切换 ip，下面配置 keepalived 对外提供服务。&lt;/p>
&lt;h3 id="部署配置-keepalived">部署配置 keepalived&lt;/h3>
&lt;p>设置相关的环境变量，根据不同的环境自行配置。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># keepalived vip 地址&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">DB_VIP&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>192.168.199.97
&lt;span style="color:#8f5902;font-style:italic"># keepalived auth toke&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">DBHA_KA_AUTH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>onecloud
&lt;span style="color:#8f5902;font-style:italic"># keepalived network interface&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">DB_NETIF&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>eth0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置 sysctl 选项&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt;/etc/sysctl.conf
&lt;/span>&lt;span style="color:#4e9a06">net.ipv4.ip_forward = 1
&lt;/span>&lt;span style="color:#4e9a06">net.ipv4.ip_nonlocal_bind = 1
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ sysctl -p
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 keepalived nc&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum install -y keepalived nc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加配置&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 请确保 virtual_router_id 不会和局域网内的其他 keepalived 集群冲突&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/keepalived/keepalived.conf
&lt;/span>&lt;span style="color:#4e9a06">global_defs {
&lt;/span>&lt;span style="color:#4e9a06"> router_id onecloud
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">vrrp_script chk_mysql {
&lt;/span>&lt;span style="color:#4e9a06"> script &amp;#34;/etc/keepalived/chk_mysql&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> interval 1
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">vrrp_instance VI_1 {
&lt;/span>&lt;span style="color:#4e9a06"> state MASTER
&lt;/span>&lt;span style="color:#4e9a06"> interface $DB_NETIF
&lt;/span>&lt;span style="color:#4e9a06"> virtual_router_id 99
&lt;/span>&lt;span style="color:#4e9a06"> priority 100
&lt;/span>&lt;span style="color:#4e9a06"> advert_int 1
&lt;/span>&lt;span style="color:#4e9a06"> nopreempt
&lt;/span>&lt;span style="color:#4e9a06"> authentication {
&lt;/span>&lt;span style="color:#4e9a06"> auth_type PASS
&lt;/span>&lt;span style="color:#4e9a06"> auth_pass $DBHA_KA_AUTH
&lt;/span>&lt;span style="color:#4e9a06"> }
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> track_script {
&lt;/span>&lt;span style="color:#4e9a06"> chk_mysql
&lt;/span>&lt;span style="color:#4e9a06"> }
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06"> virtual_ipaddress {
&lt;/span>&lt;span style="color:#4e9a06"> $DB_VIP
&lt;/span>&lt;span style="color:#4e9a06"> }
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt; /etc/keepalived/chk_mysql
&lt;/span>&lt;span style="color:#4e9a06">#!/bin/bash
&lt;/span>&lt;span style="color:#4e9a06">echo | nc 127.0.0.1 3306 &amp;amp;&amp;gt;/dev/null
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ chmod +x /etc/keepalived/chk_mysql
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 keepalived&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now keepalived
$ ip addr show &lt;span style="color:#000">$DB_NETIF&lt;/span>
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span style="color:#0000cf;font-weight:bold">1500&lt;/span> qdisc pfifo_fast state UP group default qlen &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>
link/ether 00:22:cf:40:1e:29 brd ff:ff:ff:ff:ff:ff
inet 192.168.199.99/24 brd 192.168.199.255 scope global dynamic eth0
valid_lft 100651906sec preferred_lft 100651906sec
inet 192.168.199.97/32 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::222:cfff:fe40:1e29/64 scope link
valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此，DB 高可用部署完成，任一节点的 Mariadb 或 keepalived 服务异常，或者任一节点宕机，都不影响对外服务。&lt;/p></description></item><item><title>Docs: 部署集群(已废弃)</title><link>https://www.cloudpods.org/zh/docs/setup/controlplane/</link><pubDate>Sat, 13 Apr 2019 13:01:57 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/controlplane/</guid><description>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;p>本章内容是通过手动在 CentOS 7 上一步一步部署 Cloudpods 服务，已经不建议这么做，本文只是保留作为参考，提供给想要了解部署流程的用户查看。&lt;/p>
&lt;p>实际环境中部署请根据自己使用需求参考: &lt;a href="../../quickstart/allinone">All in One 安装&lt;/a> 或者 &lt;a href="../../quickstart/ha">高可用安装&lt;/a> 部署。&lt;/p>
&lt;/div>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;p>Cloudpods 相关的组件运行在 kubernetes 之上，环境以及相关的软件依赖如下:&lt;/p>
&lt;ul>
&lt;li>操作系统: CentOS 7.6&lt;/li>
&lt;li>最低配置要求: CPU 4核, 内存 8G, 存储 150G&lt;/li>
&lt;li>虚拟机和服务使用的存储路径都在 &lt;strong>/opt&lt;/strong> 目录下，所以理想环境下建议单独给 &lt;strong>/opt&lt;/strong> 目录设置挂载点
&lt;ul>
&lt;li>比如把 /dev/sdb1 单独分区做 ext4 然后通过 /etc/fstab 挂载到 /opt 目录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>数据库: mariadb (CentOS 7自带的版本：Ver 15.1 Distrib 5.5.56-MariaDB）&lt;/li>
&lt;li>docker: ce-20.10.5&lt;/li>
&lt;li>kubernetes: v1.15.12&lt;/li>
&lt;/ul>
&lt;p>需要能访问如下网址，如果企业有外网隔离规则，则需要打开相应白名单：&lt;/p>
&lt;ul>
&lt;li>CentOS YUM网络安装源&lt;/li>
&lt;li>&lt;a href="https://iso.yunion.cn/">https://iso.yunion.cn/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://registry.cn-beijing.aliyuncs.com">https://registry.cn-beijing.aliyuncs.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://meta.yunion.cn">https://meta.yunion.cn&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://yunionmeta.oss-cn-beijing.aliyuncs.com">https://yunionmeta.oss-cn-beijing.aliyuncs.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="安装配置-mariadb">安装配置 mariadb&lt;/h3>
&lt;p>mariadb 作为服务数据持久化的数据库，可以部署在其它节点或者使用单独维护的。下面假设还没有部署 mariadb，在控制节点上安装设置 mariadb。&lt;/p>
&lt;p>为了方便运行维护，mariadb推荐打开四个参数设施：&lt;/p>
&lt;ul>
&lt;li>skip_name_resolve：取消域名解析&lt;/li>
&lt;li>expire_logs_days=30：设置binlog的超时时间为30天，超过30天的binglog自动删除&lt;/li>
&lt;li>innodb_file_per_table=ON: 设置innodb的每张表都用一个独立文件存储数据，便于后期数据清理&lt;/li>
&lt;li>max_connections=300: 设置最大连接数为300&lt;/li>
&lt;li>max_allowed_packet=20M: 设置最大数据包大小为20M&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ &lt;span style="color:#000">MYSQL_PASSWD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;your-sql-passwd&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 安装 mariadb&lt;/span>
$ yum install -y epel-release mariadb-server
$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now mariadb
$ mysqladmin -u root password &lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/my.cnf
&lt;/span>&lt;span style="color:#4e9a06">[mysqld]
&lt;/span>&lt;span style="color:#4e9a06">datadir=/var/lib/mysql
&lt;/span>&lt;span style="color:#4e9a06">socket=/var/lib/mysql/mysql.sock
&lt;/span>&lt;span style="color:#4e9a06"># Disabling symbolic-links is recommended to prevent assorted security risks
&lt;/span>&lt;span style="color:#4e9a06">symbolic-links=0
&lt;/span>&lt;span style="color:#4e9a06"># Settings user and group are ignored when systemd is used.
&lt;/span>&lt;span style="color:#4e9a06"># If you need to run mysqld under a different user or group,
&lt;/span>&lt;span style="color:#4e9a06"># customize your systemd unit file for mariadb according to the
&lt;/span>&lt;span style="color:#4e9a06"># instructions in http://fedoraproject.org/wiki/Systemd
&lt;/span>&lt;span style="color:#4e9a06"># skip domain name resolve
&lt;/span>&lt;span style="color:#4e9a06">skip_name_resolve
&lt;/span>&lt;span style="color:#4e9a06"># auto delete binlog older than 30 days
&lt;/span>&lt;span style="color:#4e9a06">expire_logs_days=30
&lt;/span>&lt;span style="color:#4e9a06">innodb_file_per_table=ON
&lt;/span>&lt;span style="color:#4e9a06">max_connections = 300
&lt;/span>&lt;span style="color:#4e9a06">max_allowed_packet=20M
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">[mysqld_safe]
&lt;/span>&lt;span style="color:#4e9a06">log-error=/var/log/mariadb/mariadb.log
&lt;/span>&lt;span style="color:#4e9a06">pid-file=/var/run/mariadb/mariadb.pid
&lt;/span>&lt;span style="color:#4e9a06">
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06"># include all files from the config directory
&lt;/span>&lt;span style="color:#4e9a06">#
&lt;/span>&lt;span style="color:#4e9a06">!includedir /etc/my.cnf.d
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ mysql -uroot -p&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -e &lt;span style="color:#4e9a06">&amp;#34;GRANT ALL ON *.* to &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;&lt;/span>&lt;span style="color:#000">$MYSQL_PASSWD&lt;/span>&lt;span style="color:#4e9a06">&amp;#39; with grant option; FLUSH PRIVILEGES;&amp;#34;&lt;/span>
$ systemctl restart mariadb
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装配置-docker">安装配置 docker&lt;/h3>
&lt;p>安装 docker&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum install -y yum-utils bash-completion
&lt;span style="color:#8f5902;font-style:italic"># 添加 yunion Cloudpods rpm 源&lt;/span>
$ yum-config-manager --add-repo https://iso.yunion.cn/yumrepo-3.8/yunion.repo
$ yum install -y docker-ce docker-ce-cli containerd.io
&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置 docker&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ mkdir -p /etc/docker
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;/etc/docker/daemon.json
&lt;/span>&lt;span style="color:#4e9a06">{
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;bridge&amp;#34;: &amp;#34;none&amp;#34;,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;iptables&amp;#34;: false,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;exec-opts&amp;#34;:
&lt;/span>&lt;span style="color:#4e9a06"> [
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;native.cgroupdriver=systemd&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> ],
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;data-root&amp;#34;: &amp;#34;/opt/docker&amp;#34;,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;live-restore&amp;#34;: true,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;log-driver&amp;#34;: &amp;#34;json-file&amp;#34;,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;log-opts&amp;#34;:
&lt;/span>&lt;span style="color:#4e9a06"> {
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;max-size&amp;#34;: &amp;#34;100m&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> },
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;registry-mirrors&amp;#34;:
&lt;/span>&lt;span style="color:#4e9a06"> [
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;https://lje6zxpk.mirror.aliyuncs.com&amp;#34;,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;https://lms7sxqp.mirror.aliyuncs.com&amp;#34;,
&lt;/span>&lt;span style="color:#4e9a06"> &amp;#34;https://registry.docker-cn.com&amp;#34;
&lt;/span>&lt;span style="color:#4e9a06"> ]
&lt;/span>&lt;span style="color:#4e9a06">}
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 docker&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now docker
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-cloudpods-依赖内核">安装 Cloudpods 依赖内核&lt;/h3>
&lt;p>这里需要安装我们编译的内核，这个内核是基于上游 CentOS 3.10.0-1160 编译的，默认添加了 nbd 模块，nbd 模块用于镜像相关的操作。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 安装内核&lt;/span>
$ yum install -y &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kernel-3.10.0-1160.6.1.el7.yn20201125 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kernel-devel-3.10.0-1160.6.1.el7.yn20201125 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kernel-headers-3.10.0-1160.6.1.el7.yn20201125
&lt;span style="color:#8f5902;font-style:italic"># 重启系统进入内核&lt;/span>
$ reboot
&lt;span style="color:#8f5902;font-style:italic"># 重启完成后，查看当前节点内核信息&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 确保为 3.10.0-1160.6.1.el7.yn20201125.x86_64&lt;/span>
$ uname -r
3.10.0-1160.6.1.el7.yn20201125.x86_64
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装配置-kubelet">安装配置 kubelet&lt;/h3>
&lt;p>从 Cloudpods rpm 的 yum 源安装 kubernetes 1.15.12，并设置 kubelet 开机自启动&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ yum install -y bridge-utils ipvsadm conntrack-tools &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> jq kubelet-1.15.12-0 kubectl-1.15.12-0 kubeadm-1.15.12-0
$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;source &amp;lt;(kubectl completion bash)&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">source&lt;/span> ~/.bashrc
$ &lt;span style="color:#204a87">source&lt;/span> /etc/profile
$ systemctl &lt;span style="color:#204a87">enable&lt;/span> kubelet
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完 kubernetes 相关的二进制后，还需要对系统做一些配置并启用 ipvs 作为 kube-proxy 内部的 service 负载均衡&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 禁用 swap&lt;/span>
$ swapoff -a
&lt;span style="color:#8f5902;font-style:italic"># 如果设置了自动挂载 swap，需要去 /etc/fstab 里面注释掉挂载 swap 那一行&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 关闭 selinux&lt;/span>
$ setenforce &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
$ sed -i &lt;span style="color:#4e9a06">&amp;#39;s/SELINUX=enforcing/SELINUX=disabled/&amp;#39;&lt;/span> /etc/selinux/config
&lt;span style="color:#8f5902;font-style:italic"># 禁用 firewalld&lt;/span>
$ systemctl stop firewalld
$ systemctl disable firewalld
&lt;span style="color:#8f5902;font-style:italic"># 禁用 NetworkManager&lt;/span>
$ systemctl stop NetworkManager
$ systemctl disable NetworkManager
$ ps -ef&lt;span style="color:#000;font-weight:bold">|&lt;/span>grep dhcp &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $2}&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>xargs &lt;span style="color:#204a87">kill&lt;/span> -9
&lt;span style="color:#8f5902;font-style:italic"># 做一些 sysctl 的配置, kubernetes 要求&lt;/span>
$ modprobe br_netfilter
$ cat &lt;span style="color:#4e9a06">&amp;lt;&amp;lt;EOF &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/span>&lt;span style="color:#4e9a06">net.bridge.bridge-nf-call-iptables=1
&lt;/span>&lt;span style="color:#4e9a06">net.bridge.bridge-nf-call-ip6tables=1
&lt;/span>&lt;span style="color:#4e9a06">net.ipv4.ip_forward=1
&lt;/span>&lt;span style="color:#4e9a06">EOF&lt;/span>
$ sysctl -p
&lt;span style="color:#8f5902;font-style:italic"># 配置并开启 ipvs&lt;/span>
$ cat &amp;lt;&amp;lt;&lt;span style="color:#4e9a06">&amp;#34;EOF&amp;#34;&lt;/span> &amp;gt; /etc/sysconfig/modules/ipvs.modules
&lt;span style="color:#8f5902;font-style:italic">#!/bin/bash&lt;/span>
&lt;span style="color:#000">ipvs_modules&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack br_netfilter&amp;#34;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> kernel_module in &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">ipvs_modules&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span>
/sbin/modinfo -F filename &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">kernel_module&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span> &amp;gt; /dev/null 2&amp;gt;&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span> &lt;span style="color:#000">$?&lt;/span> -eq &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">then&lt;/span>
/sbin/modprobe &lt;span style="color:#4e9a06">${&lt;/span>&lt;span style="color:#000">kernel_module&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">fi&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
EOF
$ chmod &lt;span style="color:#0000cf;font-weight:bold">755&lt;/span> /etc/sysconfig/modules/ipvs.modules &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> bash /etc/sysconfig/modules/ipvs.modules &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> lsmod &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep ip_vs
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="部署集群">部署集群&lt;/h2>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>如果要部署高可用集群，请先搭建负载均衡集群，参考 &lt;a href="../../setup/controlplane-ha">部署 HA 环境&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h3 id="安装部署工具">安装部署工具&lt;/h3>
&lt;p>先安装部署工具 ocadm 和云平台的命令行工具 climc:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 安装 climc 云平台命令行工具 和 ocadm 部署工具&lt;/span>
$ yum install -y yunion-climc yunion-ocadm
&lt;span style="color:#8f5902;font-style:italic"># climc 在 /opt/yunion/bin 目录下，根据自己的需要加到 bash 或者 zsh 配置文件里面&lt;/span>
$ &lt;span style="color:#204a87">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;export PATH=$PATH:/opt/yunion/bin&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">source&lt;/span> ~/.bashrc
&lt;span style="color:#8f5902;font-style:italic"># 安装必要的服务，并启动和设置为开机自启&lt;/span>
$ yum install -y yunion-executor &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> systemctl &lt;span style="color:#204a87">enable&lt;/span> --now yunion-executor
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="部署-kubernetes-集群">部署 kubernetes 集群&lt;/h3>
&lt;p>接下来会现在当前节点启动 v1.15.12 的 kubernetes 服务，然后部署 Cloudpods 控制节点相关的服务到 kubernetes 集群。&lt;/p>
&lt;p>拉取必要的 docker 镜像&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ocadm config images pull
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 ocadm 部署 kubernetes 集群&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>如果要进行高可用部署，并已经搭建好了负载均衡集群，需要在 &lt;code>ocadm init&lt;/code> 命令加上 &lt;code>--control-plane-endpoint &amp;lt;vip&amp;gt;:6443&lt;/code> 参数，告诉 kubernetes 集群前端的 LoadBalancer vip，之后生成的配置就会都用这个 vip 当做控制节点的入口。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 假设 mariadb 部署在本地，如果是使用已有的数据库，请改变对应的 ip&lt;/span>
$ &lt;span style="color:#000">MYSQL_HOST&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>ip route get &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $NF;exit}&amp;#39;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 如果是高可用部署，记得在设置 EXTRA_OPT=&amp;#39; --control-plane-endpoint 10.168.222.18:6443&amp;#39;&lt;/span>
$ &lt;span style="color:#000">EXTRA_OPT&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>
$ &lt;span style="color:#8f5902;font-style:italic">#EXTRA_OPT=&amp;#39; --control-plane-endpoint 10.168.222.18:6443&amp;#39;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 开始部署 kubernetes 以及 Cloudpods 必要的控制服务，稍等 3 分钟左右，kubernetes 集群会部署完成&lt;/span>
$ ocadm init --mysql-host &lt;span style="color:#000">$MYSQL_HOST&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --mysql-user root --mysql-password &lt;span style="color:#000">$MYSQL_PASSWD&lt;/span> &lt;span style="color:#000">$EXTRA_OPT&lt;/span>
...
Your Kubernetes and control-plane has initialized successfully!
...
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>kubernetes 高可用部署需要 3 个节点，主要是 etcd 需要至少 3 个节点组成高可用集群。如果是高可用部署，请在另外两个节点执行 &lt;code>ocadm join --control-plane &amp;lt;vip&amp;gt;:6443&lt;/code> 部署控制服务，join 的另外两个节点会自动和当前的控制节点组成高可用集群。参考: &lt;a href="../../setup/components/#%E5%8A%A0%E5%85%A5-controlplane">加入控制节点&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;p>kubernetes 集群部署完成后，通过以下命令来确保相关的 pod (容器) 都已经启动, 变成 running 的状态。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ mkdir -p &lt;span style="color:#000">$HOME&lt;/span>/.kube
$ sudo cp -i /etc/kubernetes/admin.conf &lt;span style="color:#000">$HOME&lt;/span>/.kube/config
$ sudo chown &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>id -u&lt;span style="color:#204a87;font-weight:bold">)&lt;/span>:&lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>id -g&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#000">$HOME&lt;/span>/.kube/config
$ kubectl get pods --all-namespaces
NAMESPACE NAME READY STATUS RESTARTS AGE
kube-system calico-kube-controllers-648bb4447c-57gjb 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
kube-system calico-node-j89jg 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
kube-system coredns-69845f69f6-f6wnv 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
kube-system coredns-69845f69f6-sct6n 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
kube-system etcd-lzx-ocadm-test2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h
kube-system kube-apiserver-lzx-ocadm-test2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h
kube-system kube-controller-manager-lzx-ocadm-test2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h
kube-system kube-proxy-2fwgf 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
kube-system kube-scheduler-lzx-ocadm-test2 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h
kube-system traefik-ingress-controller-qwkfb 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
local-path-storage local-path-provisioner-5978cff7b7-7h8df 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 5h1m
onecloud onecloud-operator-6d4bddb8c4-tkjkh 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 3h37m
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-cloudpods-集群">创建 Cloudpods 集群&lt;/h3>
&lt;p>当 kubernetes 集群部署完成后，就可以通过 &lt;code>ocadm cluster create&lt;/code> 创建 Cloudpods 集群，该集群由 onecloud namespace 里面 &lt;strong>onecloud-operator&lt;/strong> deployment 自动部署和维护。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 创建集群&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 如果要部署企业版的组件可以在 cluster create 的时候加上 --use-ee 参数&lt;/span>
$ ocadm cluster create --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行完 &lt;code>ocadm cluster create --wait&lt;/code> 命令后，&lt;strong>onecloud-operator&lt;/strong> 会自动创建各个服务组件对应的 pod，等待一段该命令执行完毕， 就可以通过访问 &amp;lsquo;https://本机IP:443&amp;rsquo; 登入前端界面。&lt;/p>
&lt;h3 id="创建登录用户">创建登录用户&lt;/h3>
&lt;p>当控制节点部署完成后，需要创建一个用于前端登录的用户。云平台的管理员认证信息由 &lt;code>ocadm cluster rcadmin&lt;/code> 命令可以得到 , 这些认证信息在使用 climc 控制云平台资源时会用到。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 获取连接 Cloudpods 集群的环境变量&lt;/span>
$ ocadm cluster rcadmin
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_AUTH_URL&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https://10.168.222.218:30357/v3
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_USERNAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>sysadmin
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_PASSWORD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>3hV3qAhvxck84srk
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_PROJECT_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>system
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">YUNION_INSECURE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#204a87">true&lt;/span>
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_REGION_NAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>region0
&lt;span style="color:#204a87">export&lt;/span> &lt;span style="color:#000">OS_ENDPOINT_TYPE&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>publicURL
&lt;/code>&lt;/pre>&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">提示&lt;/h4>
&lt;blockquote>
&lt;p>如果是高可用部署，这些 endpoint 的 public url 会是 vip，如果要在 kubernetes 集群外访问需要到 haproxy 节点上添加对应的 frontend 和 backend，其中frontend的端口对应 endpoint 里面的端口，backend 对应 3 个 controlplane node 的 ip 和对应端口。&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;p>创建用户&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 初始化连接集群的管理员认证信息&lt;/span>
$ &lt;span style="color:#204a87">source&lt;/span> &amp;lt;&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>ocadm cluster rcadmin&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 设置想要创建的用户名和密码&lt;/span>
$ &lt;span style="color:#000">OC_USERNAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>demo
$ &lt;span style="color:#000">OC_PASSWORD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>demo@123
&lt;span style="color:#8f5902;font-style:italic"># 创建指定的用户&lt;/span>
$ climc user-create --password &lt;span style="color:#000">$OC_PASSWORD&lt;/span> --enabled &lt;span style="color:#000">$OC_USERNAME&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 将用户加入 system 项目并赋予 admin 角色&lt;/span>
$ climc project-add-user system &lt;span style="color:#000">$OC_USERNAME&lt;/span> admin
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="访问前端">访问前端&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 获取本机 IP&lt;/span>
$ ip route get &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $NF;exit}&amp;#39;&lt;/span>
10.168.222.218
&lt;span style="color:#8f5902;font-style:italic"># 测试连通性&lt;/span>
$ curl -k https://10.168.222.218
&lt;/code>&lt;/pre>&lt;/div>&lt;p>用浏览器访问 &amp;lsquo;https://本机IP&amp;rsquo; 会跳转到 web 界面，使用 &lt;a href="../../setup/controlplane/#%E5%88%9B%E5%BB%BA%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7">创建登录用户&lt;/a> 里面指定的用户名和密码登录后，界面如下:&lt;/p>
&lt;p>&lt;img src="../images/web-login.png" alt="登录页">&lt;/p>
&lt;p>&lt;img src="../images/web-dashboard.png" alt="首页">&lt;/p>
&lt;h3 id="删除环境">删除环境&lt;/h3>
&lt;p>如果安装过程中失败，或者想清理环境，可执行以下命令删除 kubernetes 集群。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ocadm reset --force
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="后续">后续&lt;/h2>
&lt;p>如果没有意外，现在应该已经部署好了 Cloudpods on kubernetes 的集群，以下是一些后续的环节说明，可以根据自己的需要来进行额外的操作。&lt;/p>
&lt;h3 id="添加计算节点">添加计算节点&lt;/h3>
&lt;p>当控制节点搭建完成后，可以参考 &lt;a href="../../setup/host/">计算节点&lt;/a> 一节的内容，添加计算节点，组建一套私有云集群。&lt;/p>
&lt;h3 id="控制节点作为计算节点">控制节点作为计算节点&lt;/h3>
&lt;p>默认情况下 &lt;code>ocadm init&lt;/code> 创建的节点是控制节点，不会运行 onecloud 计算节点的服务。如果需要把控制节点也作为计算节点，需要执行以下步骤:&lt;/p>
&lt;ul>
&lt;li>安装计算节点需要的依赖，参考 &lt;a href="../../setup/host/#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96">&amp;ldquo;计算节点/安装依赖&amp;rdquo;&lt;/a>，这里主要是要安装我们的内核和运行虚拟机的 qemu 等软件。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 安装rpm包&lt;/span>
$ yum install -y &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> epel-release libaio jq libusb lvm2 nc ntp yunion-fetcherfs fuse fuse-devel fuse-libs &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> oniguruma pciutils spice spice-protocol sysstat tcpdump usbredir &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> yunion-qemu-2.12.1 yunion-executor ceph-common &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> kmod-openvswitch &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> openvswitch net-tools
$ systemctl &lt;span style="color:#204a87">enable&lt;/span> --now yunion-executor
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>在控制节点启用该节点作为计算节点，命令如下:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 用 kubectl get nodes 拿到当前的节点名称&lt;/span>
$ kubectl get nodes
NAME STATUS ROLES AGE
controller01 Ready master 116d
controller02 Ready master 40d
node01 Ready &amp;lt;none&amp;gt; 25d
&lt;span style="color:#8f5902;font-style:italic"># 假设我要把 controller01 和 controller02 作为计算节点&lt;/span>
$ ocadm node enable-host-agent &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --node controller01 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --node controller02
&lt;span style="color:#8f5902;font-style:italic"># 等待并查看运行在 controller01/02 上的计算节点服务&lt;/span>
$ kubectl get pods -n onecloud -o wide &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep host
default-host-7b5cr 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">218&lt;/span> 18h 192.168.222.4 controller01
default-host-ctx5s 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">218&lt;/span> 18h 192.168.222.5 controller02
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="升级组件版本">升级组件版本&lt;/h3>
&lt;p>请参考 &lt;a href="../upgrade/">升级相关&lt;/a> 进行升级。&lt;/p></description></item><item><title>Docs: 添加计算节点</title><link>https://www.cloudpods.org/zh/docs/setup/host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/host/</guid><description>
&lt;p>如果需要构建内部私有云，就需要部署计算节点(宿主机)。计算节点主要负责虚拟机、网络和存储的管理，需要安装的组件如下:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">组件&lt;/th>
&lt;th style="text-align:center">用途&lt;/th>
&lt;th style="text-align:center">安装方式&lt;/th>
&lt;th style="text-align:center">运行方式&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">host&lt;/td>
&lt;td style="text-align:center">管理 kvm 虚拟机和存储&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">docker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">host-deployer&lt;/td>
&lt;td style="text-align:center">虚拟机部署服务&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">docker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">sdnagent&lt;/td>
&lt;td style="text-align:center">管理虚拟机网络和安全组&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;td style="text-align:center">docker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">openvswitch&lt;/td>
&lt;td style="text-align:center">虚拟机网络端口和流表配置&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">systemd&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">qemu&lt;/td>
&lt;td style="text-align:center">运行虚拟机&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">kernel&lt;/td>
&lt;td style="text-align:center">Cloudpods 提供的内核&lt;/td>
&lt;td style="text-align:center">rpm&lt;/td>
&lt;td style="text-align:center">-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="环境">环境&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>操作系统: CentOS 7.x&lt;/p>
&lt;/li>
&lt;li>
&lt;p>硬件要求:&lt;/p>
&lt;ul>
&lt;li>Virtualization: CPU 要支持虚拟化，用于虚拟机 KVM 加速&lt;/li>
&lt;li>打开 iommu，VT-d: 用于 GPU 透传(不用GPU可以不开)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>网络:&lt;/p>
&lt;ul>
&lt;li>当前可用的网段: 虚拟机可以直接使用和计算节点所在的扁平网段，需要预先划分保留对应端给云平台虚拟机使用，防止被其它设备占用，最后 IP 冲突&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>虚拟机和服务使用的存储路径都在 &lt;strong>/opt&lt;/strong> 目录下，所以理想环境下建议单独给 &lt;strong>/opt&lt;/strong> 目录设置挂载点&lt;/p>
&lt;ul>
&lt;li>比如把 /dev/sdb1 单独分区做 ext4 然后通过 /etc/fstab 挂载到 /opt 目录&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>备注:&lt;/p>
&lt;ul>
&lt;li>如果是以测试为目的，可以拿一台虚拟机部署计算节点的服务，但可能无法使用 KVM 加速和 GPU 透传&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="使用-ocboot-添加对应节点">使用 ocboot 添加对应节点&lt;/h2>
&lt;p>以下操作在控制节点进行，在控制节点使用 &lt;code>ocboot add-node&lt;/code> 命令把对应计算节点添加进来。&lt;/p>
&lt;p>假设要给控制节点 10.168.26.216 添加计算节点 10.168.222.140 首先需要 ssh root 免密码登录对应的计算节点以及控制节点自身。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 将控制节点自己设置成免密登录&lt;/span>
$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@10.168.26.216
&lt;span style="color:#8f5902;font-style:italic"># 尝试免密登录控制节点是否成功&lt;/span>
$ ssh root@10.168.26.216 &lt;span style="color:#4e9a06">&amp;#34;hostname&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 将生成的 ~/.ssh/id_rsa.pub 公钥拷贝到待部署的计算机器&lt;/span>
$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@10.168.222.140
&lt;span style="color:#8f5902;font-style:italic"># 尝试免密登录待部署机器，应该不需要输入登录密码即可拿到部署机器的 hostname&lt;/span>
$ ssh root@10.168.222.140 &lt;span style="color:#4e9a06">&amp;#34;hostname&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>控制节点应该已经部署好了 docker，为了环境干净，可以直接在容器里面使用 ocboot 的添加计算节点，步骤如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 下载 ocboot 代码&lt;/span>
$ git clone https://github.com/yunionio/ocboot
$ &lt;span style="color:#204a87">cd&lt;/span> ocboot
&lt;span style="color:#8f5902;font-style:italic"># 使用 run-in-docker.sh 添加节点&lt;/span>
$ ./run-in-docker.sh add-node 10.168.26.216 10.168.222.140
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等 ocboot 容器镜像拉取完后，就会调用 ansible-playbook 把对应的计算节点加入进来。&lt;/p>
&lt;h3 id="启用计算节点宿主机">启用计算节点(宿主机)&lt;/h3>
&lt;p>等计算节点添加完成后，需要启用刚才上报的计算节点，只有启用的宿主机才能运行虚拟机。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 使用 climc 查看注册的 host 列表&lt;/span>
$ climc host-list
+--------------------------------------+-------------------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-------------------------+--------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Access_mac &lt;span style="color:#000;font-weight:bold">|&lt;/span> Access_ip &lt;span style="color:#000;font-weight:bold">|&lt;/span> Manager_URI &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> enabled &lt;span style="color:#000;font-weight:bold">|&lt;/span> host_status &lt;span style="color:#000;font-weight:bold">|&lt;/span> mem_size &lt;span style="color:#000;font-weight:bold">|&lt;/span> cpu_count &lt;span style="color:#000;font-weight:bold">|&lt;/span> node_count &lt;span style="color:#000;font-weight:bold">|&lt;/span> sn &lt;span style="color:#000;font-weight:bold">|&lt;/span> storage_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> host_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> version &lt;span style="color:#000;font-weight:bold">|&lt;/span> storage_size &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-------------------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-------------------------+--------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> 3830870e-a499-459d-89df-bb6979b5e1ff &lt;span style="color:#000;font-weight:bold">|&lt;/span> lzx-allinone-standalone &lt;span style="color:#000;font-weight:bold">|&lt;/span> 00:22:39:4c:6c:e9 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 10.168.222.140 &lt;span style="color:#000;font-weight:bold">|&lt;/span> http://10.168.222.140:8885 &lt;span style="color:#000;font-weight:bold">|&lt;/span> running &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> online &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8192&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> Not Specified &lt;span style="color:#000;font-weight:bold">|&lt;/span> rotate &lt;span style="color:#000;font-weight:bold">|&lt;/span> hypervisor &lt;span style="color:#000;font-weight:bold">|&lt;/span> master&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>7ab047419092301&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">50141&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-------------------------+-------------------+----------------+----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+-------------------------+--------------+
*** Total: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Pages: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Limit: &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> Offset: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Page: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> ***
&lt;span style="color:#8f5902;font-style:italic"># 启动 host&lt;/span>
$ climc host-enable lzx-allinone-standalone
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建虚拟机测试">创建虚拟机测试&lt;/h2>
&lt;h3 id="上传-cirrors-测试镜像">上传 cirrors 测试镜像&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 下载 cirros 测试镜像&lt;/span>
$ wget https://iso.yunion.cn/yumrepo-2.10/images/cirros-0.4.0-x86_64-disk.qcow2
&lt;span style="color:#8f5902;font-style:italic"># 将镜像上传到 glance&lt;/span>
$ climc image-upload --format qcow2 --os-type Linux --min-disk &lt;span style="color:#0000cf;font-weight:bold">10240&lt;/span> cirros-0.4.0-x86_64-disk.qcow2 ./cirros-0.4.0-x86_64-disk.qcow2
&lt;span style="color:#8f5902;font-style:italic"># 查看上传的镜像&lt;/span>
$ climc image-list
+--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Disk_format &lt;span style="color:#000;font-weight:bold">|&lt;/span> Size &lt;span style="color:#000;font-weight:bold">|&lt;/span> Is_public &lt;span style="color:#000;font-weight:bold">|&lt;/span> Min_disk &lt;span style="color:#000;font-weight:bold">|&lt;/span> Min_ram &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> Checksum &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> 63f6f2af-4db2-4e30-85f5-0ad3baa27bd9 &lt;span style="color:#000;font-weight:bold">|&lt;/span> cirros-0.4.0-x86_64-disk.qcow2 &lt;span style="color:#000;font-weight:bold">|&lt;/span> qcow2 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">22806528&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">30720&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> active &lt;span style="color:#000;font-weight:bold">|&lt;/span> 76dc07d1a730a92d0db7fb2d3c305ecd &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+--------------------------------+-------------+----------+-----------+----------+---------+--------+----------------------------------+
&lt;span style="color:#8f5902;font-style:italic"># 如果使用虚拟机作为计算节点，存储可能不大，可以把镜像的默认大小30g调整到10g&lt;/span>
$ climc image-update --min-disk &lt;span style="color:#0000cf;font-weight:bold">10240&lt;/span> cirros-0.4.0-x86_64-disk.qcow2
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建测试网络">创建测试网络&lt;/h3>
&lt;p>下面是随机创建了一个主机间不可达的网络用于测试，如果有划分好的扁平二层可用网络，可以直接拿来给虚拟机使用。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc network-create --gateway 10.20.30.1 --server-type guest bcast0 vnet0 10.20.30.2 10.20.30.254 &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>
$ climc network-public vnet0
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建虚拟机">创建虚拟机&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 创建虚拟机 testvm01，512M内存, 1个CPU, 系统盘 10g, 第二块磁盘 5g 格式化为 ext4 并挂载到 /opt 的虚拟机&lt;/span>
$ climc server-create --auto-start --allow-delete &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --disk cirros-0.4.0-x86_64-disk.qcow2:10g --disk 5g:ext4:/opt &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --net vnet0 --ncpu &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> --mem-spec 512M testvm01
&lt;span style="color:#8f5902;font-style:italic"># 查看创建的虚拟机，1分钟后应该会变为 running 状态&lt;/span>
$ climc server-list --details
+--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-------------------------+--------+-----------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Billing_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> IPs &lt;span style="color:#000;font-weight:bold">|&lt;/span> Disk &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> vcpu_count &lt;span style="color:#000;font-weight:bold">|&lt;/span> vmem_size &lt;span style="color:#000;font-weight:bold">|&lt;/span> Secgroup &lt;span style="color:#000;font-weight:bold">|&lt;/span> Created_at &lt;span style="color:#000;font-weight:bold">|&lt;/span> Hypervisor &lt;span style="color:#000;font-weight:bold">|&lt;/span> os_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> Host &lt;span style="color:#000;font-weight:bold">|&lt;/span> Tenant &lt;span style="color:#000;font-weight:bold">|&lt;/span> is_system &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-------------------------+--------+-----------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> bcda7d18-decc-4b5f-8654-2d201a84d1fb &lt;span style="color:#000;font-weight:bold">|&lt;/span> testvm01 &lt;span style="color:#000;font-weight:bold">|&lt;/span> postpaid &lt;span style="color:#000;font-weight:bold">|&lt;/span> 10.20.30.254 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">35840&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> running &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">512&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> Default &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2019-09-23T05:08:49.000000Z &lt;span style="color:#000;font-weight:bold">|&lt;/span> kvm &lt;span style="color:#000;font-weight:bold">|&lt;/span> Linux &lt;span style="color:#000;font-weight:bold">|&lt;/span> lzx-allinone-standalone &lt;span style="color:#000;font-weight:bold">|&lt;/span> system &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+----------+--------------+--------------+-------+---------+------------+-----------+----------+-----------------------------+------------+---------+-------------------------+--------+-----------+
*** Total: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Pages: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Limit: &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> Offset: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Page: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> ***
&lt;span style="color:#8f5902;font-style:italic"># 获取虚拟机登录信息&lt;/span>
$ climc server-logininfo testvm01
+-----------+------------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> Field &lt;span style="color:#000;font-weight:bold">|&lt;/span> Value &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+-----------+------------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> login_key &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#000">49wqh5OWGW3jSr1A8RfrMoH69iRRECzaMZITBA&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> password &lt;span style="color:#000;font-weight:bold">|&lt;/span> zS27FwwUFr96 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> updated &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2019-09-23T05:11:29.306403Z &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> username &lt;span style="color:#000;font-weight:bold">|&lt;/span> root &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+-----------+------------------------------------------+
&lt;span style="color:#8f5902;font-style:italic"># 在计算节点联通测试网络(如果你是直接用的二层网络，应该能直接 ping 通虚拟机的 ip 了，不需要做这一步)&lt;/span>
$ ip address add 10.20.30.1/24 dev br0
&lt;span style="color:#8f5902;font-style:italic"># 用之前 server-logininfo 命令获取的用户名密码，直接登录到虚拟机里面&lt;/span>
$ ssh root@10.20.30.254
PING 10.20.30.254 &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>10.20.30.254&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> 56&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>84&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> bytes of data.
&lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> bytes from 10.20.30.254: &lt;span style="color:#000">icmp_seq&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000">ttl&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">64&lt;/span> &lt;span style="color:#000">time&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>1.31 ms
&lt;span style="color:#8f5902;font-style:italic"># 如果网络不通，也可以通过 vnc 的方式打开虚拟机的 tty 登录界面，操作如下&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 打开 vnc 链接，用浏览器打开下面的链接&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 打开 vnc 链接时会出现不安全认证，导致 websocket 无法握手，需要在浏览器信任 webconsole server 对应的 endpoint&lt;/span>
$ climc endpoint-list --details &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep webconsole &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep public
&lt;span style="color:#000;font-weight:bold">|&lt;/span> 3da1e476aa7b4ff68e206754aed72d8f &lt;span style="color:#000;font-weight:bold">|&lt;/span> region0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 16120e8f3eec46dc86c59b3e426b0502 &lt;span style="color:#000;font-weight:bold">|&lt;/span> webconsole &lt;span style="color:#000;font-weight:bold">|&lt;/span> webconsole &lt;span style="color:#000;font-weight:bold">|&lt;/span> https://10.168.222.218:8899 &lt;span style="color:#000;font-weight:bold">|&lt;/span> public &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">true&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 然后用浏览器访问下 https://10.168.222.218:8899 , 信任该链接即可&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 在通过 webconsole-server 命令获取 vnc web 界面的链接地址，然后用浏览器打开该地址&lt;/span>
$ climc webconsole-server testvm01
https://console.yunion.cn/web-console?access_token&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>FI-VXQSAonhzfSnxVTKCCbwHinp7swlRkmi-4p6s-4OfZpg6TG9YhWuwbHEUA1D7XoKu_w%3D%3D&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">api_server&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>https%3A%2F%2F10.168.222.216%3A8899&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">password&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>65xB2kaE&lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span>&lt;span style="color:#000">protocol&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>vnc
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 下线计算节点</title><link>https://www.cloudpods.org/zh/docs/setup/removehost/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/removehost/</guid><description>
&lt;p>如果需要将一个计算节点（宿主机）从私有云下线，需要执行以下步骤确保一个计算节点干净下线。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>将该宿主机上的虚拟机全部迁移走。确保该宿主机上没有虚拟机，该宿主机上的本地存储没有磁盘&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除宿主机记录，可以在Web前端操作，或者在控制节点执行 climc 命令&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">climc host-delete &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：如果删除宿主机记录失败，可能的原因是宿主机上还有未清理的虚拟机，或者宿主机的本地存储有未清理的磁盘。发生这个情况时，可以通过 climc 容器的 clean_host.sh 脚本自动清理该宿主机上残留的虚拟机和本地磁盘，并且删除宿主机的数据库记录&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl -n onecloud &lt;span style="color:#204a87">exec&lt;/span> -it default-climc-xxxxxxxx /bin/bash &lt;span style="color:#8f5902;font-style:italic"># 进入climc容器执行如下命令&lt;/span>
&lt;span style="color:#204a87">cd&lt;/span> /opt/yunion/scripts/tools/
clean_host.sh &amp;lt;host_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>删除该节点在ovn中的chassis记录&lt;/li>
&lt;/ol>
&lt;p>首先，停止该宿主机上的openvswitch服务，清理 /etc/openvswitch 目录：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">systemctl stop openvswitch
rm -fr /etc/openvswitch/*
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其次，在控制节点执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl -n onecloude &lt;span style="color:#204a87">exec&lt;/span> -it default-ovn-north-xxxxx /bin/sh &lt;span style="color:#8f5902;font-style:italic"># 进入ovn-northd容器执行以下命令&lt;/span>
/ &lt;span style="color:#8f5902;font-style:italic"># ovn-sbctl show # 找到该宿主机对应的chassis id，通过hostname和ip确认&lt;/span>
...
Chassis &lt;span style="color:#4e9a06">&amp;#34;e6268b2e-4311-4f6d-a6e2-ddd09f49beef&amp;#34;&lt;/span>
hostname: taishan
Encap geneve
ip: &lt;span style="color:#4e9a06">&amp;#34;192.168.222.60&amp;#34;&lt;/span>
options: &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#000">csum&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;true&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
...
/ &lt;span style="color:#8f5902;font-style:italic"># ovn-sbctl chassis-del &amp;lt;chassis_id&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>在该宿主机上清理kubelet环境，在该宿主机上执行：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubeadm reset -f
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>删除该宿主机对应的k8s节点信息，在控制节点执行：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">kubectl get nodes &lt;span style="color:#8f5902;font-style:italic"># 查找该节点的k8s node名称&lt;/span>
kubectl delete node &amp;lt;node_name&amp;gt;
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 物理机管理服务</title><link>https://www.cloudpods.org/zh/docs/setup/baremetal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/baremetal/</guid><description>
&lt;p>当平台部署成功后，需要选择部署环境中的一个 node 来部署 baremetal-agent 服务。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
目前只能指定一个 node 来部署运行 baremetal-agent 服务，因为 baremetal-agent 服务是有状态的，不能多副本跨节点运行。
&lt;/div>
&lt;h2 id="启用-baremetal-agent">启用 baremetal-agent&lt;/h2>
&lt;p>在通过 pxe 引导流程中，baremetal-agent 只会处理来自 dhcp relay 服务器的请求, 所以你需要事先在交换机配置 dhcp relay 或者使用 Cloudpods host 服务的 dhcp relay 功能。&lt;/p>
&lt;h3 id="如何配置-host-服务-启用-dhcp-relay">如何配置 host 服务 启用 dhcp relay&lt;/h3>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
如果在交换机上配置了 dhcp relay，则不需要在这里配置计算节点的 dhcp_relay 了，可以跳过这一步。
&lt;/div>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 登录到已经部署好计算节点的服务器上修改 /etc/yunion/host.conf，添加 dhcp_relay 配置项：&lt;/span>
dhcp_relay:
- 10.168.222.150 &lt;span style="color:#8f5902;font-style:italic"># baremetal agent dhcp服务监听地址&lt;/span>
- &lt;span style="color:#0000cf;font-weight:bold">67&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># baremetal agent dhcp服务监听端口&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 然后重启host服务&lt;/span>
$ kubectl get pods -n onecloud -o wide &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep host
default-host-p6d8h 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 78m 10.168.222.189 k8s-dev1 &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
default-host-xdc7x 2/2 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 78m 10.168.222.150 k8s-dev2 &amp;lt;none&amp;gt; &amp;lt;none&amp;gt;
&lt;span style="color:#8f5902;font-style:italic"># 找到对应的 pod 删除等待 host 服务自动重启&lt;/span>
$ kubectl delete pods -n onecloud default-host-xdc7x
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启用-baremetal-agent-1">启用 baremetal-agent&lt;/h3>
&lt;p>然后选择 node 启用 baremetal-agent。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># $listen_interface 指的是 baremetal-agent 监听的网卡名称&lt;/span>
$ ocadm baremetal &lt;span style="color:#204a87">enable&lt;/span> --node &lt;span style="color:#000">$node_name&lt;/span> --listen-interface &lt;span style="color:#000">$listen_interface&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 观察 baremetal agent pod 状态查看是否启动成功&lt;/span>
$ watch &lt;span style="color:#4e9a06">&amp;#34;kubectl get pods -n onecloud | grep baremetal&amp;#34;&lt;/span>
default-baremetal-agent-7c84996c9b-hhllw 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 3m10s
&lt;span style="color:#8f5902;font-style:italic"># 启动成功确认 baremetal-agent 注册到控制节点&lt;/span>
$ climc agent-list
+--------------------------------------+--------------------------+----------------+-----------------------------+---------+------------+------------------------------------------+--------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Access_ip &lt;span style="color:#000;font-weight:bold">|&lt;/span> Manager_URI &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> agent_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> version &lt;span style="color:#000;font-weight:bold">|&lt;/span> zone_id &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+--------------------------+----------------+-----------------------------+---------+------------+------------------------------------------+--------------------------------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> f3c2c671-c41d-4f30-8d04-e022b49bb9b5 &lt;span style="color:#000;font-weight:bold">|&lt;/span> baremetal-10.168.222.150 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 10.168.222.150 &lt;span style="color:#000;font-weight:bold">|&lt;/span> https://10.168.222.150:8879 &lt;span style="color:#000;font-weight:bold">|&lt;/span> enabled &lt;span style="color:#000;font-weight:bold">|&lt;/span> baremetal &lt;span style="color:#000;font-weight:bold">|&lt;/span> remotes/origin/master&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>5e415506120011509&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> 6230b485-2e54-480e-8284-33360b8202a8 &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+--------------------------+----------------+-----------------------------+---------+------------+------------------------------------------+--------------------------------------+
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署完成后可以参考 &lt;a href="../../onpremise/baremetal">&amp;ldquo;私有云/物理机&amp;rdquo;&lt;/a> 来进行对物理机的注册管理。&lt;/p>
&lt;h2 id="禁用-baremetal-agent">禁用 baremetal-agent&lt;/h2>
&lt;p>可以在启用 baremetal-agent 的节点中选择节点禁止 baremetal-agent 调度到该节点。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ocadm baremetal disable --node &lt;span style="color:#000">$node_name&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 切换到企业版/开源版</title><link>https://www.cloudpods.org/zh/docs/setup/ce-ee-switch/</link><pubDate>Wed, 12 Feb 2020 12:55:46 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/ce-ee-switch/</guid><description>
&lt;p>默认情况下部署好的版本是 &lt;strong>开源版本(CE: Community Edition)&lt;/strong>，可以使用 &lt;code>ocadm cluster update&lt;/code> 命令切换成 &lt;strong>企业版本(EE: Enterprise Edition)&lt;/strong>。&lt;/p>
&lt;h2 id="切换操作">切换操作&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 切换到企业版&lt;/span>
$ ocadm cluster update --use-ee --wait
&lt;span style="color:#8f5902;font-style:italic"># 切换到开源版的 web 前端&lt;/span>
$ ocadm cluster update --use-ce --wait
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ocadm cluster update --use-ee/--use-ce&lt;/code> 命令会更新替换当前的 default-web deployment&lt;/p>
&lt;p>待所有pod启动后，由于开源版和企业版的前端分别依赖不同的 default-web configmap，直接切换过去会导致 default-web configmap 没有更新，web前端无法访问，因为需要删除web服务的nginx configmap，并重启 web 服务。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 删除 default-web 的 configmap 文件&lt;/span>
$ kubectl delete configmap -n onecloud default-web
&lt;span style="color:#8f5902;font-style:italic"># 重启 default-web 服务&lt;/span>
$ kubectl rollout restart deployment -n onecloud default-web
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 升级内核</title><link>https://www.cloudpods.org/zh/docs/setup/%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/</guid><description>
&lt;h2 id="cloudpods内核从yn20191203升级yn20201125">cloudpods内核从yn20191203升级yn20201125&lt;/h2>
&lt;p>1、查看内核版本&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@yunion ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># uname -r&lt;/span>
3.10.0-1062.4.3.el7.yn20191203.x86_64
&lt;/code>&lt;/pre>&lt;/div>&lt;p>2、升级内核&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@yunion ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># yum install -y kernel-3.10.0-1160.6.1.el7.yn20201125 kernel-devel-3.10.0-1160.6.1.el7.yn20201125 kernel-headers-3.10.0-1160.6.1.el7.yn20201125&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@yunion ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># awk -F\&amp;#39; &amp;#39;$1==&amp;#34;menuentry &amp;#34; {print i++ &amp;#34; : &amp;#34; $2}&amp;#39; /etc/grub2.cfg&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> : CentOS Linux &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>3.10.0-1160.6.1.el7.yn20201125.x86_64&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Core&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> : CentOS Linux &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>3.10.0-1062.4.3.el7.yn20191203.x86_64&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Core&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> : CentOS Linux &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>3.10.0-957.12.1.el7.x86_64&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Core&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> : CentOS Linux &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>0-rescue-c022f8e6249f48fc92f7743f5f6290c9&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>Core&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>3、切换新内核&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@yunion ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># vim /etc/default/grub # 把GRUB_DEFAULT改为新内核的序号，GRUB_DEFAULT=0&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@yunion ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># grub2-mkconfig -o /boot/grub2/grub.cfg&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@yunion ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># reboot&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>4、查看新内核版本&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>root@yunion ~&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>&lt;span style="color:#8f5902;font-style:italic"># uname -r&lt;/span>
3.10.0-1160.6.1.el7.yn20201125.x86_64
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 升级相关</title><link>https://www.cloudpods.org/zh/docs/setup/upgrade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/upgrade/</guid><description>
&lt;p>本文介绍从 v3.7.x 升级到 v3.8.x 的步骤以及注意事项。&lt;/p>
&lt;p>版本升级建议从相邻的版本升级，比如从 v3.2.x 升级到 v3.7.x 需要以下的步骤：&lt;/p>
&lt;ol>
&lt;li>v3.2.x =&amp;gt; v3.3.x&lt;/li>
&lt;li>v3.3.x =&amp;gt; v3.4.x&lt;/li>
&lt;li>v3.4.x =&amp;gt; v3.6.x&lt;/li>
&lt;li>v3.6.x =&amp;gt; v3.7.x&lt;/li>
&lt;/ol>
&lt;p>直接跨多个版本升级可能会出现问题，建议参考以下的内容选择升级步骤:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.cloudpods.org/v3.2/docs/setup/upgrade">v3.1.x 升级到 v3.2.x&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cloudpods.org/v3.3/docs/setup/upgrade">v3.2.x 升级到 v3.3.x&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cloudpods.org/v3.4/docs/setup/upgrade">v3.3.x 升级到 v3.4.x&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cloudpods.org/v3.6/zh/docs/setup/upgrade">v3.4.x 升级到 v3.6.x&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.cloudpods.org/v3.7/zh/docs/setup/upgrade">v3.6.x 升级到 v3.7.x&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>总体来说，升级的步骤如下:&lt;/p>
&lt;p>使用我们编写的 &lt;a href="https://github.com/yunionio/ocboot">ocboot&lt;/a> 工具进行升级，这个工具主要是调用 ansible 来升级集群里面的所有节点。&lt;/p>
&lt;ol>
&lt;li>使用 git 拉取最新的 &lt;a href="https://github.com/yunionio/ocboot">ocboot&lt;/a> 代码，切换到 release/3.8 分支&lt;/li>
&lt;li>使用 &lt;a href="https://github.com/yunionio/ocboot">ocboot&lt;/a> 进行大版本升级&lt;/li>
&lt;/ol>
&lt;h2 id="查看当前版本">查看当前版本&lt;/h2>
&lt;p>可以使用 kubectl 查看当前集群的版本&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 使用 kubectl 获得当前集群的版本为 v3.7.5&lt;/span>
$ kubectl -n onecloud get onecloudclusters default -o&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{.spec.version}&amp;#39;&lt;/span>
v3.7.5
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="拉取-ocboot-工具">拉取 ocboot 工具&lt;/h2>
&lt;p>如果本地已经有 ocboot 工具可以跳过此步，只用把代码更新到对应的分支。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 本地安装 ansible&lt;/span>
$ yum install -y ansible python-paramiko
&lt;span style="color:#8f5902;font-style:italic"># 下载 ocboot 工具到本地&lt;/span>
$ git clone -b release/3.8 https://github.com/yunionio/ocboot &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> ./ocboot
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="更新-ocboot-代码">更新 ocboot 代码&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git checkout release/3.8
$ git pull
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="更新-cloudpods-服务">更新 Cloudpods 服务&lt;/h2>
&lt;p>更新服务的原理是通过本机 ssh 免密码远程登录到集群的第一个控制节点，获取所有节点的信息后，然后通过 ansible 执行 playbook 更新，所以有以下要求：&lt;/p>
&lt;ol>
&lt;li>本机能够 ssh 远程登录 PRIMARY_MASTER_HOST&lt;/li>
&lt;li>PRIMARY_MASTER_HOST 能够 ssh 免密码登录集群中的其它节点&lt;/li>
&lt;/ol>
&lt;p>如果没有设置免密码登录，请使用 &lt;em>ssh-copy-id -i ~/.ssh/id_rsa.pub root@PRIMARY_MASTER_HOST&lt;/em> 命令把公钥下发到自己环境对应的节点。&lt;/p>
&lt;p>升级的版本号可以到 &lt;a href="../../changelog/release-3.8/">CHANGELOG release/3.8 页面&lt;/a> 查询。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 使用 ocboot 相关服务到 v3.8.6 版本&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 该步骤会因为拉取 docker 镜像等待较长时间，请耐心等待&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># PRIMARY_MASTER_HOST 是指部署集群的第一个节点的 ip 地址&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 需要本机能够使用 ssh 密钥登录上去&lt;/span>
$ ./ocboot.py upgrade &amp;lt;PRIMARY_MASTER_HOST&amp;gt; v3.8.12
&lt;span style="color:#8f5902;font-style:italic"># 另外可以使用 `./ocboot.py upgrade --help` 查看其它可选参数&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 比如:&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># --user 可以指定其它 ssh 用户&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># --port 指定 ssh 端口&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># --key-file 指定另外的 ssh private key&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># --as-bastion 可以让 PRIMARY_MASTER_HOST 作为堡垒机部署在内网的宿主机&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 另外可以在升级的过程中可以登录到 PRIMARY_MASTER_HOST， 使用 kubectl 查看对应 pods 的升级情况&lt;/span>
$ kubectl get pods -n onecloud --watch
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="降级相关">降级相关&lt;/h2>
&lt;p>如果升级后遇到功能不符合预期或者 bug 之类的问题，可以通过下面的命令降级回滚。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;ul>
&lt;li>一般小版本降级没有问题，比如从 v3.8.12 降级到 v3.8.2&lt;/li>
&lt;li>跨版本降级可能会有问题，比如从 v3.8.12 降级到 v3.6.8&lt;/li>
&lt;/ul>
&lt;p>如果遇到问题请到 &lt;a href="https://github.com/yunionio/cloudpods/issues">GitHub 提 issue&lt;/a> 或者 &lt;a href="https://www.cloudpods.org/zh/docs/contact">联系我们&lt;/a> 获取帮助。
&lt;/div>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 降级的原理是修改各个服务的 image version&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 比如现在的版本是 v3.8.12，然后想要降级到 v3.7.8&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 在第一个控制节点执行如下命令降级会 v3.7.8&lt;/span>
$ /opt/yunion/bin/ocadm cluster update --version v3.7.8 --wait
&lt;span style="color:#8f5902;font-style:italic"># 降级会重新拉取新的镜像，可以再开一个窗口&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 使用下面的命令查看每个 pod 的更新情况&lt;/span>
$ kubectl -n onecloud get pods -w
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: ARM(AArch64) 部署</title><link>https://www.cloudpods.org/zh/docs/setup/host-aarch64/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/host-aarch64/</guid><description>
&lt;h2 id="简介">简介&lt;/h2>
&lt;p>从 v3.6.10 版本开始，可以将”Cloudpods“部署到 ARM(AArch64) 架构的机器上，目前我们适配的 Linux 发行版是 &lt;a href="https://www.debian.org/releases/stable/arm64/">Debian 10(buster)&lt;/a> 和 &lt;a href="https://www.chinauos.com/">统信 UOS&lt;/a> 。&lt;/p>
&lt;p>因为服务是容器化运行在 Kubernetes 之上的，为了在 ARM 架构的机器上运行容器，我们使用了 &lt;a href="https://github.com/docker/buildx/">docker buildx&lt;/a> 和交叉编译的技术编译打包了同时支持 x86_64 和 arm64 的统一容器镜像。这样的可以让 Kubernetes 屏蔽 CPU 架构的差异性，我们制作的支持多架构的容器镜像可以在不同架构的机器上运行服务，实现 X86 和 ARM 机器混合部署的效果。&lt;/p>
&lt;h2 id="部署">部署&lt;/h2>
&lt;p>部署方式和原来的 X86 部署并没有太大差别，唯一的区别是我们 X86 上使用的 Linux 发行版是 CentOS 7 ，但在 ARM 架构的机器上需要安装 &lt;a href="https://www.debian.org/releases/stable/arm64/">Debian 10(buster)&lt;/a> 或者 &lt;a href="https://www.chinauos.com/">统信 UOS&lt;/a> 发行版。其它部署方式是一致的，使用我们编写的 &lt;a href="https://github.com/yunionio/ocboot">https://github.com/yunionio/ocboot&lt;/a> 部署工具来统一部署，这个工具里面包含了在 Debian 和 UOS 上部署的 ansible playbook 。&lt;/p>
&lt;h3 id="前提条件">前提条件&lt;/h3>
&lt;ul>
&lt;li>ARM 机器必须提前安装好 Debian 10 或者 UOS 操作系统&lt;/li>
&lt;li>ARM 机器能够访问公网&lt;/li>
&lt;li>ARM 机器开启 ssh 服务，保证运行 ocboot 的节点能够免密登录待部署的 ARM 机器&lt;/li>
&lt;/ul>
&lt;h3 id="单节点-all-in-one-部署">单节点 All in One 部署&lt;/h3>
&lt;p>单节点 All in One 部署是指把整个”Cloudpods“全部部署到一个节点，ARM 的部署和 X86 的部署没有任何区别，准备好环境后，直接参考 &lt;a href="../../quickstart/allinone">All in One 安装&lt;/a> 的部署流程即可。&lt;/p>
&lt;h3 id="多节点混合部署">多节点混合部署&lt;/h3>
&lt;p>多节点部署请先参考 &lt;a href="../../quickstart/nodes">多节点安装&lt;/a> 了解多节点安装准备工作和配置。接下来以一台 X86 和一台 ARM 机器演示混合部署的流程。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>架构&lt;/th>
&lt;th>操作系统&lt;/th>
&lt;th>IP&lt;/th>
&lt;th>登录用户&lt;/th>
&lt;th>角色&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>X86_64&lt;/td>
&lt;td>CentOS 7&lt;/td>
&lt;td>10.127.40.252&lt;/td>
&lt;td>root&lt;/td>
&lt;td>mariadb_node &amp;amp; primary_master_node&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ARM64&lt;/td>
&lt;td>Debian 10&lt;/td>
&lt;td>10.127.100.8&lt;/td>
&lt;td>root&lt;/td>
&lt;td>worker_nodes&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>编写如下部署配置:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 编写配置&lt;/span>
$ vim ./config-hybrid.yml
&lt;span style="color:#8f5902;font-style:italic"># mariadb_node 表示要在 10.127.40.252 这台节点上部署 mariadb 数据库&lt;/span>
mariadb_node:
hostname: 10.127.40.252
user: root
db_user: root
db_password: your-sql-password
&lt;span style="color:#8f5902;font-style:italic"># primary_master_node 表示将 10.127.40.252 作为第一个部署的 master 节点&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 上面会运行Cloudpods必要的控制服务&lt;/span>
primary_master_node:
onecloud_version: v3.7.0
hostname: 10.127.40.252
user: root
db_host: 10.127.40.252
db_user: root
db_password: your-sql-password
controlplane_host: 10.127.40.252
controlplane_port: &lt;span style="color:#4e9a06">&amp;#34;6443&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># onecloud 登录用户&lt;/span>
onecloud_user: admin
&lt;span style="color:#8f5902;font-style:italic"># onecloud 登录用户密码&lt;/span>
onecloud_user_password: admin@123
&lt;span style="color:#8f5902;font-style:italic"># as_host 表示将这个 master 节点作为私有云计算节点&lt;/span>
as_host: &lt;span style="color:#204a87">true&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># worker_nodes 表示在 10.127.100.8 上部署内置私有云计算服务&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 同时会将 worker_nodes 角色的节点作为私有云计算节点&lt;/span>
worker_nodes:
hosts:
&lt;span style="color:#8f5902;font-style:italic"># 如果有多台节点，可以在这里按照 YAML 数组的格式填写多个节点的 IP&lt;/span>
- hostname: 10.127.100.8
user: root
controlplane_host: 10.127.40.252
controlplane_port: &lt;span style="color:#4e9a06">&amp;#34;6443&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 ocboot 安装 config-hybrid.yml 配置部署:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ./run.py ./config-hybrid.yml
....
&lt;span style="color:#8f5902;font-style:italic"># 部署完成后会有如下输出，表示运行成功&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 浏览器打开 https://10.127.40.252&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 使用 admin/admin@123 用户密码登录就能访问前端界面&lt;/span>
Initialized successfully!
Web page: https://10.127.40.252
User: admin
Password: admin@123
&lt;/code>&lt;/pre>&lt;/div>&lt;p>部署完成后，登入前端就能发现混合部署的两台 X86 和 ARM 的宿主机，截图如下，aarch64 和 x86_64 分别对应 ARM64 和 X86_64 的 CPU 架构宿主机。&lt;/p>
&lt;p>&lt;img src="../images/host-hybrid-list.png" alt="宿主机前端列表">&lt;/p>
&lt;h2 id="创建-arm-虚拟机">创建 ARM 虚拟机&lt;/h2>
&lt;p>基于 ARM 的机器部署完服务后，请先阅读 &lt;a href="../../quickstart/allinone/#faq">All in One/FAQ&lt;/a> 和 &lt;a href="../../quickstart/allinone/#%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA">All in One/创建第一台虚拟机&lt;/a> 了解创建虚拟机需要创建网络、启用宿主机和导入镜像等步骤。&lt;/p>
&lt;h3 id="导入镜像">导入镜像&lt;/h3>
&lt;p>对于 ARM(AArch64) 虚拟机来说需要使用对应的 ARM(AArch64) 虚拟机镜像，这里分别导入 ARM64 和 X86_64 的 CentOS 7 虚拟机镜像进行测试。&lt;/p>
&lt;ul>
&lt;li>ARM64 镜像 CentOS-7-aarch64-GenericCloud-2003.qcow2: &lt;a href="https://cloud.centos.org/centos/7/images/CentOS-7-aarch64-GenericCloud-2003.qcow2">https://cloud.centos.org/centos/7/images/CentOS-7-aarch64-GenericCloud-2003.qcow2&lt;/a>&lt;/li>
&lt;li>X86_64 镜像 CentOS-7-x86_64-GenericCloud-1503.qcow2: &lt;a href="https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-1503.qcow2">https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-1503.qcow2&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>导入镜像后的截图如下:&lt;/p>
&lt;p>&lt;img src="../images/image-hybrid-list.png" alt="镜像列表">&lt;/p>
&lt;h3 id="创建虚拟机">创建虚拟机&lt;/h3>
&lt;p>镜像和对应的网路准备完成后，就可以到虚拟机创建界面根据需要选择不同 CPU 架构创建虚拟机。创建界面截图如下：&lt;/p>
&lt;p>&lt;img src="../images/vm-hybrid-create.png" alt="虚拟机创建页面">&lt;/p>
&lt;p>分别创建 aarch64 和 x86_64 架构的虚拟机后，可以在虚拟机的列表页面看到每台虚拟机的 CPU 架构，截图如下:&lt;/p>
&lt;p>&lt;img src="../images/vm-hybrid-list.png" alt="虚拟机列表页面">&lt;/p></description></item><item><title>Docs: 更换前端证书</title><link>https://www.cloudpods.org/zh/docs/setup/config-ssl-certs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/config-ssl-certs/</guid><description>
&lt;p>默认部署完成后，访问前端界面，浏览器会提示不安全的 SSL 连接，原因是前端默认使用的是自签发的证书。本文介绍如何使用自定义证书替换掉前端默认的证书。&lt;/p>
&lt;h2 id="操作步骤">操作步骤&lt;/h2>
&lt;p>假设已经准备好的证书文件为：&lt;code>cert.pem&lt;/code> 和 &lt;code>cert.key&lt;/code>，域名为 &lt;code>foo.bar.com&lt;/code> 。&lt;/p>
&lt;h3 id="1-将证书导入-kubernetes-集群">1. 将证书导入 kubernetes 集群&lt;/h3>
&lt;p>kubernetes 使用 secret 这种资源保存证书内容，然后前端服务使用 ingress 引用对应的证书，提供 HTTPS 连接。为了使用自定证书，需要先把证书保存到集群。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 创建证书&lt;/span>
$ kubectl create secret tls yunion-io-web-secret --key cert.key --cert cert.pem -n onecloud
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-编辑-ingress-规则">2. 编辑 ingress 规则&lt;/h3>
&lt;p>编辑 &lt;code>default-web&lt;/code> ingress 规则，引用刚才创建的 yunion-io-web-secret 证书。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl edit ingress -n onecloud default-web
...
tls:
&lt;span style="color:#8f5902;font-style:italic"># 修改这个 secretName 为 yunion-io-web-secret&lt;/span>
- secretName: yunion-io-web-secret
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="3-重启-ingress-controller">3. 重启 ingress controller&lt;/h3>
&lt;p>设置完 default-web ingress 规则后，可以重启下 ingress controller 服务，让证书生效。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pods -n kube-system &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep traefik &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $1}&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> xargs kubectl delete pods -n kube-system
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-修改服务-api_server-入口配置">4. 修改服务 api_server 入口配置&lt;/h3>
&lt;p>因为使用域名 &lt;code>foo.bar.com&lt;/code> 访问，需要修改云平台的默认 api_server 配置，这个配置会影响前端 VNC 连接的地址。将旧的 https://&lt;ip> 访问地址改为 &lt;code>http://foo.bar.com&lt;/code>，操作如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc service-config-edit common
default:
api_server: https://foo.bar.com
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置完成后就可以通过 &lt;code>https://foo.bar.com&lt;/code> 访问前端了。&lt;/p></description></item><item><title>Docs: nginx配置</title><link>https://www.cloudpods.org/zh/docs/setup/behindnginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/behindnginx/</guid><description>
&lt;p>部署完成后，如果要通过nginx将Cloudpods的前端暴露到外网访问，nginx的推荐配置如下。注意需要专门为websocket的流量增加转发规则。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="color:#8f5902;font-style:italic"># vi: ft=nginx
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">server&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">server_name&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">public_domain_name&lt;/span> &lt;span style="color:#a40000">}}&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">access_log&lt;/span> &lt;span style="color:#4e9a06">/var/log/nginx/&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">public_domain_name&lt;/span> &lt;span style="color:#a40000">}}&lt;/span>&lt;span style="color:#4e9a06">.access.log&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">listen&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">443&lt;/span> &lt;span style="color:#4e9a06">http2&lt;/span> &lt;span style="color:#4e9a06">ssl&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">ssl_certificate&lt;/span> &lt;span style="color:#4e9a06">/etc/ssl/yunion.io/cert.pem&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">ssl_certificate_key&lt;/span> &lt;span style="color:#4e9a06">/etc/ssl/yunion.io/key.pem&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">client_max_body_size&lt;/span> &lt;span style="color:#4e9a06">10g&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span> &lt;span style="color:#4e9a06">/.well-known&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">allow&lt;/span> &lt;span style="color:#4e9a06">all&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#4e9a06">/&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_pass&lt;/span> &lt;span style="color:#4e9a06">https://&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">backend_address&lt;/span> &lt;span style="color:#a40000">}}&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_read_timeout&lt;/span> &lt;span style="color:#4e9a06">3600s&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_redirect&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">Host&lt;/span> &lt;span style="color:#000">$host&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">X-Real-IP&lt;/span> &lt;span style="color:#000">$remote_addr&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">X-Forwarded-For&lt;/span> &lt;span style="color:#000">$proxy_add_x_forwarded_for&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">location&lt;/span> &lt;span style="color:#000;font-weight:bold">~&lt;/span> &lt;span style="color:#4e9a06">^/(websockify|wsproxy|connect)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_pass&lt;/span> &lt;span style="color:#4e9a06">https://&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#204a87;font-weight:bold">{&lt;/span> &lt;span style="color:#4e9a06">backend_address&lt;/span> &lt;span style="color:#a40000">}}&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_redirect&lt;/span> &lt;span style="color:#000">off&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">Host&lt;/span> &lt;span style="color:#000">$host&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">X-Real-IP&lt;/span> &lt;span style="color:#000">$remote_addr&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">X-Forwarded-For&lt;/span> &lt;span style="color:#000">$proxy_add_x_forwarded_for&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_http_version&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#4e9a06">.1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">Upgrade&lt;/span> &lt;span style="color:#000">$http_upgrade&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#4e9a06">Connection&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;upgrade&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">proxy_read_timeout&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">86400&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 备份/恢复平台</title><link>https://www.cloudpods.org/zh/docs/setup/backup/</link><pubDate>Mon, 10 Jan 2022 16:03:30 +0800</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/backup/</guid><description>
&lt;h3 id="备份平台">备份平台&lt;/h3>
&lt;h4 id="原理">原理&lt;/h4>
&lt;p>平台支持通过ocboot进行备份当前系统的配置文件（&lt;code>config.yml&lt;/code>）以及使用mysqldump来备份数据库临时文件&lt;code>onecloud.sql&lt;/code>并将其压缩。&lt;/p>
&lt;p>&lt;strong>备份流程&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>将平台配置文件拷贝到&lt;code>/opt/ocboot&lt;/code>；&lt;/li>
&lt;li>明确备份目标目录；&lt;/li>
&lt;li>在&lt;code>/opt/ocboot&lt;/code>目录下执行备份命令；&lt;/li>
&lt;/ul>
&lt;h4 id="备份命令">备份命令&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">usage: ocboot.py backup &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-h&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--backup-path BACKUP_PATH&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> config
positional arguments:
config config yaml file
optional arguments:
-h, --help show this &lt;span style="color:#204a87">help&lt;/span> message and &lt;span style="color:#204a87">exit&lt;/span>
--backup-path BACKUP_PATH
backup path
&lt;/code>&lt;/pre>&lt;/div>&lt;p>下面介绍各个参数的作用和注意事项&lt;/p>
&lt;ul>
&lt;li>&lt;code>--backup-path&lt;/code>保存备份文件的目标目录，备份的内容包括config配置文件，通过&lt;code>mysqldump&lt;/code>命令备份的数据库临时文件的压缩包&lt;code>onecloud.sql.tgz&lt;/code>，请确保目标目录磁盘空间足够且可写。&lt;/li>
&lt;li>&lt;code>config&lt;/code>是必选参数，即需要备份的配置文件名称，例如&lt;code>config-allinone.yml, config-nodes.yml, config-k8s-ha.yml，&lt;/code>以及使用快速安装时会生成的&lt;code>config-allinone-current.yml&lt;/code>，因此备份命令不对配置文件名称作假设，&lt;strong>需由使用者自行输入配置文件名称&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;ul>
&lt;li>如果平台通过ocboot部署，请将用户自己配置的&lt;code>config&lt;/code>文件或快速安装生成的&lt;code>config-allinone-current.yml&lt;/code>文件等都拷贝到&lt;code>/opt/ocboot&lt;/code>目录。&lt;/li>
&lt;li>如果平台通过iso部署，请将&lt;code> /opt/yunion/upgrade/config.yml&lt;/code>文件拷贝到&lt;code>/opt/ocboot&lt;/code> 目录。&lt;/li>
&lt;/ul>
&lt;/div>
&lt;ul>
&lt;li>备份后的配置文件名称为&lt;code>config.yml&lt;/code>。&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>备份的流程全部采用命令行参数接受输入，备份过程中无交互。因此支持 &lt;code>crontab&lt;/code>方式自动备份。但备份程序本身不支持版本 &lt;code>rotate&lt;/code>，用户可以使用 &lt;code>logrotate&lt;/code> 之类的工具来做备份管理。&lt;/li>
&lt;/ul>
&lt;h4 id="举例说明">举例说明&lt;/h4>
&lt;p>以iso部署的环境为例介绍如何备份节点到本地的&lt;code>/opt/backup&lt;/code>目录。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 将 `/opt/yunion/upgrade/config.yml`文件拷贝到`/opt/ocboot`目录&lt;/span>
$ cp -i /opt/yunion/upgrade/config.yml /opt/ocboot
$ &lt;span style="color:#204a87">cd&lt;/span> /opt/ocboot
&lt;span style="color:#8f5902;font-style:italic"># 在`/opt/ocboot`目录执行备份命令，将备份文件保存到`/opt/backup`目录&lt;/span>
$ ./ocboot.py backup --backup-path /opt/backup config.yml
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="恢复平台">恢复平台&lt;/h3>
&lt;h4 id="原理-1">原理&lt;/h4>
&lt;p>恢复节点即基于上面备份的配置文件和数据库文件恢复到新的节点中，主要包括解压数据库，并根据用户根据新环境生成的配置文件重新安装环境。&lt;/p>
&lt;p>&lt;strong>恢复流程&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>参考&lt;code>config.yml&lt;/code>配置文件准备新环境，节点数需保持一致；&lt;/li>
&lt;li>将备份文件拷贝到新环境。&lt;/li>
&lt;li>在新环境中配置ocboot工具；&lt;/li>
&lt;li>使用ocboot restore命令恢复环境。&lt;/li>
&lt;/ul>
&lt;h4 id="恢复命令">恢复命令&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">usage: ocboot.py restore &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>-h&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--backup-path BACKUP_PATH&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--install-db-to-localhost&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--master-node-ips MASTER_NODE_IPS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--master-node-as-host&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--worker-node-ips WORKER_NODE_IPS&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--worker-node-as-host&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--mysql-host MYSQL_HOST&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--mysql-user MYSQL_USER&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--mysql-password MYSQL_PASSWORD&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>--mysql-port MYSQL_PORT&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
primary_ip
positional arguments:
primary_ip primary node ip
optional arguments:
-h, --help show this &lt;span style="color:#204a87">help&lt;/span> message and &lt;span style="color:#204a87">exit&lt;/span>
--backup-path BACKUP_PATH
backup path, &lt;span style="color:#000">default&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/opt/backup
--install-db-to-localhost
use this option when install &lt;span style="color:#204a87">local&lt;/span> db
--master-node-ips MASTER_NODE_IPS
master nodes ips, seperated by comma &lt;span style="color:#4e9a06">&amp;#39;,&amp;#39;&lt;/span>
--master-node-as-host
use this option when use master nodes as host
--worker-node-ips WORKER_NODE_IPS
worker nodes ips, seperated by comma &lt;span style="color:#4e9a06">&amp;#39;,&amp;#39;&lt;/span>
--worker-node-as-host
use this option when use worker nodes as host
--mysql-host MYSQL_HOST
mysql host&lt;span style="color:#000;font-weight:bold">;&lt;/span> not needed &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">set&lt;/span> --install-db-to-
localhost
--mysql-user MYSQL_USER
mysql user, default: root&lt;span style="color:#000;font-weight:bold">;&lt;/span> not needed &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">set&lt;/span>
--install-db-to-localhost
--mysql-password MYSQL_PASSWORD
mysql password&lt;span style="color:#000;font-weight:bold">;&lt;/span> not needed &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">set&lt;/span> --install-db-to-
localhost
--mysql-port MYSQL_PORT
mysql port, default: 3306&lt;span style="color:#000;font-weight:bold">;&lt;/span> not needed &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#204a87">set&lt;/span>
--install-db-to-localhost
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>primary_ip&lt;/code>为必填项，即新环境的IP地址。&lt;/li>
&lt;li>&lt;code>--backup-path&lt;/code> 备份文件所在目录，不填，默认值为&lt;code>/opt/backup&lt;/code>目录。&lt;/li>
&lt;li>&lt;code>--install-db-to-localhost&lt;/code> 如需要在本机(&lt;code>primary&lt;/code>节点)安装数据库（&lt;code>mariadb-server&lt;/code>稳定版），则添加该参数，并自动赋予下面参数默认值
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">--mysql-host&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>127.0.0.1
--mysql-user&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>root
--mysql-password&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&amp;lt;继承备份文件里 mysql 的密码&amp;gt;
--mysql-port&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">3306&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>&lt;code>--mysql-host&lt;/code>及其他同类选项：如使用已有数据库则需要配置相关参数。注意&lt;code>--install-db-to-localhost&lt;/code>参数与&lt;code>--mysql-*&lt;/code>参数互斥。&lt;/li>
&lt;li>&lt;code>--master-node-ips &lt;/code> 同时安装&lt;code>master&lt;/code> 节点，如存在多个master节点。该参数是以半角逗号分隔的 &lt;code>ip&lt;/code> 列表。适用于多节点模式。&lt;/li>
&lt;li>&lt;code>--master-node-as-host &lt;/code>安装控制节点&lt;code>master-node&lt;/code>时，将其作为&lt;code>host&lt;/code> 节点。&lt;/li>
&lt;li>&lt;code>--worker-node-ips&lt;/code>、&lt;code>--worker-node-as-host&lt;/code>，安装计算节点&lt;code>worker-node&lt;/code>，将其作为&lt;code>host&lt;/code> 节点。&lt;/li>
&lt;/ul>
&lt;h4 id="举例说明-1">举例说明&lt;/h4>
&lt;p>以一个控制节点&lt;code>master node&lt;/code>(IP:&lt;code>10.127.190.228&lt;/code>)和一个计算节点&lt;code>work node&lt;/code>(IP:&lt;code>10.127.190.219&lt;/code>)为例，介绍如何基于备份文件恢复到新环境。&lt;/p>
&lt;ol>
&lt;li>根据备份文件&lt;code>config.yml&lt;/code>文件部署新环境，节点数需保持一致。&lt;/li>
&lt;li>将备份文件拷贝到新环境。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 在备份文件所在服务器将备份文件拷贝到新环境下的`/opt/backup`目录&lt;/span>
$ scp /opt/backup/* root@&amp;lt;新环境IP地址&amp;gt;:/opt/backup
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>在新环境上配置控制节点&lt;code>master node&lt;/code>可以免密登录到计算节点&lt;code>work node&lt;/code>。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 在控制节点`master node`上生成ssh密钥&lt;/span>
$ ssh-keygen
&lt;span style="color:#8f5902;font-style:italic"># 将生成的~/.ssh/id_rsa.pub 公钥拷贝到计算节点`work node`&lt;/span>
$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@10.127.190.219
&lt;span style="color:#8f5902;font-style:italic"># 在控制节点`master node`上尝试免密登录，获取计算节点的名称&lt;/span>
$ ssh root@10.127.190.219 &lt;span style="color:#4e9a06">&amp;#34;hostname&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 免密登录控制节点&lt;/span>
$ ssh-copy-id 10.127.190.228
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>根据新环境的IP信息修改&lt;code>config.yml&lt;/code>文件，修改当前机器 ip、worker node ips、master node ips，生成新的&lt;code>config.yml&lt;/code>配置文件。&lt;/li>
&lt;li>部署&lt;code>ocboot&lt;/code>服务&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 在`master`节点上安装ansible，以centos为例&lt;/span>
$ yum install -y ansible
&lt;span style="color:#8f5902;font-style:italic"># 安装pip&lt;/span>
$ yum -y install python-pip
&lt;span style="color:#8f5902;font-style:italic"># 拉取ocboot代码&lt;/span>
$ git clone https://github.com/yunionio/ocboot.git
$ &lt;span style="color:#204a87">cd&lt;/span> ./ocboot &lt;span style="color:#000;font-weight:bold">&amp;amp;&lt;/span> pip install -r ./requirements.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>通过&lt;code>ocboot&lt;/code>工具的&lt;code>restore&lt;/code>命令恢复节点。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 在ocboot目录下执行`restore`命令&lt;/span>
$ ./ocboot.py restore --backup-path /opt/backup --install-db-to-localhost --master-node-ips 10.127.190.228 --master-node-as-host --worker-node-ips 10.127.190.219 --worker-node-as-host 10.127.190.228
&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>数据库恢复完成后，根据配置文件恢复平台。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ /root/ocboot/run.py /root/ocboot/config.yml
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: 多可用区服务配置</title><link>https://www.cloudpods.org/zh/docs/setup/multi-zone/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/multi-zone/</guid><description>
&lt;p>平台有个可用区(zone)的概念，可以理解为对应实际环境中的机房，刚部署完服务后会有一个默认的可用区 zone0 。&lt;/p>
&lt;p>云平台的物理机管理服务(baremetal-agent), VMware管理服务(esxi-agent)以及虚拟机管理服务(host)是可用区级别的服务，如果实际环境中的服务器，物理机或者管理的 VMware 集群位于不同的机房，需要创建多个可用区，然后在不同的可用区部署这些服务。&lt;/p>
&lt;p>接下来的文档介绍如何在多个可用区部署这些服务。&lt;/p>
&lt;h2 id="创建可用区">创建可用区&lt;/h2>
&lt;p>可用区的添加使用 onecloud-operator 这个服务来控制，直接修改 onecloud namespace 里面的 default onecloudcluster 资源就行，比如下面的命令添加 &lt;code>my-zone-1&lt;/code> 这个可用区：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 修改 default onecloudcluster 的 spec.customZones&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 添加需要增加的可用区&lt;/span>
$ kubectl edit onecloudcluster -n onecloud default
...
customZones:
- my-zone-1
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改完后保存退出，然后使用 &lt;code>climc zone-list&lt;/code> 看下是否有新建的可用区：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc zone-list
+--------------------------------------+-----------+--------+----------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> Cloudregion_ID &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-----------+--------+----------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> d64ccd80-7643-454d-8d40-7f5a0d57107f &lt;span style="color:#000;font-weight:bold">|&lt;/span> my-zone-1 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">enable&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
&lt;span style="color:#000;font-weight:bold">|&lt;/span> 04f414a7-ce55-470a-8d64-c6e4e64ccdfc &lt;span style="color:#000;font-weight:bold">|&lt;/span> zone0 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">enable&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-----------+--------+----------------+
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="物理机管理服务baremetal-agent-和vmware管理服务esxi-agent">物理机管理服务(baremetal-agent) 和VMware管理服务(esxi-agent)&lt;/h2>
&lt;p>发现已经有新建的可用区 my-zone-1 了，operator 服务也会自动创建对应可用区的物理机管理服务(baremetal-agent) 和VMware管理服务(esxi-agent) ，查看对应的 deployment，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get deployments. -n onecloud &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep my-zone-1
default-baremetal-agent-my-zone-1 0/0 &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 3m37s
default-esxi-agent-my-zone-1 1/1 &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> 3m42s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中物理机服务(baremetal-agent)需要选择一个 k8s node 手动开启，请参考文档&lt;a href="../baremetal/">物理机管理服务&lt;/a>。&lt;/p>
&lt;h2 id="宿主机服务">宿主机服务&lt;/h2>
&lt;p>宿主机服务(host)管理一台宿主机上的虚拟机，默认情况下的宿主机属于可用区zone0，如果有其它机房的宿主机，需要新建可用区，然后创建一个属于这个可用区的二层网络(wire)，再基于这个二层网络(wire)创建包含注册宿主机IP的子网(network)，最后把宿主机添加进来就可以了。&lt;/p>
&lt;h3 id="创建二层网络">创建二层网络&lt;/h3>
&lt;p>直接基于之前创建的可用区 my-zone-1 创建二层网络 my-wire-1，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 10000 表示的是带宽，假设是万兆的网络&lt;/span>
$ climc wire-create my-zone-1 my-wire-1 &lt;span style="color:#0000cf;font-weight:bold">10000&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 查看新建的二层网络&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 能看到二层网络在 my-zone-1 可用区下面&lt;/span>
$ climc wire-list --details
+--------------------------------------+-----------+-----------+--------------------------------------+-----------+----------+---------+---------+--------------+-----------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Bandwidth &lt;span style="color:#000;font-weight:bold">|&lt;/span> Zone_ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Zone &lt;span style="color:#000;font-weight:bold">|&lt;/span> Networks &lt;span style="color:#000;font-weight:bold">|&lt;/span> VPC &lt;span style="color:#000;font-weight:bold">|&lt;/span> VPC_ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> public_scope &lt;span style="color:#000;font-weight:bold">|&lt;/span> domain_id &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-----------+-----------+--------------------------------------+-----------+----------+---------+---------+--------------+-----------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> f0582003-8a11-4200-8ffd-025bbe7bfc5a &lt;span style="color:#000;font-weight:bold">|&lt;/span> my-wire-1 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10000&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> d64ccd80-7643-454d-8d40-7f5a0d57107f &lt;span style="color:#000;font-weight:bold">|&lt;/span> my-zone-1 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> Default &lt;span style="color:#000;font-weight:bold">|&lt;/span> default &lt;span style="color:#000;font-weight:bold">|&lt;/span> system &lt;span style="color:#000;font-weight:bold">|&lt;/span> default &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+-----------+-----------+--------------------------------------+-----------+----------+---------+---------+--------------+-----------+
*** Total: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Pages: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Limit: &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> Offset: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Page: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> ***
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="创建-ip-子网">创建 IP 子网&lt;/h3>
&lt;p>根据上一步，已经创建好了二层网络 my-wire-1，接下来我们创建包含注册宿主机 IP 的子网，假设待注册宿主机的网络信息如下：&lt;/p>
&lt;ul>
&lt;li>IP: 192.168.121.61&lt;/li>
&lt;li>默认网关：192.168.121.1&lt;/li>
&lt;li>掩码：24&lt;/li>
&lt;/ul>
&lt;p>根据需要注册的宿主机信息，创建一个 my-hostnet-1，网段为 192.168.121.61-192.168.121.62，这里也可以根据自己的环境变更网络的范围，对应命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc network-create &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --server-type baremetal &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> --gateway 192.168.121.21 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> my-wire-1 my-hostnet-1 192.168.121.61 192.168.121.62 &lt;span style="color:#0000cf;font-weight:bold">24&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="添加计算节点">添加计算节点&lt;/h3>
&lt;p>子网创建好后，就可以使用部署工具 ocboot 的 &lt;code>run-in-docker.sh add-node&lt;/code> 命令添加目标宿主机到平台了，详细添加方法可以参考&lt;a href="../host">添加计算节点&lt;/a>，假设目标宿主机 IP 为 192.168.121.61 ，控制节点 IP 为 192.168.121.21，对应命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ ./run-in-docker add-node 192.168.121.21 192.168.121.61
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待命令执行完成后，查看宿主机所属的可用区是否为 my-zone-1：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ climc host-list --zone my-zone-1
+--------------------------------------+----------------------+-------------------+----------------+-----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+--------------------------------+--------------+-----------+--------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> ID &lt;span style="color:#000;font-weight:bold">|&lt;/span> Name &lt;span style="color:#000;font-weight:bold">|&lt;/span> Access_mac &lt;span style="color:#000;font-weight:bold">|&lt;/span> Access_ip &lt;span style="color:#000;font-weight:bold">|&lt;/span> Manager_URI &lt;span style="color:#000;font-weight:bold">|&lt;/span> Status &lt;span style="color:#000;font-weight:bold">|&lt;/span> enabled &lt;span style="color:#000;font-weight:bold">|&lt;/span> host_status &lt;span style="color:#000;font-weight:bold">|&lt;/span> mem_size &lt;span style="color:#000;font-weight:bold">|&lt;/span> cpu_count &lt;span style="color:#000;font-weight:bold">|&lt;/span> node_count &lt;span style="color:#000;font-weight:bold">|&lt;/span> sn &lt;span style="color:#000;font-weight:bold">|&lt;/span> storage_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> host_type &lt;span style="color:#000;font-weight:bold">|&lt;/span> version &lt;span style="color:#000;font-weight:bold">|&lt;/span> storage_size &lt;span style="color:#000;font-weight:bold">|&lt;/span> domain_id &lt;span style="color:#000;font-weight:bold">|&lt;/span> public_scope &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+----------------------+-------------------+----------------+-----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+--------------------------------+--------------+-----------+--------------+
&lt;span style="color:#000;font-weight:bold">|&lt;/span> d80a4163-5466-43e3-8876-6bbcb042c911 &lt;span style="color:#000;font-weight:bold">|&lt;/span> node2-192-168-121-61 &lt;span style="color:#000;font-weight:bold">|&lt;/span> 52:54:00:e0:ed:9d &lt;span style="color:#000;font-weight:bold">|&lt;/span> 192.168.121.61 &lt;span style="color:#000;font-weight:bold">|&lt;/span> https://192.168.121.61:8885 &lt;span style="color:#000;font-weight:bold">|&lt;/span> running &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#204a87">false&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> online &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3686&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> Not Specified &lt;span style="color:#000;font-weight:bold">|&lt;/span> rotate &lt;span style="color:#000;font-weight:bold">|&lt;/span> hypervisor &lt;span style="color:#000;font-weight:bold">|&lt;/span> release/3.8&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>4064385d922011109&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">29405&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> default &lt;span style="color:#000;font-weight:bold">|&lt;/span> system &lt;span style="color:#000;font-weight:bold">|&lt;/span>
+--------------------------------------+----------------------+-------------------+----------------+-----------------------------+---------+---------+-------------+----------+-----------+------------+---------------+--------------+------------+--------------------------------+--------------+-----------+--------------+
*** Total: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Pages: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> Limit: &lt;span style="color:#0000cf;font-weight:bold">20&lt;/span> Offset: &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> Page: &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> ***
&lt;/code>&lt;/pre>&lt;/div>&lt;p>发现 192.168.121.61 的宿主机已经添加到新建的可用区 my-zone-1 了。&lt;/p></description></item><item><title>Docs: 前端双向认证配置</title><link>https://www.cloudpods.org/zh/docs/setup/traefik-mutual-tls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.cloudpods.org/zh/docs/setup/traefik-mutual-tls/</guid><description>
&lt;p>平台部署后默认打开了 TLS 服务端(单向)认证，本文介绍如何在已有服务端认证的情况下，开启客户端验证(双向)认证。&lt;/p>
&lt;p>整个云平台运行在 Kubernetes 之上，前端服务通过 ingress 暴露出来，我们使用了开源的 &lt;a href="https://doc.traefik.io/traefik/v1.7">traefik&lt;/a> 组件来负责 ingress 的实现，所以在 traefik 上设置客户端认证。&lt;/p>
&lt;h2 id="生成证书">生成证书&lt;/h2>
&lt;p>下面使用生成自签名证书的方式来配置，如果已经有证书机构签发的服务端和客户端证书，可以忽略这个步骤。&lt;/p>
&lt;h3 id="生成-ca">生成 CA&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ openssl req -x509 -sha256 -newkey rsa:4096 -keyout ca.key -out ca.crt -days &lt;span style="color:#0000cf;font-weight:bold">356&lt;/span> -nodes -subj &lt;span style="color:#4e9a06">&amp;#39;/CN=My Cert Authority&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成-server-服务端证书">生成 Server 服务端证书&lt;/h3>
&lt;p>基于上面生成的 CA 签发 server 证书：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ openssl req -new -newkey rsa:4096 -keyout server.key -out server.csr -nodes -subj &lt;span style="color:#4e9a06">&amp;#39;/CN=mydomain.com&amp;#39;&lt;/span>
$ openssl x509 -req -sha256 -days &lt;span style="color:#0000cf;font-weight:bold">365&lt;/span> -in server.csr -CA ca.crt -CAkey ca.key -set_serial &lt;span style="color:#0000cf;font-weight:bold">01&lt;/span> -out server.crt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="生成-client-客户端证书">生成 Client 客户端证书&lt;/h3>
&lt;p>基于上面生成的 CA 签发 client 证书：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ openssl req -new -newkey rsa:4096 -keyout client.key -out client.csr -nodes -subj &lt;span style="color:#4e9a06">&amp;#39;/CN=My Client&amp;#39;&lt;/span>
$ openssl x509 -req -sha256 -days &lt;span style="color:#0000cf;font-weight:bold">365&lt;/span> -in client.csr -CA ca.crt -CAkey ca.key -set_serial &lt;span style="color:#0000cf;font-weight:bold">02&lt;/span> -out client.crt
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="上传证书到-kubernetes">上传证书到 Kubernetes&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 上传 ca 到 kube-system 命令空间&lt;/span>
$ kubectl -n kube-system create secret generic ca-secret --from-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>ca.crt&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>ca.crt
&lt;span style="color:#8f5902;font-style:italic"># 上传 server 证书到 onecloud 命名空间&lt;/span>
$ kubectl -n onecloud create secret generic tls-secret --from-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>tls.crt&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>server.crt --from-file&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>tls.key&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>server.key
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改前端-default-web-ingress">修改前端 default-web ingress&lt;/h2>
&lt;p>前端是通过 onecloud 命令空间里面的 default-web ingress 访问的，把前端使用的 tls 证书换成 tls-secret 。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl edit ingress -n onecloud default-web
...
tls:
&lt;span style="color:#8f5902;font-style:italic"># 修改这个 secretName 为 tls-secret&lt;/span>
- secretName: tls-secret
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改-traefik-配置">修改 traefik 配置&lt;/h2>
&lt;h3 id="修改-traefik-configmap">修改 traefik configmap&lt;/h3>
&lt;p>traefik 的配置在 kube-system 命名空间的 traefik-ingress-lb config 里面，开启客户端验证主要是配置 &lt;strong>entryPoints.https.tls.ClientCA&lt;/strong> 。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl edit configmaps -n kube-system traefik-ingress-lb
...
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>entryPoints.https&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;:443&amp;#34;&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 添加如下的 ClientCA 配置&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>entryPoints.https.tls&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>entryPoints.https.tls.ClientCA&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">files&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/tests/ca.crt&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;span style="color:#000">optional&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">false&lt;/span>
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="修改-traefik-daemonset">修改 traefik daemonset&lt;/h3>
&lt;p>然后修改 kube-system 命令空间里面的 traefik-ingress-controller daemonset ，主要是把刚才创建的 ca-secret 挂载到配置的 &lt;strong>/tests/ca.crt&lt;/strong> 目录。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl edit daemonsets -n kube-system traefik-ingress-controller
...
volumeMounts:
- mountPath: /config
name: config
&lt;span style="color:#8f5902;font-style:italic"># 添加这个 volume mount，名称为 ca&lt;/span>
- mountPath: /tests
name: ca
...
volumes:
- configMap:
defaultMode: &lt;span style="color:#0000cf;font-weight:bold">420&lt;/span>
name: traefik-ingress-lb
name: config
- name: ca
secret:
defaultMode: &lt;span style="color:#0000cf;font-weight:bold">420&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 这里引用之前创建的 ca-secret&lt;/span>
secretName: ca-secret
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="重启-traefik-服务">重启 traefik 服务&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pods -n kube-system &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep traefik &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $1}&amp;#39;&lt;/span> &lt;span style="color:#000;font-weight:bold">|&lt;/span> xargs kubectl delete pods -n kube-system
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待 traefik 容器变成 Running。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ kubectl get pods -n kube-system &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep traefik
traefik-ingress-controller-fk54h 1/1 Running &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> 9s
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-curl-进行测试">使用 curl 进行测试&lt;/h2>
&lt;p>假设部署的前端访问地址是 https://192.168.121.21 ，下面验证客户端认证是否开启：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 不使用 client 证书访问失败，符合预期&lt;/span>
$ curl -k https://192.168.121.21
curl: &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>58&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> NSS: client certificate not found &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>nickname not specified&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#8f5902;font-style:italic"># 使用 client 证书访问成功&lt;/span>
$ curl -k --cert ./client.crt --key ./client.key https://192.168.121.21
&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html &lt;span style="color:#000">lang&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>en &lt;span style="color:#000">translate&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>no&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta &lt;span style="color:#000">charset&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>utf-8&amp;gt;&amp;lt;meta http-equiv&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>X-UA-Compatible &lt;span style="color:#000">content&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;IE=edge&amp;#34;&lt;/span>&amp;gt;&amp;lt;meta &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>viewport &lt;span style="color:#000">content&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;width=device-width,initial-scale=1&amp;#34;&lt;/span>&amp;gt;&amp;lt;meta &lt;span style="color:#000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>google &lt;span style="color:#000">content&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>notranslate&amp;gt;&amp;lt;link &lt;span style="color:#000">rel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>icon &lt;span style="color:#000">href&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/favicon.ico&amp;gt;&amp;lt;title&amp;gt;云联壹云&amp;lt;/title&amp;gt;&amp;lt;link &lt;span style="color:#000">href&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/js/chunk-2d216214.5f7b7e0c.js &lt;span style="color:#000">rel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>prefetch&amp;gt;&amp;lt;link &lt;span style="color:#000">href&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/js/chunk-39bb5eb4.8512e62d.js &lt;span style="color:#000">rel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>prefetch&amp;gt;&amp;lt;link &lt;span style="color:#000">href&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/css/app.fb52a32e.css &lt;span style="color:#000">rel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>preload &lt;span style="color:#000">as&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>style&amp;gt;&amp;lt;link &lt;span style="color:#000">href&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/css/chunk-vendors.09e9c25d.css &lt;span style="color:#000">rel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>preload &lt;span style="color:#000">as&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>style&amp;gt;&amp;lt;link &lt;span style="color:#000">href&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/js/app.74cda7af.js &lt;span style="color:#000">rel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>preload &lt;span style="color:#000">as&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>script&amp;gt;&amp;lt;link &lt;span style="color:#000">href&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/js/chunk-vendors.a7b5c015.js &lt;span style="color:#000">rel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>preload &lt;span style="color:#000">as&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>script&amp;gt;&amp;lt;link &lt;span style="color:#000">href&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/css/chunk-vendors.09e9c25d.css &lt;span style="color:#000">rel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>stylesheet&amp;gt;&amp;lt;link &lt;span style="color:#000">href&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/css/app.fb52a32e.css &lt;span style="color:#000">rel&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>stylesheet&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;noscript&amp;gt;&amp;lt;strong&amp;gt;We&lt;span style="color:#4e9a06">&amp;#39;re sorry but OneCloud doesn&amp;#39;&lt;/span>t work properly without JavaScript enabled. Please &lt;span style="color:#204a87">enable&lt;/span> it to &lt;span style="color:#204a87;font-weight:bold">continue&lt;/span>.&amp;lt;/strong&amp;gt;&amp;lt;/noscript&amp;gt;&amp;lt;div &lt;span style="color:#000">id&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>app&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;script &lt;span style="color:#000">src&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/vendor.b82688a471b737ceddd1.js&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script &lt;span style="color:#000">src&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/js/chunk-vendors.a7b5c015.js&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script &lt;span style="color:#000">src&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>/js/app.74cda7af.js&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="浏览器配置">浏览器配置&lt;/h2>
&lt;p>通过以上的配置，发现客户端配置已经成功，但通过浏览器访问，还需要把客户端的证书放到浏览器里面，否则访问就会出现下面的界面：&lt;/p>
&lt;p>&lt;img src="../images/chrome-bad-ssl-client.png" alt="">&lt;/p>
&lt;p>下面以 Chrome 浏览器为例， 需要把之前生成的 client.crt 和 client.key 装换成 pfx/pkcs12 格式，就能导入浏览器，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#8f5902;font-style:italic"># 把 client.crt 和 client.key 组合到一起&lt;/span>
$ cat client.crt client.key &amp;gt; pkcs12.pem
&lt;span style="color:#8f5902;font-style:italic"># 转换成 pkcs12 格式&lt;/span>
$ openssl pkcs12 -in pkcs12.pem -export -out pkcs12.p12
&lt;/code>&lt;/pre>&lt;/div>&lt;p>把 pkcs12.p12 导入到浏览器：&lt;/p>
&lt;p>&lt;img src="../images/chrome-certs.png" alt="">&lt;/p>
&lt;p>选择刚才生成的 pkcs12.p12 证书：&lt;/p>
&lt;p>&lt;img src="../images/chrome-import-pkcs12.png" alt="">&lt;/p>
&lt;p>导入后再刷新访问前端，就可以成功访问界面。&lt;/p>
&lt;p>&lt;img src="../images/chrome-web.png" alt="">&lt;/p></description></item></channel></rss>